diff --git a/tests/test_compat.py b/tests/test_compat.py
index 7ebe71b..2765351 100644
--- a/tests/test_compat.py
+++ b/tests/test_compat.py
@@ -32,3 +32,3 @@ class LoadRadixPickle(TestCase):
             tree = load(f)
-        self.assertEquals(len(tree.nodes()), 3)
+        self.assertEqual(len(tree.nodes()), 3)
         nodes = ['10.0.1.0/24', '10.0.2.0/24', '10.0.3.0/24']
diff --git a/tests/test_regression.py b/tests/test_regression.py
index 2b173e3..4861ec9 100644
--- a/tests/test_regression.py
+++ b/tests/test_regression.py
@@ -191,3 +191,3 @@ class TestRadix(unittest.TestCase):
         del tree
-        self.assertEquals(node1.prefix, "10.0.0.0/8")
+        self.assertEqual(node1.prefix, "10.0.0.0/8")
 
@@ -207,3 +207,3 @@ class TestRadix(unittest.TestCase):
         self.assertTrue(node1 is node3)
-        self.assertEquals(node1.prefix, "10.255.255.240/28")
+        self.assertEqual(node1.prefix, "10.255.255.240/28")
 
@@ -216,3 +216,3 @@ class TestRadix(unittest.TestCase):
         self.assertTrue(node1 is node3)
-        self.assertEquals(node1.prefix, "dead:beef::/32")
+        self.assertEqual(node1.prefix, "dead:beef::/32")
 
@@ -222,5 +222,5 @@ class TestRadix(unittest.TestCase):
         node = tree.add(packed=p, masklen=26)
-        self.assertEquals(node.family, socket.AF_INET)
-        self.assertEquals(node.prefix, "224.20.11.64/26")
-        self.assertEquals(node.packed, p)
+        self.assertEqual(node.family, socket.AF_INET)
+        self.assertEqual(node.prefix, "224.20.11.64/26")
+        self.assertEqual(node.packed, p)
 
@@ -233,7 +233,7 @@ class TestRadix(unittest.TestCase):
         node = tree.add(packed=p, masklen=108)
-        self.assertEquals(node.family, socket.AF_INET6)
-        self.assertEquals(
+        self.assertEqual(node.family, socket.AF_INET6)
+        self.assertEqual(
             node.prefix,
             "dead:beef:1234:5678:9abc:def0::/108")
-        self.assertEquals(node.packed, p)
+        self.assertEqual(node.packed, p)
 
@@ -248,3 +248,3 @@ class TestRadix(unittest.TestCase):
         self.assertRaises(ValueError, tree.add, "::", 256)
-        self.assertEquals(len(tree.nodes()), 0)
+        self.assertEqual(len(tree.nodes()), 0)
 
@@ -258,5 +258,5 @@ class TestRadix(unittest.TestCase):
         self.assertTrue(node2 is node2_o)
-        self.assertNotEquals(node1.prefix, node2.prefix)
-        self.assertNotEquals(node1.network, node2.network)
-        self.assertNotEquals(node1.family, node2.family)
+        self.assertNotEqual(node1.prefix, node2.prefix)
+        self.assertNotEqual(node1.network, node2.network)
+        self.assertNotEqual(node1.family, node2.family)
 
@@ -323,7 +323,7 @@ class TestRadix(unittest.TestCase):
             prefix = "1.%d.%d.0/%d" % (i, j, k)
-            self.assertEquals(node.prefix, prefix)
+            self.assertEqual(node.prefix, prefix)
             num_nodes_out += 1
 
-        self.assertEquals(num_nodes_in - num_nodes_del, num_nodes_out)
-        self.assertEquals(
+        self.assertEqual(num_nodes_in - num_nodes_del, num_nodes_out)
+        self.assertEqual(
             num_nodes_in - num_nodes_del,
@@ -334,3 +334,3 @@ class TestRadix(unittest.TestCase):
         node = tree.add("255.255.255.255/15")
-        self.assertEquals(node.prefix, "255.254.0.0/15")
+        self.assertEqual(node.prefix, "255.254.0.0/15")
 
@@ -355,7 +355,7 @@ class TestRadix(unittest.TestCase):
                 node = tree2.search_exact(addr, k)
-                self.assertNotEquals(node, None)
-                self.assertEquals(node.data["i"], i)
-                self.assertEquals(node.data["j"], j)
+                self.assertNotEqual(node, None)
+                self.assertEqual(node.data["i"], i)
+                self.assertEqual(node.data["j"], j)
                 node.data["j"] = j
-        self.assertEquals(len(tree2.nodes()), num_nodes_in)
+        self.assertEqual(len(tree2.nodes()), num_nodes_in)
 
@@ -382,7 +382,7 @@ class TestRadix(unittest.TestCase):
                 node = tree2.search_exact(addr, k)
-                self.assertNotEquals(node, None)
-                self.assertEquals(node.data["i"], i)
-                self.assertEquals(node.data["j"], j)
+                self.assertNotEqual(node, None)
+                self.assertEqual(node.data["i"], i)
+                self.assertEqual(node.data["j"], j)
                 node.data["j"] = j
-        self.assertEquals(len(tree2.nodes()), num_nodes_in)
+        self.assertEqual(len(tree2.nodes()), num_nodes_in)
 
@@ -393,3 +393,3 @@ class TestRadix(unittest.TestCase):
         tree.add('10.0.0.0/16')
-        self.assertEquals(
+        self.assertEqual(
             tree.search_best('10.0.0.0/15').prefix,
@@ -411,6 +411,6 @@ class TestRadix(unittest.TestCase):
         tree.add('10.0.0.0/16')
-        self.assertEquals(
+        self.assertEqual(
             tree.search_worst('10.0.0.0/15').prefix,
             '10.0.0.0/8')
-        self.assertEquals(
+        self.assertEqual(
             tree.search_worst('100.0.0.0/15'),
@@ -423,3 +423,3 @@ class TestRadix(unittest.TestCase):
         tree.add('0.0.0.0/0')
-        self.assertEquals(
+        self.assertEqual(
             tree.search_best('10.10.10.10').prefix,
@@ -436,24 +436,24 @@ class TestRadix(unittest.TestCase):
         tree.add('0.0.0.0/0')
-        self.assertEquals(
+        self.assertEqual(
             [n.prefix for n in tree.search_covered('11.0.0.0/8')],
             ['11.0.0.0/16'])
-        self.assertEquals(
+        self.assertEqual(
             sorted([n.prefix for n in tree.search_covered('10.0.0.0/9')]),
             ['10.0.0.0/13', '10.0.0.0/31', '10.30.2.0/25', '10.30.2.1/32'])
-        self.assertEquals(
+        self.assertEqual(
             sorted([n.prefix for n in tree.search_covered('10.0.0.0/8')]),
             ['10.0.0.0/13', '10.0.0.0/31', '10.0.0.0/8', '10.30.2.0/25', '10.30.2.1/32'])
-        self.assertEquals(
+        self.assertEqual(
             [n.prefix for n in tree.search_covered('11.0.0.0/8')],
             ['11.0.0.0/16'])
-        self.assertEquals(
+        self.assertEqual(
             [n.prefix for n in tree.search_covered('10.30.2.64/32')],
             [])
-        self.assertEquals(
+        self.assertEqual(
             [n.prefix for n in tree.search_covered('21.0.0.0/8')],
             [])
-        self.assertEquals(
+        self.assertEqual(
             [n.prefix for n in tree.search_covered('10.0.0.1')],
             [])
-        self.assertEquals(
+        self.assertEqual(
             sorted([n.prefix for n in tree.search_covered('0.0.0.0/0')]),
@@ -467,3 +467,3 @@ class TestRadix(unittest.TestCase):
 
-        self.assertEquals(
+        self.assertEqual(
             [n.prefix for n in tree.search_covered('193.178.152.0/21')],
@@ -477,3 +477,3 @@ class TestRadix(unittest.TestCase):
 
-        self.assertEquals(
+        self.assertEqual(
             [n.prefix for n in tree.search_covered('31.3.104.0/21')],
@@ -490,12 +490,12 @@ class TestRadix(unittest.TestCase):
 
-        self.assertEquals([n.prefix for n in
+        self.assertEqual([n.prefix for n in
                            tree.search_covering('8.9.0.1/32')],
                           ['8.9.0.1/32', '8.9.0.0/16', '0.0.0.0/2'])
-        self.assertEquals([n.prefix for n in
+        self.assertEqual([n.prefix for n in
                            tree.search_covering('5.5.5.0/24')],
                           ['0.0.0.0/2'])
-        self.assertEquals([n.prefix for n in
+        self.assertEqual([n.prefix for n in
                            tree.search_covering('3.178.152.0/21')],
                           ['0.0.0.0/2'])
-        self.assertEquals([n.prefix for n in
+        self.assertEqual([n.prefix for n in
                            tree.search_covering('205.0.1.0/24')],

diff --git a/Ladybird/Utilities.cpp b/Ladybird/Utilities.cpp
index ec2ba8b..ffc79f9 100644
--- a/Ladybird/Utilities.cpp
+++ b/Ladybird/Utilities.cpp
@@ -30,18 +30,6 @@ void platform_init()
     extern void android_platform_init();
     android_platform_init();
 #else
-    s_serenity_resource_root = [] {
-        auto const* source_dir = getenv("SERENITY_SOURCE_DIR");
-        if (source_dir) {
-            return DeprecatedString::formatted("{}/Base", source_dir);
-        }
-        auto* home = getenv("XDG_CONFIG_HOME") ?: getenv("HOME");
-        VERIFY(home);
-        auto home_lagom = DeprecatedString::formatted("{}/.lagom", home);
-        if (Core::File::is_directory(home_lagom))
-            return home_lagom;
-        auto app_dir = ak_deprecated_string_from_qstring(QCoreApplication::applicationDirPath());
-        return LexicalPath(app_dir).parent().append("share"sv).string();
-    }();
+    s_serenity_resource_root = DeprecatedString::formatted("/usr/share/ladybird");
 #endif
 }
diff --git a/Ladybird/WebContent/main.cpp b/Ladybird/WebContent/main.cpp
index 31aef09..329ccb5 100644
--- a/Ladybird/WebContent/main.cpp
+++ b/Ladybird/WebContent/main.cpp
@@ -73,7 +73,7 @@ ErrorOr<int> serenity_main(Main::Arguments arguments)
     Web::ResourceLoader::initialize(RequestManagerQt::create());
     Web::WebSockets::WebSocketClientManager::initialize(Ladybird::WebSocketClientManagerLadybird::create());
 
-    Web::FrameLoader::set_default_favicon_path(DeprecatedString::formatted("{}/res/icons/16x16/app-browser.png", s_serenity_resource_root));
+    Web::FrameLoader::set_default_favicon_path(DeprecatedString::formatted("/usr/share/icons/hicolor/16x16/apps/ladybird.png"));
 
     Web::Platform::FontPlugin::install(*new Ladybird::FontPluginQt);
 
diff --git a/Ladybird/main.cpp b/Ladybird/main.cpp
index e87e73d..41fb4fc 100644
--- a/Ladybird/main.cpp
+++ b/Ladybird/main.cpp
@@ -55,7 +55,7 @@ ErrorOr<int> serenity_main(Main::Arguments arguments)
 
     TRY(handle_attached_debugger());
 
-    auto sql_client = TRY(SQL::SQLClient::launch_server_and_create_client("./SQLServer/SQLServer"sv));
+    auto sql_client = TRY(SQL::SQLClient::launch_server_and_create_client("/usr/lib/ladybird/SQLServer"sv));
     auto database = TRY(Browser::Database::create(move(sql_client)));
 
     QApplication app(arguments.argc, arguments.argv);

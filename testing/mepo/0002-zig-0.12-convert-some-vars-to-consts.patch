From 48dabfd3ce237f249c63b9428462f6781eec50aa Mon Sep 17 00:00:00 2001
From: "lauren n. liberda" <lauren@selfisekai.rocks>
Date: Sat, 20 Apr 2024 23:53:31 +0200
Subject: [PATCH] zig 0.12: convert some vars to consts

---
 src/Mepo.zig                | 13 ++++++++-----
 src/TileCache.zig           | 13 ++++++-------
 src/api/shellpipe_async.zig |  4 ++--
 src/blit/blit.zig           | 36 +++++++++++-------------------------
 src/util/utilmepolang.zig   | 22 +++++++++++-----------
 src/util/utilsdl.zig        |  2 +-
 6 files changed, 39 insertions(+), 51 deletions(-)

diff --git a/src/Mepo.zig b/src/Mepo.zig
index 44b7990..dc49cab 100644
--- a/src/Mepo.zig
+++ b/src/Mepo.zig
@@ -473,7 +473,7 @@ pub fn init_video_and_sdl_stdin_loop(mepo: *@This(), enable_stdin_mepolang_repl:
 
         while (true) {
             const stdin = &std.io.getStdIn().reader();
-            var read_slice: []const u8 = stdin.readUntilDelimiterAlloc(mepo.allocator, '\n', 102400) catch continue;
+            const read_slice: []const u8 = stdin.readUntilDelimiterAlloc(mepo.allocator, '\n', 102400) catch continue;
             const slice_z = try mepo.allocator.dupeZ(u8, read_slice);
             mepo.allocator.free(read_slice);
             std.debug.print("Read {d} bytes, running input as mepolang\n", .{slice_z.len});
@@ -509,7 +509,7 @@ pub fn sdl_event_loop(mepo: *@This()) !void {
 
         // Process SDL events
         if (sdl.SDL_WaitEventTimeout(&e, config.DragThresholdTicks) > 0) {
-            var pending_fn = switch (e.type) {
+            const pending_fn = switch (e.type) {
                 sdl.SDL_FINGERDOWN => &event_fingerdown,
                 sdl.SDL_FINGERUP => &event_fingerup,
                 sdl.SDL_KEYUP => &event_keyup,
@@ -734,7 +734,7 @@ pub fn blit(mepo: *@This()) !void {
 pub fn video_init(mepo: *@This()) !void {
     mepo.window = try setup_sdl_video_and_window(mepo.allocator);
     mepo.renderer = renderer: {
-        var r = try utilsdl.errorcheck_ptr(sdl.SDL_Renderer, sdl.SDL_CreateRenderer(
+        const r = try utilsdl.errorcheck_ptr(sdl.SDL_Renderer, sdl.SDL_CreateRenderer(
             mepo.window,
             -1,
             switch (mepo.renderer_type) {
@@ -747,7 +747,7 @@ pub fn video_init(mepo: *@This()) !void {
     };
     var sdl_renderer_info: sdl.SDL_RendererInfo = undefined;
     try utilsdl.errorcheck(sdl.SDL_GetRendererInfo(mepo.renderer, &sdl_renderer_info));
-    utildbg.log("Requested renderer driver {}, using renderer: {s}\n", .{mepo.renderer_type, sdl_renderer_info.name});
+    utildbg.log("Requested renderer driver {}, using renderer: {s}\n", .{ mepo.renderer_type, sdl_renderer_info.name });
     mepo.tile_cache.renderer = mepo.renderer;
 }
 
@@ -774,7 +774,10 @@ pub fn init(allocator: std.mem.Allocator, tile_cache: *TileCache, use_config: []
     return @as(@This(), .{
         .allocator = allocator,
         .blit_pinlayer_cache = datastructure.EvictionHashMap(
-            types.XYZ, *sdl.SDL_Texture, evict_texture, &config.MaxTextures,
+            types.XYZ,
+            *sdl.SDL_Texture,
+            evict_texture,
+            &config.MaxTextures,
         ).init(allocator),
         .async_shellpipe_threads = datastructure.QueueHashMap(i8, sdl.SDL_threadID).init(allocator),
         .config = use_config,
diff --git a/src/TileCache.zig b/src/TileCache.zig
index 9014589..0b1fa63 100644
--- a/src/TileCache.zig
+++ b/src/TileCache.zig
@@ -82,13 +82,13 @@ pub fn download_loop(tile_cache: *@This(), graphical_mode: bool) !void {
 
         // 2. Transfer from UI LIFO into transfers
         while (tile_cache.queue_lifo_ui.count() > 0 and tile_cache.transfer_map.count() < p.get(p.pref.tile_cache_max_n_transfers).u) {
-            var coords = tile_cache.queue_lifo_ui.pop();
+            const coords = tile_cache.queue_lifo_ui.pop();
             try tile_cache.curl_add_to_multi_and_register_transfer(coords.key, true);
         }
 
         // 3. Transfer from BG LIFO into transfers
         while (tile_cache.queue_lifo_bg.count() > 0 and tile_cache.transfer_map.count() < p.get(p.pref.tile_cache_max_n_transfers).u) {
-            var coords = tile_cache.queue_lifo_bg.pop();
+            const coords = tile_cache.queue_lifo_bg.pop();
             try tile_cache.curl_add_to_multi_and_register_transfer(coords.key, false);
         }
 
@@ -259,7 +259,7 @@ pub fn tile_ui_retreive_or_queue(tile_cache: *@This(), coords: types.XYZ) !TileD
         if (file_cached_png_opt) |file_cached_png| {
             defer tile_cache.allocator.free(file_cached_png);
             const surface = tile_cache.load_data_to_surface(file_cached_png) catch |err| {
-                utildbg.log("Errored when loading data for tile {} from FS (file: {s}) to SDL Surface: {}\n", .{coords, png_fs_path, err});
+                utildbg.log("Errored when loading data for tile {} from FS (file: {s}) to SDL Surface: {}\n", .{ coords, png_fs_path, err });
                 break :load_from_fs;
             };
             defer sdl.SDL_FreeSurface(surface);
@@ -285,7 +285,7 @@ pub fn tile_ui_retreive_or_queue(tile_cache: *@This(), coords: types.XYZ) !TileD
 fn curl_add_to_multi_and_register_transfer(tile_cache: *@This(), coords: types.XYZ, load_to_texture: bool) !void {
     if (tile_cache.transfer_map.get(coords)) |_| return;
 
-    var transfer_datum: *TransferDatum = datum: {
+    const transfer_datum: *TransferDatum = datum: {
         var dat = try tile_cache.allocator.create(TransferDatum);
         dat.client = curl.curl_easy_init().?;
         dat.coords = coords;
@@ -297,7 +297,7 @@ fn curl_add_to_multi_and_register_transfer(tile_cache: *@This(), coords: types.X
     };
     try tile_cache.transfer_map.put(coords, transfer_datum);
 
-    var tile_url = url: {
+    const tile_url = url: {
         var url = try tile_cache.allocator.alloc(u8, p.get(p.pref.tile_cache_url).t.?.len + (3 * 10));
         if (cstdio.sprintf(
             &url[0],
@@ -387,8 +387,7 @@ fn download_loop_progress_indicator(tile_cache: *@This(), initial_queue_size: us
         \\
     ,
         .{
-            100.0 * @as(f32, @floatFromInt(initial_queue_size - tile_cache.queue_lifo_bg.count()))
-                / @as(f32, @floatFromInt(initial_queue_size)),
+            100.0 * @as(f32, @floatFromInt(initial_queue_size - tile_cache.queue_lifo_bg.count())) / @as(f32, @floatFromInt(initial_queue_size)),
             initial_queue_size - tile_cache.queue_lifo_bg.count(),
             initial_queue_size,
             tile_cache.byte_counter / 1024 / 1024,
diff --git a/src/api/shellpipe_async.zig b/src/api/shellpipe_async.zig
index 02d60c7..f45b3e4 100644
--- a/src/api/shellpipe_async.zig
+++ b/src/api/shellpipe_async.zig
@@ -38,7 +38,7 @@ fn async_shellpipe(mepo: *Mepo, unique_handle_id: i8, cmd: []const u8) !void {
 }
 
 fn async_shellpipe_run(userdata: ?*anyopaque) callconv(.C) c_int {
-    var shellpipe_request: *AsyncShellpipeRequest = @alignCast(@ptrCast(userdata.?));
+    const shellpipe_request: *AsyncShellpipeRequest = @alignCast(@ptrCast(userdata.?));
     async_shellpipe_run_catch_errors(shellpipe_request.mepo, shellpipe_request.unique_handle_id, shellpipe_request.cmd) catch |err| {
         utildbg.log("Error running async shellpipe: {}\n", .{err});
     };
@@ -89,7 +89,7 @@ fn async_shellpipe_run_catch_errors(mepo: *Mepo, unique_handle_id: i8, cmd: []co
             if (std.mem.lastIndexOf(u8, stdout.items, ";")) |mepolang_statement_end_index| {
                 const statement = stdout.items[0 .. mepolang_statement_end_index + 1];
                 utildbg.log("Running mepolang statement from async shellpipe: {s}\n", .{statement});
-                var heap_statement = try mepo.allocator.dupeZ(u8, statement);
+                const heap_statement = try mepo.allocator.dupeZ(u8, statement);
                 utilsdl.sdl_push_event_mepolang_execution(heap_statement);
                 try stdout.replaceRange(0, mepolang_statement_end_index + 1, &[_]u8{});
             }
diff --git a/src/blit/blit.zig b/src/blit/blit.zig
index 55f74dc..5abba0c 100644
--- a/src/blit/blit.zig
+++ b/src/blit/blit.zig
@@ -187,7 +187,7 @@ fn blit_tile_pinlayer(mepo: *Mepo, tile_x: u32, tile_y: u32, zoom: u8, x_off: i3
         {
             const pingroup_order = order: {
                 // E.g. place active pingroup last so its always ontop in rendering order
-                var groups = [10]u8{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
+                const groups = [10]u8{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
                 var target_order: [10]u8 = undefined;
                 var index: u8 = 0;
                 for (groups) |i| {
@@ -201,7 +201,7 @@ fn blit_tile_pinlayer(mepo: *Mepo, tile_x: u32, tile_y: u32, zoom: u8, x_off: i3
 
             for (pingroup_order) |pin_group_i| {
                 const pin_group = mepo.pin_groups[pin_group_i];
-                var is_active_path_track= false;
+                var is_active_path_track = false;
                 var prev_pin: ?*types.Pin = null;
                 for (pin_group.items, 0..) |*pin, pin_i| {
                     defer prev_pin = pin;
@@ -227,26 +227,12 @@ fn blit_tile_pinlayer(mepo: *Mepo, tile_x: u32, tile_y: u32, zoom: u8, x_off: i3
                         }
                     };
 
-                    try blit_pin(
-                        mepo,
-                        pin,
-                        if (prev_pin != null) prev_pin else null,
-                        @intCast(pin_group_i),
-                        is_active_path,
-                        .{ .x = tile_x, .y = tile_y, .z = zoom }
-                    );
+                    try blit_pin(mepo, pin, if (prev_pin != null) prev_pin else null, @intCast(pin_group_i), is_active_path, .{ .x = tile_x, .y = tile_y, .z = zoom });
                 }
             }
 
             if (mepo.pin_group_active_item) |active_pin_i| {
-                try blit_pin(
-                    mepo,
-                    &mepo.pin_groups[mepo.pin_group_active].items[active_pin_i],
-                    null,
-                    mepo.pin_group_active,
-                    true,
-                    .{ .x = tile_x, .y = tile_y, .z = zoom }
-                );
+                try blit_pin(mepo, &mepo.pin_groups[mepo.pin_group_active].items[active_pin_i], null, mepo.pin_group_active, true, .{ .x = tile_x, .y = tile_y, .z = zoom });
             }
         }
 
@@ -362,14 +348,14 @@ fn blit_pin(mepo: *Mepo, pin: *types.Pin, prev_pin: ?*types.Pin, pin_group: u8,
         const font_height: i8 = @intCast(config.ZoomLevelToPinFontSize[p.get(p.pref.zoom).u]);
         const n_tiles_font_overlap = 2;
         const pin_in_view = r: {
-            const a = pin_target_x > (-config.Tsize * n_tiles_font_overlap)  and pin_target_x < (config.Tsize * n_tiles_font_overlap);
+            const a = pin_target_x > (-config.Tsize * n_tiles_font_overlap) and pin_target_x < (config.Tsize * n_tiles_font_overlap);
             const b = pin_target_y > -font_height and pin_target_y - (pin_rect_size / 2) < config.Tsize;
             break :r a and b;
         };
         const prevpin_in_view = r: {
             if (prev_pin == null) break :r false;
             const a = prevpin_target_x.? > (-config.Tsize * n_tiles_font_overlap) and prevpin_target_x.? < config.Tsize * n_tiles_font_overlap;
-            const b = prevpin_target_y.? > -font_height and prevpin_target_y.? - (pin_rect_size / 2) < config.Tsize; 
+            const b = prevpin_target_y.? > -font_height and prevpin_target_y.? - (pin_rect_size / 2) < config.Tsize;
             break :r a and b;
         };
         const connecting_line_in_view = r: {
@@ -430,9 +416,9 @@ fn blit_pin(mepo: *Mepo, pin: *types.Pin, prev_pin: ?*types.Pin, pin_group: u8,
         if (pin.category != .Instructive or mepo.pin_group_active != pin_group)
             break :render_pin_label;
 
-        const pin_label_bg_value : u24 = if (is_active) 0xe8e8e8 else 0xffffff;
+        const pin_label_bg_value: u24 = if (is_active) 0xe8e8e8 else 0xffffff;
         const pin_label_bg: types.Color = .{ .value = pin_label_bg_value, .opacity = 255 };
-        const pin_label_border_value : u24 = if (is_active) 0x000000 else 0xe8e8e8;
+        const pin_label_border_value: u24 = if (is_active) 0x000000 else 0xe8e8e8;
         const pin_label_border = .{ .value = pin_label_border_value, .opacity = 255 };
 
         const label_color: u24 = 0x000000;
@@ -525,7 +511,7 @@ fn blit_overlay_debugbar(mepo: *Mepo) !void {
 fn blit_help(mepo: *Mepo) !void {
     if (!p.get(p.pref.help).b) return;
 
-    var msg = msg: {
+    const msg = msg: {
         var acc = std.ArrayList([]const u8).init(mepo.allocator);
         defer acc.deinit();
         defer for (acc.items) |item| mepo.allocator.free(item);
@@ -658,7 +644,7 @@ fn blit_multiline_text(
     comptime fmt_string: [:0]const u8,
     args: anytype,
 ) !void {
-    var msg = try std.fmt.allocPrintZ(mepo.allocator, fmt_string, args);
+    const msg = try std.fmt.allocPrintZ(mepo.allocator, fmt_string, args);
     defer mepo.allocator.free(msg);
 
     const font_size = font_size: {
@@ -673,7 +659,7 @@ fn blit_multiline_text(
     var textures_height: c_int = 0;
 
     // Accumulate lines rendered into slice of textures
-    var textures: []*sdl.SDL_Texture = textures: {
+    const textures: []*sdl.SDL_Texture = textures: {
         var textures_array: [50]*sdl.SDL_Texture = undefined;
         var textures_array_size: usize = 0;
 
diff --git a/src/util/utilmepolang.zig b/src/util/utilmepolang.zig
index 4b859b3..40cc8a5 100644
--- a/src/util/utilmepolang.zig
+++ b/src/util/utilmepolang.zig
@@ -128,7 +128,7 @@ test "statementize" {
     {
         const input = &[_][]const u8{ "foo", "bar", "baz" };
         const expect_0 = [_][]const u8{ "foo", "bar", "baz" };
-        var result = try statementize(std.heap.c_allocator, input[0..]);
+        const result = try statementize(std.heap.c_allocator, input[0..]);
         try std.testing.expectEqual(@as(usize, @intCast(1)), result.len);
         for (result[0], 0..) |_, idx| {
             try std.testing.expect(std.mem.eql(u8, expect_0[idx], result[0][idx]));
@@ -140,7 +140,7 @@ test "statementize" {
         const input = &[_][]const u8{ "foo", "bar", "baz", ";", "bil", "nil", ";" };
         const expect_0 = [_][]const u8{ "foo", "bar", "baz" };
         const expect_1 = [_][]const u8{ "bil", "nil" };
-        var result = try statementize(std.heap.c_allocator, input[0..]);
+        const result = try statementize(std.heap.c_allocator, input[0..]);
         try std.testing.expectEqual(@as(usize, @intCast(2)), result.len);
         for (result[0], 0..) |_, idx| {
             try std.testing.expect(std.mem.eql(u8, expect_0[idx], result[0][idx]));
@@ -155,7 +155,7 @@ test "statementize" {
         const input = &[_][]const u8{ "foo", "[", "bar", "[", "gill", "]", "]", "baz", ";", "bil", "nil", ";" };
         const expect_0 = [_][]const u8{ "foo", "[", "bar", "[", "gill", "]", "]", "baz" };
         const expect_1 = [_][]const u8{ "bil", "nil" };
-        var result = try statementize(std.heap.c_allocator, input[0..]);
+        const result = try statementize(std.heap.c_allocator, input[0..]);
         try std.testing.expectEqual(@as(usize, @intCast(2)), result.len);
         for (result[0], 0..) |_, idx| {
             try std.testing.expect(std.mem.eql(u8, expect_0[idx], result[0][idx]));
@@ -168,7 +168,7 @@ test "statementize" {
     // Returns error for unmatched [] inputs
     {
         const input = &[_][]const u8{ "foo", "]", ";" };
-        var result = statementize(std.heap.c_allocator, input[0..]);
+        const result = statementize(std.heap.c_allocator, input[0..]);
         try std.testing.expectEqual(result, error.UnbalancedBrackets);
     }
 }
@@ -177,8 +177,8 @@ test "tokenize" {
     {
         // basic tokenization test based on whitespace
         const input = "foo bar baz";
-        var expect = [_][]const u8{ "foo", "bar", "baz" };
-        var result = try tokenize(std.heap.c_allocator, input);
+        const expect = [_][]const u8{ "foo", "bar", "baz" };
+        const result = try tokenize(std.heap.c_allocator, input);
         try std.testing.expectEqual(@as(usize, @intCast(3)), result.len);
         for (result, 0..) |_, idx| {
             try std.testing.expect(std.mem.eql(u8, expect[idx], result[idx]));
@@ -188,8 +188,8 @@ test "tokenize" {
     {
         // e.g. treats [] brackets as individual tokens irregardless of whitespace (test [foo])
         const input = "foo bar [baz]";
-        var expect = [_][]const u8{ "foo", "bar", "[", "baz", "]" };
-        var result = try tokenize(std.heap.c_allocator, input);
+        const expect = [_][]const u8{ "foo", "bar", "[", "baz", "]" };
+        const result = try tokenize(std.heap.c_allocator, input);
         try std.testing.expectEqual(@as(usize, @intCast(5)), result.len);
         for (result, 0..) |_, idx| {
             try std.testing.expect(std.mem.eql(u8, expect[idx], result[idx]));
@@ -199,8 +199,8 @@ test "tokenize" {
     {
         // e.g. treats [] brackets as individual tokens irregardless of whitespace (test [ foo])
         const input = "foo bar [ baz]";
-        var expect = [_][]const u8{ "foo", "bar", "[", "baz", "]" };
-        var result = try tokenize(std.heap.c_allocator, input);
+        const expect = [_][]const u8{ "foo", "bar", "[", "baz", "]" };
+        const result = try tokenize(std.heap.c_allocator, input);
         try std.testing.expectEqual(@as(usize, @intCast(5)), result.len);
         for (result, 0..) |_, idx| {
             try std.testing.expect(std.mem.eql(u8, expect[idx], result[idx]));
@@ -217,7 +217,7 @@ test "argize" {
         expect: []const types.MepoArg,
     };
 
-    var specs = [_]spec{
+    const specs = [_]spec{
         .{
             // Standard check to make sure text / numbers argized properly
             .input = &[_][]const u8{ "arga", "22.2" },
diff --git a/src/util/utilsdl.zig b/src/util/utilsdl.zig
index 0ff0501..ec2f4f9 100644
--- a/src/util/utilsdl.zig
+++ b/src/util/utilsdl.zig
@@ -52,7 +52,7 @@ pub fn sdl_push_event_signal(signal: c_int) callconv(.C) void {
 }
 
 pub fn sdl_renderer_set_draw_color(renderer: *sdl.SDL_Renderer, color: types.Color) errors.SDLError!void {
-    var sdl_color = color.to_sdl();
+    const sdl_color = color.to_sdl();
     const blend_mode = if (sdl_color.a != sdl.SDL_ALPHA_OPAQUE) sdl.SDL_BLENDMODE_ADD else sdl.SDL_BLENDMODE_NONE;
     try errorcheck(sdl.SDL_SetRenderDrawBlendMode(renderer, @intCast(blend_mode)));
     try errorcheck(sdl.SDL_SetRenderDrawColor(renderer, sdl_color.r, sdl_color.g, sdl_color.b, color.opacity));

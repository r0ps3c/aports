# Maintainer: psykose <alice@ayaya.dev>
pkgname=electron
pkgver=23.1.4
pkgrel=0
_chromium=110.0.5481.192
_depot_tools=c5b38329e6b5fd3ebf87afb2267620ad2d9269ea
pkgdesc="Electron cross-platform desktop toolkit"
url="https://github.com/electron/electron"
arch="aarch64 x86_64" # same as chromium
license="MIT"
depends="gtk+3.0 so:libudev.so.1 xdg-utils"
makedepends="
	alsa-lib-dev
	aom-dev
	bash
	brotli-dev
	bsd-compat-headers
	bzip2-dev
	c-ares-dev
	cairo-dev
	clang-dev
	clang-extra-tools
	compiler-rt
	cups-dev
	curl-dev
	dav1d-dev
	dbus-glib-dev
	eudev-dev
	ffmpeg-dev
	findutils
	flac-dev
	flex
	freetype-dev
	gperf
	gtk+3.0-dev
	gn
	gzip
	harfbuzz-dev
	hunspell-dev
	http-parser-dev
	hwids-usb
	java-jdk
	jpeg-dev
	jsoncpp-dev
	krb5-dev
	lcms2-dev
	libarchive-tools
	libavif-dev
	libbsd-dev
	libcap-dev
	libevent-dev
	libexif-dev
	libgcrypt-dev
	libjpeg-turbo-dev
	libnotify-dev
	libusb-dev
	libva-dev
	libwebp-dev
	libxcomposite-dev
	libxcursor-dev
	libxinerama-dev
	libxml2-dev
	libxrandr-dev
	libxscrnsaver-dev
	libxslt-dev
	linux-headers
	lld
	llvm
	mesa-dev
	minizip-dev
	nghttp2-dev
	nodejs
	npm
	nss-dev
	opus-dev
	pciutils-dev
	perl
	pipewire-dev
	pulseaudio-dev
	py3-httplib2
	py3-parsing
	py3-six
	python3
	qt5-qtbase-dev
	re2-dev
	rsync
	samurai
	snappy-dev
	speex-dev
	sqlite-dev
	woff2-dev
	xcb-proto
	yarn
	zlib-dev
	zstd
	"
subpackages="$pkgname-lang $pkgname-dev"
# the lower patches are specific to electron, the top ones are from the equivalent chromium version
source="https://dev.alpinelinux.org/archive/electron/electron-$pkgver.tar.zst
	chromium-110-CredentialUIEntry-const.patch
	chromium-110-DarkModeLABColorSpace-pow.patch
	chromium-110-NativeThemeBase-fabs.patch
	chromium-VirtualCursor-standard-layout.patch
	chromium-revert-drop-of-system-java.patch
	chromium-use-alpine-target.patch
	crbug-1407202-mediarouter-crash.patch
	dns-resolver.patch
	fix-crashpad.patch
	fix-missing-cstdint-include-musl.patch
	gdbinit.patch
	libcxx-muslmode.patch
	musl-sandbox.patch
	musl-tid-caching.patch
	musl-v8-monotonic-pthread-cont_timedwait.patch
	narrowing-cast.patch
	no-execinfo.patch
	no-glibc-version.patch
	no-mallinfo.patch
	no-res-ninit-nclose.patch
	no-stat-redefine.patch
	partition-atfork.patch
	quiche-arena-size.patch
	scoped-file-no-close.patch
	system-icu.patch
	temp-failure-retry.patch
	toolhack.patch
	wtf-stacksize.patch

	icon.patch
	python-jinja-3.10.patch
	webpack-hash.patch

	default.conf
	electron.desktop
	electron-launcher.sh
	"
# chromium sandbox is suid
# tests are todo for some base checks
options="!check net suid"

# creates a dist tarball that does not need to git clone everything at build time.
snapshot() {
	deps
	# vpython3 execs system python3 with this set
	export VPYTHON_BYPASS="manually managed python not supported by chrome operations"
	export CHROMIUM_BUILDTOOLS_PATH="$srcdir/src/buildtools"
	mkdir -p "$srcdir"
	cd "$srcdir"
	git clone --branch=$_chromium --depth=1 \
		https://chromium.googlesource.com/chromium/src.git

	git clone https://github.com/electron/electron.git

	(
		git clone --depth 1 -b main https://chromium.googlesource.com/chromium/tools/depot_tools.git
		cd depot_tools
		git fetch --depth 1 origin $_depot_tools
		git checkout $_depot_tools
	)

	export PATH="$PATH:$srcdir/depot_tools"

	echo "solutions = [
	{
		\"name\": \"src/electron\",
		\"url\": \"file://$srcdir/electron@v$pkgver\",
		\"deps_file\": \"DEPS\",
		\"managed\": False,
		\"custom_deps\": {
			\"src\": None,
		},
		\"custom_vars\": {},
	},
	]" > .gclient

	python3 depot_tools/gclient.py sync \
		--with_branch_heads \
		--with_tags \
		--nohooks

	python3 src/build/landmines.py
	python3 src/build/util/lastchange.py -o src/build/util/LASTCHANGE
	python3 src/build/util/lastchange.py -s src/third_party/dawn \
		--revision src/gpu/webgpu/DAWN_VERSION
	python3 src/build/util/lastchange.py -m GPU_LISTS_VERSION \
		--revision-id-only --header src/gpu/config/gpu_lists_version.h
	python3 src/build/util/lastchange.py -m SKIA_COMMIT_HASH \
		-s src/third_party/skia --header src/skia/ext/skia_commit_hash.h

	# why?
	cp -r electron/patches/ffmpeg src/electron/patches/

	python3 electron/script/apply_all_patches.py \
		electron/patches/config.json

	python3 src/tools/update_pgo_profiles.py \
		--target=linux \
		update \
		--gs-url-base=chromium-optimization-profiles/pgo_profiles

	python3 src/tools/download_optimization_profile.py \
		--newest_state=src/chrome/android/profiles/newest.txt \
		--local_state=src/chrome/android/profiles/local.txt \
		--output_name=src/chrome/android/profiles/afdo.prof \
		--gs_url_base=chromeos-prebuilt/afdo-job/llvm

	mv src $pkgname-$pkgver

	# extra binaries are most likely things we don't want, so nuke them all
	for elf in $(scanelf -RA -F "%F" $pkgname-$pkgver); do
		rm -f "$elf"
	done

	msg "generating tarball.. (this takes a while)"
	tar -cf $pkgname-$pkgver.tar \
		--exclude="ChangeLog*" \
		--exclude="testdata/*" \
		--exclude="test_data/*" \
		--exclude="android_rust_toolchain/*" \
		--exclude-backups \
		--exclude-caches-all \
		--exclude-vcs \
		$pkgname-$pkgver

	zstd --ultra --long -22 -T0 -vv $pkgname-$pkgver.tar
}

unpack() {
	mkdir -p "$srcdir"
	local s
	for s in $source; do
		case $s in
		*.tar.zst)
			zstd -c -d "$SRCDEST/$(filename_from_uri $s)" | tar -x -C "$srcdir"
			;;
		esac
	done
}

prepare() {
	default_prepare

	git init .

	# link to system tools
	ln -sfv /usr/bin/clang-format buildtools/linux64/clang-format
	mkdir -p third_party/node/linux/node-linux-x64/bin
	ln -sfv /usr/bin/node third_party/node/linux/node-linux-x64/bin/node
	ln -sfv /usr/bin/java third_party/jdk/current/bin/java

	(
		cd electron
		git init .
		git config user.email "example@example.com"
		git config user.name "example"
		git add LICENSE
		git commit -m "init"
		git tag "v$pkgver"
		# jesus christ what the fuck is wrong with you?
		touch .git/packed-refs
		yarn install --frozen-lockfile --no-scripts
	)

	(
		cd third_party/node
		./update_npm_deps
	)

	# these are normally unbundled, but they can't be with custom_libcxx.
	# we use custom_libcxx as there are a few libstdc++ incompatibilities
	# that now cause segfaults with the wayland ozone platform since electron 22.
	# obviously, this is a FIXME.
	# ---
	# jsoncpp
	# re2
	# woff2
	# ---
	# libavif - https://github.com/AOMediaCodec/libavif/commit/4d2776a3
	local use_system="
		brotli
		dav1d
		ffmpeg
		flac
		fontconfig
		freetype
		harfbuzz-ng
		icu
		libaom
		libdrm
		libevent
		libjpeg
		libwebp
		libxml
		libxslt
		opus
		snappy
		zlib
		"

	for _lib in $use_system libjpeg_turbo; do
		msg "Removing buildscripts for system provided $_lib"
		find . -type f -path "*third_party/$_lib/*" \
			\! -path "*third_party/$_lib/chromium/*" \
			\! -path "*third_party/$_lib/google/*" \
			\! -path './base/third_party/icu/*' \
			\! -path './third_party/libxml/*' \
			\! -path './third_party/pdfium/third_party/freetype/include/pstables.h' \
			\! -path './third_party/harfbuzz-ng/utils/hb_scoped.h' \
			\! -path './third_party/crashpad/crashpad/third_party/zlib/zlib_crashpad.h' \
			\! -regex '.*\.\(gn\|gni\|isolate\|py\)' \
			-delete
	done

	# https://groups.google.com/a/chromium.org/d/topic/chromium-packagers/9JX1N2nf4PU/discussion
	touch chrome/test/data/webui/i18n_process_css_test.html
	# Use the file at run time instead of effectively compiling it in
	sed 's|//third_party/usb_ids/usb.ids|/usr/share/hwdata/usb.ids|g' \
		-i services/device/public/cpp/usb/BUILD.gn

	msg "Running debundle script"
	python3 build/linux/unbundle/replace_gn_files.py --system-libraries \
		$use_system
	python3 third_party/libaddressinput/chromium/tools/update-strings.py

	# prevent annoying errors when regenerating gni
	sed -i 's,^update_readme$,#update_readme,' \
		third_party/libvpx/generate_gni.sh

	# allow system dependencies in "official builds"
	sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
		tools/generate_shim_headers/generate_shim_headers.py

	# https://crbug.com/893950
	sed -i -e 's/\<xmlMalloc\>/malloc/' -e 's/\<xmlFree\>/free/' \
		third_party/blink/renderer/core/xml/*.cc \
		third_party/blink/renderer/core/xml/parser/xml_document_parser.cc \
		third_party/libxml/chromium/*.cc \
		third_party/maldoca/src/maldoca/ole/oss_utils.h

	_configure
}

_configure() {
	cd "$builddir"
	msg "Configuring build"

	export PATH="$PATH:/usr/lib/qt5/bin"

	# clang uses much less memory (and this doesn't support gcc)
	export CC=clang
	export CXX=clang++

	# required to find the tools
	export AR=llvm-ar
	export NM=llvm-nm
	export LD=clang++

	# less log spam, reproducible
	export CFLAGS="${CFLAGS/-g/} -O2 -Wno-unknown-warning-option -Wno-builtin-macro-redefined -Wno-deprecated-declarations"
	export CXXFLAGS="${CXXFLAGS/-g/} -O2 -Wno-unknown-warning-option -Wno-builtin-macro-redefined -Wno-deprecated-declarations"
	export CPPFLAGS="${CPPFLAGS/-g/} -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__="

	# shellcheck disable=2089
	local gn_config="
		clang_base_path=\"/usr\"
		custom_toolchain=\"//build/toolchain/linux/unbundle:default\"
		host_toolchain=\"//build/toolchain/linux/unbundle:default\"
		import(\"//electron/build/args/release.gn\")

		blink_enable_generated_code_formatting=false
		clang_use_chrome_plugins=false
		fatal_linker_warnings=false
		ffmpeg_branding=\"Chrome\"
		icu_use_data_file=true
		is_cfi=false
		is_component_ffmpeg=true
		is_debug=false
		is_official_build=true
		symbol_level=0
		treat_warnings_as_errors=false

		angle_enable_gl_null=false
		build_tflite_with_xnnpack=false
		build_with_tflite_lib=false
		disable_fieldtrial_testing_config=true
		enable_hangout_services_extension=true
		enable_library_cdms=false
		enable_media_remoting=false
		enable_nacl=false
		enable_paint_preview=false
		enable_reading_list=false
		enable_remoting=false
		enable_reporting=false
		enable_screen_ai_service=false
		enable_service_discovery=false
		enable_stripping=false
		enable_vr=false
		ozone_platform_headless=false

		link_pulseaudio=true
		proprietary_codecs=true
		rtc_link_pipewire=true
		rtc_use_pipewire=true
		use_custom_libcxx=true
		use_dawn=false
		use_gnome_keyring=false
		use_pulseaudio=true
		use_sysroot=false
		use_system_cares=true
		use_system_freetype=true
		use_system_harfbuzz=true
		use_system_lcms2=true
		use_system_libdrm=true
		use_system_libffi=true
		use_system_libjpeg=true
		use_system_nghttp2=true
		use_system_zlib=true
		use_vaapi=true
		"

	# shellcheck disable=2086,2090,2116
	gn gen out/Release --args="$(echo $gn_config)" \
		--export-compile-commands
}

build() {
	export PATH="$PATH:/usr/lib/qt5/bin"

	ninja -C out/Release \
		electron_dist_zip \
		node_gypi_headers \
		node_version_header \
		tar_headers
}

package() {
	mkdir -p "$pkgdir"/usr/lib/electron "$pkgdir"/usr/bin

	bsdtar -xf out/Release/dist.zip -C "$pkgdir"/usr/lib/electron

	chmod u+s "$pkgdir"/usr/lib/electron/chrome-sandbox

	install -Dm755 "$srcdir"/electron-launcher.sh "$pkgdir"/usr/bin/electron
	install -Dm755 "$srcdir"/default.conf "$pkgdir"/etc/electron/default.conf

	mkdir -p "$pkgdir"/usr/include/electron

	mv -v "$builddir"/out/Release/gen/node_headers "$pkgdir"/usr/include/electron
	ln -sv /usr/include/electron/node_headers/include/node "$pkgdir"/usr/include/electron/node

	mkdir -p "$pkgdir"/usr/include/electron/node_headers/include/nan
	cp -v "$builddir"/third_party/nan/*.h "$pkgdir"/usr/include/electron/node_headers/include/nan
	ln -sv /usr/include/electron/node_headers/include/nan "$pkgdir"/usr/include/electron/nan

	install -Dm644 electron/default_app/icon.png \
		"$pkgdir"/usr/share/icons/hicolor/1024x1024/apps/electron.png
	install -Dm644 "$srcdir"/electron.desktop \
		-t "$pkgdir"/usr/share/applications/
}

lang() {
	pkgdesc="$pkgdesc (translations)"
	install_if="$pkgname=$pkgver-r$pkgrel lang"

	mkdir -p "$subpkgdir"/usr/lib/electron/locales

	mv "$pkgdir"/usr/lib/electron/locales/*.pak \
		"$subpkgdir"/usr/lib/electron/locales
	mv "$subpkgdir"/usr/lib/electron/locales/en-US.pak \
		"$pkgdir"/usr/lib/electron/locales
}

sha512sums="
d83ad5f3ebc56d36a95c34ca3340fbce5cb2e5dab362c67a72d91166c7ce3086303be953107f240792803f3a892e131e8b366e9f6ed14eeafecf4b45ab480235  electron-23.1.4.tar.zst
6055a1e487b336397a792375fa59dc5dcadca88041e3b1a41be2d57315a39b52ad4296908245a7bbbe36f2ca898df3cb4a5956559bd43a9b58f5bc6663328158  chromium-110-CredentialUIEntry-const.patch
90a965342442d89e715246e1917f7d36f725875ca8bd2c63b9d0a84bfb5e88a4e3989e99a2f85fc43b86a9fd16d2cb1cd807abff088e0ec6610d0d70ec70d4c1  chromium-110-DarkModeLABColorSpace-pow.patch
831b0c255f4ffe286e6f63d704508841fda5c4ad2250dfc993a7b47126e03ebb98e9f7383b8b5e1220deead4718615d73a52e0ac42126a5cbbe8b4b82a88a731  chromium-110-NativeThemeBase-fabs.patch
f88adc643dacf7e7be1b9bb77ff2c172cd04de2a988d3cdca77313122ba3ea93e6781ee675f3d7daf337a2542c0cbf31ffb08413e9f85c287b3a5e950d7d8a31  chromium-VirtualCursor-standard-layout.patch
29bb685e03356a77df5fd347cdf55194cc8b3265c421cc76e54d64edefc329dbcb052deb26b22e8f587ce68456876c071de1b7d258dd0fcc6ee66c875ec4a020  chromium-revert-drop-of-system-java.patch
fa291e941076146d0edd5b96c088240a44a6e0aca3dfc744929655607182d2dc47e6c35ecb419f7c623fcf7f26dc3c4dd924dbf5ed10c3b986283f5ef2f72573  chromium-use-alpine-target.patch
7e484714bcf060e6165677e6f12a57f1c6381ab2ad3c5e4decc1e1b7ed9aa00b1ad19c62359898c874b98809540230567f267f25abebf48e85740b03138e6b01  crbug-1407202-mediarouter-crash.patch
c13ae17c68f3e144ed635ec3f49558275f30e13e5689e4011d8798bd0cce20cf30b4248c4763162a33055987aa1f519d1cb31b9acf02fc1f0cf8ddbf04889ff0  dns-resolver.patch
6f93fc8efa37cf5181551f5fe1fce0939381d30734bb9c621dda5edd02835030f3d9b83c1f5ad5b70c219cd947b1026f754ac5708ff1eba7a4a6550c067924a2  fix-crashpad.patch
9200f78bad70e95c648a5e8392d50642190600f655c6baa366ff6467ebad52d3b3f305dad58f3610da67136f4b723557653b174ec5c25be8d8737ee04d9ee09f  fix-missing-cstdint-include-musl.patch
33ee60863cc438ef57ffef92ba4cf67a856a5ffc16138bce241bcf87e47b15154aa86918e793c26f7ec4dc62a445257ad5673ed7001daf22c4043cf6cc57da7f  gdbinit.patch
1bb1b31ee3057fb626a2d5eb44698946484e45017310d55026347f18f774453828802438ba14691d81edaad6c96c5df25c4aca772a30674a04feca3df11fccfb  libcxx-muslmode.patch
2e30cfe800e9307d010748dabd43edcb2a4ba5bf7c51ab19c9dade6aeeacc3dc98e8115c27f3e28bf4ce2b596a8d21f4ce76fc6b4e1810ea5a788cd5a784125c  musl-sandbox.patch
e7163ac5810ac85366cef2447412287c856e3d67c6b77f219a6e5a418b1965b98e449c409424ad0704a5bded9355dd0aec3dc4585918ce5a2ab36c079707afe2  musl-tid-caching.patch
92eb002718026611f5542362ad69b67f0a398ff71b3fca5c05d55cb5c6f9f29334e5e127bb4860cfaa3fba0f0d4c901e2b98808217e7dc02e254a64a5c9521aa  musl-v8-monotonic-pthread-cont_timedwait.patch
d4fac42d939cc5991367ebe5f8578ca5cb3cbe0aea34b33366bba72ff334c5853021d123df80b7f1cf11cd2e45b83bae29e3bdb3ae6b424834ba3117aeb51ecf  narrowing-cast.patch
dd8f9874700f4c158d3551149f16293de9c8d0b70d527f3261871828bb78442dc39a51f3e2fa4320f116cda4738d3c6b800e70d7b5e9bae63b4fd2751966e1e8  no-execinfo.patch
76fd81b974c087e9622d026735be46320496b1e25ef60a7388029e1b8eadf3fe3994ac4fdeef13fe97919f58f46ae6bd99a6d43d491cdb743b1bb940e4c0ca47  no-glibc-version.patch
b5479874d125ee95a311295f227f8881a83023ec34fded7a6160b3ae32ea3ba0f2b833a9fb264c57f3d22746b6d8b00bdc8eb2ff86c43c412d6d3b55ae15b16b  no-mallinfo.patch
e4c4e5bc6f828f9c883dd418c0ba01887949c29c311f76206a1ec29f620b0c0ba0452949dc2778a9c46ea066405857536964a36436a68eecf7da7952736333cf  no-res-ninit-nclose.patch
61cf1e7e607f846ca21dd431fcd656e6b75cc2786c02916b50ac8cc49e9eeb725ff40c68eee3ada70073022f77b22172ed4150e7c90bd3e7e4c8a4668e02418b  no-stat-redefine.patch
677d455b817172be351214bff502f554c164b6da011b1a5a41e7ade8166d4a22a728bdf6f5a494c2182a320e9a69ccaa415487359c67e5f140e54ac8aeba70d2  partition-atfork.patch
2bc334352cdf0e523003c882e1a29623896bf3f3543469b23a532cb5ff32a75e7f23dc94abfaed4a97e24d26bdc51b780728583f1e7e7860f00c49e4d91edfa9  quiche-arena-size.patch
8c33808ede31dd3b8eb951991e034751949756c4e6c2cd0e19823e95fddf5f9d94424bbd73ffe6dd965df2b0887fc5c42ab8a97c64b553d47662e90651b84f13  scoped-file-no-close.patch
b1736d4cbcef69e83826c7f3c25cf5d18726d9bc9ebcd5ad59f070195461b7d8afd22db622452f6d5ce7f5c7f969ac9347553c4b2e028a633970eed6a5aa30f5  system-icu.patch
e48693e6b7aeebf69a5acbf80d9a35defe4c23835121dfeb58b051ac7c527e758a41004f4d193274fe1b01c0bfb1dbc77b09cb6a404a3fdee507a2918afb0edb  temp-failure-retry.patch
86f5c27633ae4f3309ae932bf8377dbd523ed05e44b48582def92ad50a4c6c482a5782afaf1888786a3899d81376af117061b323c549904256385e83eb888759  toolhack.patch
335f29481ed337e742fef4004a9c80468d2020f8540200e4e2dc35eeeae1a40fc2e89745f49db89f3dbb5917b4b466472d87b84cc048782cdac12cbf458e1fe0  wtf-stacksize.patch
905565c10f5e5600e7d4db965c892cc45009a258e9995da958974d838ace469e1db1019195307e8807860d5b55ba6bfeea478b1f39a9b99e82c619b2816a1a22  icon.patch
e05180199ee1d559e4e577cedd3e589844ecf40d98a86321bf1bea5607b02eeb5feb486deddae40e1005b644550331f6b8500177aa7e79bcb3750d3c1ceb76c3  python-jinja-3.10.patch
2aa340854316f1284217c0ca17cbf44953684ad6c7da90815117df30928612eb9fb9ffb734b948dfc309cd25d1a67cd57f77aac2d052a3dd9aca07a3a58cbb30  webpack-hash.patch
08460b15037511a4e5469ceac6ae5dd4db4c8cb87c129aaaf40ba58b16c60b8a307ffdd85805efead235758abed09ec31db1ef4cf9159f7b9acdcee3031bc96c  default.conf
191559fc7aa1ea0353c6fb0cc321ee1d5803a0e44848c8be941cfab96277b0de6a59962d373e2a2a1686c8f9be2bcf2d2f33706759a339a959e297d3f7fda463  electron.desktop
03750694e5e0b66f084c6e43135e60be15abb059e23486346ee4352dcc236984f2f35467b47f2b2ad46c98c22091cc2b978de8e73680febadba169d960f13f9f  electron-launcher.sh
"

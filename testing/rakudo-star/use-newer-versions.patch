--- a/src/rakudo-star-modules/Config-Parser-toml/META6.json
+++ b/src/rakudo-star-modules/Config-Parser-toml/META6.json
@@ -5,7 +5,7 @@
     "Patrick Spek <p.spek@tyil.work>"
   ],
   "depends": [
-    "Config::TOML:ver<0.1.1>:auth<atweiden>",
+    "Config::TOML:ver<0.1.2>:auth<atweiden>",
     "Config:ver<3.0.3>:auth<cpan:TYIL>"
   ],
   "description": "TOML parser for Config",
--- /dev/null
+++ b/src/rakudo-star-modules/Digest-MD5/META6.json
@@ -0,0 +1,18 @@
+{
+    "perl"        : "6.*",
+    "name"        : "Digest::MD5",
+    "version"     : "0.05",
+    "description" : "Perl6 port of Perl5' Digest::MD5 module",
+    "build-depends" : [ ],
+    "test-depends" : [
+        "Test"
+    ],
+    "depends" : [ ],
+    "provides" : {
+        "Digest::MD5" : "lib/Digest/MD5.pm"
+    },
+    "author"      : "Cosimo Streppone",
+    "authority"   : "cosimo",
+    "source-url"  : "git://github.com/cosimo/perl6-digest-md5.git"
+}
+
--- a/src/rakudo-star-modules/Digest-MD5/lib/Digest/MD5.pm
+++ b/src/rakudo-star-modules/Digest-MD5/lib/Digest/MD5.pm
@@ -3,33 +3,71 @@
 #
 
 class Digest::MD5:auth<cosimo>:ver<0.05> {
+    sub prefix:<¬>(\x)       {   (+^ x) % 2**32 }
+    sub infix:<⊞>(\x, \y)    {  (x + y) % 2**32 }
+    sub infix:«<<<»(\x, \n)  { (x +< n) % 2**32 +| (x +> (32-n)) }
 
-    # Use .pir, not .pbc!
-    # See https://trac.parrot.org/parrot/ticket/1694
-    pir::load_bytecode__vs('Digest/MD5.pir');
+    my \FGHI = -> \X, \Y, \Z { (X +& Y) +| (¬X +& Z) },
+               -> \X, \Y, \Z { (X +& Z) +| (Y +& ¬Z) },
+               -> \X, \Y, \Z { X +^ Y +^ Z           },
+               -> \X, \Y, \Z { Y +^ (X +| ¬Z)        };
 
-    multi method md5_hex (Str $str) {
+    my \S = (
+            (7, 12, 17, 22) xx 4,
+            (5,  9, 14, 20) xx 4,
+            (4, 11, 16, 23) xx 4,
+            (6, 10, 15, 21) xx 4,
+        ).flat;
 
-        my $md5_hex = Q:PIR {
-            .local pmc f, g, str
-            str = find_lex '$str'
-            f = get_root_global ['parrot'; 'Digest'], '_md5sum'
-            $S0 = repr_unbox_str str
-            $P1 = f($S0)
-            g = get_root_global ['parrot'; 'Digest'], '_md5_hex'
-            $S0 = g($P1)
-            %r =  perl6_box_str $S0
-        };
 
-        return $md5_hex;
+    my \T = (floor(abs(sin($_ + 1)) * 2**32) for ^64).flat;
+
+    my \k = (
+            (   $_           for ^16),
+            ((5*$_ + 1) % 16 for ^16),
+            ((3*$_ + 5) % 16 for ^16),
+            ((7*$_    ) % 16 for ^16),
+        ).flat;
+
+
+    sub little-endian($w, $n, *@v) { (@v X+> flat ($w X* ^$n)) X% (2 ** $w) }
+
+    sub md5-pad($msg) {
+        my \bits = 8 * $msg.elems;
+        my @padded = flat $msg.list, 0x80, 0x00 xx (-(bits div 8 + 1 + 8) % 64);
+        flat @padded.map({ :256[$^d,$^c,$^b,$^a] }), little-endian(32, 2, bits);
     }
 
-    multi method md5_hex (@str) {
+    sub md5-block(@H, @X) {
+        my ($A, $B, $C, $D) = @H;
+        for ^64 -> \i {
+            my \f = FGHI[i div 16]($B, $C, $D);
+              ($A, $B,                                         $C, $D)
+            = ($D, $B ⊞ (($A ⊞ f ⊞ T[i] ⊞ @X[k[i]]) <<< S[i]), $B, $C);
+        }
+        @H «⊞=» ($A, $B, $C, $D);
+    }
 
-        my $str = @str.join("");
-        my $md5_hex = self.md5_hex($str);
-        return $md5_hex;
+    our sub md5($msg) {
+        my @M = md5-pad($msg);
+        my @H = 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476;
+        md5-block(@H, @M[$_ .. $_+15]) for 0, 16 ...^ +@M;
+        Buf.new: little-endian(8, 4, @H)
+    }
 
+    multi method md5_hex(Str $str) {
+        md5( $str.encode('latin-1') ).list».fmt('%02x').join
     }
 
+    multi method md5_hex(@str) {
+        md5( @str.join.encode('latin-1') ).list».fmt('%02x').join
+    }
+
+    multi method md5_buf(Str $str --> Buf) {
+        md5( $str.encode('latin-1') );
+    }
+
+    multi method md5_buf(@str --> Buf) {
+        md5( @str.join.encode('latin-1') );
+    }
 }
--- /dev/null
+++ b/src/rakudo-star-modules/JSON-Tiny/META6.json
@@ -0,0 +1,15 @@
+{
+    "perl"        : "6.*",
+    "name"        : "JSON::Tiny",
+    "version"     : "1.0",
+    "description" : "A minimal JSON (de)serializer",
+    "depends"     : [ ],
+    "license":    "Artistic-2.0",
+    "provides"    : {
+        "JSON::Tiny"            : "lib/JSON/Tiny.pm",
+        "JSON::Tiny::Actions"   : "lib/JSON/Tiny/Actions.pm",
+        "JSON::Tiny::Grammar"   : "lib/JSON/Tiny/Grammar.pm"
+    },
+    "source-url"  : "git://github.com/moritz/json.git"
+}
+
--- a/src/rakudo-star-modules/JSON-Tiny/lib/JSON/Tiny.pm
+++ b/src/rakudo-star-modules/JSON-Tiny/lib/JSON/Tiny.pm
@@ -1,4 +1,4 @@
-=begin Pod
+=begin pod
 
 =head1 JSON::Tiny
 
@@ -11,44 +11,54 @@
     my $json = to-json([1, 2, "a third item"]);
     my $copy-of-original-data-structure = from-json($json);
 
-=end Pod
+=end pod
 
-module JSON::Tiny {
-    use JSON::Tiny::Actions;
-    use JSON::Tiny::Grammar;
+unit module JSON::Tiny;
 
-    sub from-json($text) is export {
-        my $a = JSON::Tiny::Actions.new();
-        my $o = JSON::Tiny::Grammar.parse($text, :action($a));
-        return $o.ast;
-    }
+use JSON::Tiny::Actions;
+use JSON::Tiny::Grammar;
 
-    multi to-json(Num $d) is export { $d }
-    multi to-json(Int $d) { $d }
-    multi to-json(Str $d) { 
-        # RAKUDO BUG #66596 (can't .subst in multis)
-        string-to-json($d);
-    }
-    multi to-json(Array $data) {
-        return  '[ ' 
-               ~ (map { to-json($_) }, $data.values).join(', ')
-               ~ ' ]';
-    }
-    multi to-json(Hash  $data) {
-        return '{ '
-               ~ (map { to-json(.key) ~ ' : ' ~ to-json(.value) }, $data.pairs).join(', ')
-               ~ ' }';
-    }
-    multi to-json(Bool  $data) { $data ?? 'true' !! 'false'; }
-    multi to-json($s) { die }
+class X::JSON::Tiny::Invalid is Exception {
+    has $.source;
+    method message { "Input ($.source.chars() characters) is not a valid JSON string" }
+}
 
-    # RAKUDO BUG #66596 (can't .subst in multis)
-    sub string-to-json($d) {
-        '"'
-        ~ $d.trans(['"',  '\\',   "\b", "\f", "\n", "\r", "\t"]
-                => ['\"', '\\\\', '\b', '\f', '\n', '\r', '\t'])\
-             .subst(/<-[\c0..\c127]>/, { sprintf '\u%04x', ord(~$_) }, :g)
-        ~ '"'
+proto to-json($) is export {*}
+
+multi to-json(Real:D $d) { ~$d }
+multi to-json(Bool:D $d) { $d ?? 'true' !! 'false'; }
+multi to-json(Str:D  $d) {
+    '"'
+    ~ $d.trans(['"',  '\\',   "\b", "\f", "\n", "\r", "\t"]
+            => ['\"', '\\\\', '\b', '\f', '\n', '\r', '\t'])\
+            .subst(/<-[\c32..\c126]>/, {
+                $_.Str.encode('utf-16').values».fmt('\u%04x').join
+            }, :g)
+    ~ '"'
+}
+multi to-json(Positional:D $d) {
+    return  '[ '
+            ~ $d.flatmap(&to-json).join(', ')
+            ~ ' ]';
+}
+multi to-json(Associative:D  $d) {
+    return '{ '
+            ~ $d.flatmap({ to-json(.key) ~ ' : ' ~ to-json(.value) }).join(', ')
+            ~ ' }';
+}
+
+multi to-json(Mu:U $) { 'null' }
+multi to-json(Mu:D $s) {
+    die "Can't serialize an object of type " ~ $s.WHAT.perl
+}
+
+sub from-json($text) is export {
+    my $a = JSON::Tiny::Actions.new();
+    my $o = JSON::Tiny::Grammar.parse($text, :actions($a));
+    unless $o {
+        X::JSON::Tiny::Invalid.new(source => $text).throw;
     }
+    
+    return $o.made;
 }
 # vim: ft=perl6
--- a/src/rakudo-star-modules/JSON-Tiny/lib/JSON/Tiny/Actions.pm
+++ b/src/rakudo-star-modules/JSON-Tiny/lib/JSON/Tiny/Actions.pm
@@ -1,83 +1,70 @@
-class JSON::Tiny::Actions;
+unit class JSON::Tiny::Actions;
 
-method TOP($/, $what) { 
-    make $/{$what}.ast;
+method TOP($/) {
+    make $<value>.made;
 };
 method object($/) {
-    make $<pairlist>.ast ?? hash ( $<pairlist>.ast ) !! {};
+    make $<pairlist>.made.hash.item;
 }
 
 method pairlist($/) {
-    if $<pair> {
-        my %r;
-        for $<pair>.map({$_.ast}) -> $m {
-            %r{$m<key>} = $m<value>;
-        }
-        make %r;
-    }
-    else {
-        make undef;
-    }
+    make $<pair>>>.made.flat;
 }
 
 method pair($/) {
-    make {
-        key => $<string>.ast,
-        value => $<value>.ast,
-    };
+    make $<string>.made => $<value>.made;
 }
 
 method array($/) {
-    if $<value> {
-        my @r = ();
-        for $<value>>>.ast {
-            when Hash { @r.push: \$_ }
-            default   { @r.push:  $_ }
-        }
-        make @r
-    } else {
-        make [];
-    }
+    make $<arraylist>.made.item;
 }
 
-method value($/, $what) {
-    given $what {
-        when 'true'     { make Bool::True  };
-        when 'false'    { make Bool::False };
-        when 'null'     { make undef       };
-        when *          { make $/{$_}.ast  };
-    }
+method arraylist($/) {
+    make [$<value>.map(*.made)];
 }
 
 method string($/) {
-    my $s = '';
-    for $0.chunks {
-        if .key eq '~' {
-            next if .value eq '\\'; #'
-            $s ~= .value;
-        } else {
-            $s ~= ~(.value.ast);
-        }
+    my $str =  +@$<str> == 1
+        ?? $<str>[0].made
+        !! $<str>>>.made.join;
+
+    # see https://github.com/moritz/json/issues/25
+    # when a combining character comes after an opening quote,
+    # it doesn't become part of the quoted string, because
+    # it's stuffed into the same grapheme as the quote.
+    # so we need to extract those combining character(s)
+    # from the match of the opening quote, and stuff it into the string.
+    if $0.Str ne '"' {
+        my @chars := $0.Str.NFC;
+        $str = @chars[1..*].chrs ~ $str;
     }
-    make $s;
+    make $str
 }
+method value:sym<number>($/) { make +$/.Str }
+method value:sym<string>($/) { make $<string>.made }
+method value:sym<true>($/)   { make Bool::True  }
+method value:sym<false>($/)  { make Bool::False }
+method value:sym<null>($/)   { make Any }
+method value:sym<object>($/) { make $<object>.made }
+method value:sym<array>($/)  { make $<array>.made }
 
+method str($/)               { make ~$/ }
+
+my %h = '\\' => "\\",
+        '/'  => "/",
+        'b'  => "\b",
+        'n'  => "\n",
+        't'  => "\t",
+        'f'  => "\f",
+        'r'  => "\r",
+        '"'  => "\"";
 method str_escape($/) {
-    if $<xdigit> {
-        make chr(:16($<xdigit>.join));
+    if $<utf16_codepoint> {
+        make utf16.new( $<utf16_codepoint>.map({:16(~$_)}) ).decode();
     } else {
-        given ~$/ {
-            when '\\' { make '\\'; } #'
-            when 'n'  { make "\n"; }
-            when 't'  { make "\t"; }
-            when 'f'  { make "\f"; }
-            when 'r'  { make "\r"; }
-        }
+        make %h{~$/};
     }
 }
 
-method number($/) {
-    make +$/;
-}
 
 # vim: ft=perl6
--- a/src/rakudo-star-modules/JSON-Tiny/lib/JSON/Tiny/Grammar.pm
+++ b/src/rakudo-star-modules/JSON-Tiny/lib/JSON/Tiny/Grammar.pm
@@ -1,73 +1,42 @@
 use v6;
-grammar JSON::Tiny::Grammar {
-    rule TOP { 
-        ^ [
-            | <object> {*}      #= object
-            | <array>  {*}      #= array
-        ]$ };
-    rule object     { '{' ~ '}' <pairlist>      {*}   };
-    rule pairlist   {
-        [ <pair>
-         [\, [ <pair> | <.fail_trailing> ] ]*
-        ]?
-        {*}
-    };
+unit grammar JSON::Tiny::Grammar;
 
-    rule pair {
-        <string> ':' <value>        {*}
-    };
+token TOP       { \s* <value> \s* }
+rule object     { '{' ~ '}' <pairlist>     }
+rule pairlist   { <pair> * % \,            }
+rule pair       { <string> ':' <value>     }
+rule array      { '[' ~ ']' <arraylist>    }
+rule arraylist  {  <value> * % [ \, ]        }
 
-    rule array {
-        '[' ~ ']'
-            [   # work around non-existing LTM
-                [
-                    <value>**1
-                    [\, [<value> | <.fail_trailing>] ]*
-                ]?
-                \s*
-            ]
-        {*}
-    };
+proto token value {*};
+token value:sym<number> {
+    '-'?
+    [ 0 | <[1..9]> <[0..9]>* ]
+    [ \. <[0..9]>+ ]?
+    [ <[eE]> [\+|\-]? <[0..9]>+ ]?
+}
+token value:sym<true>    { <sym>    };
+token value:sym<false>   { <sym>    };
+token value:sym<null>    { <sym>    };
+token value:sym<object>  { <object> };
+token value:sym<array>   { <array>  };
+token value:sym<string>  { <string> }
 
-    rule value {
-        | <string>  {*}     #= string
-        | <number>  {*}     #= number
-        | <object>  {*}     #= object
-        | <array>   {*}     #= array
-        | 'true'    {*}     #= true
-        | 'false'   {*}     #= false
-        | 'null'    {*}     #= null
-    };
+token string {
+    # see https://github.com/moritz/json/issues/25
+    (:ignoremark '"') ~ \" [ <str> | \\ <str=.str_escape> ]*
+}
 
-    token string {
-        \" ~ \" ([
-            | <str>
-            | \\ <str_escape>
-        ]*) {*}
-    };
+token str {
+    <-["\\\t\x[0A]]>+
+}
 
-    token str {
-        <-["\\\t\n]>+
-    }
+token str_escape {
+    <["\\/bfnrt]> | 'u' <utf16_codepoint>+ % '\u'
+}
 
-    token str_escape {
-        [
-         <["\\/bfnrt]>
-        | u <xdigit>**4 
-        ] {*}
-    };
-
-    token number {
-        \- ?
-        [ 0 | <[1..9]> <[0..9]>* ]
-        [ \. <[0..9]>+ ]?
-        [ <[eE]> [\+|\-]? <[0..9]>+ ]?
-        {*}
-    }
-
-    regex fail_trailing {
-        <fail: 'Expecting value after comma (trailing comma?)'>
-    }
+token utf16_codepoint {
+    <.xdigit>**4
 }
 
 # vim: ft=perl6

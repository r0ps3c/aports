From 3eb90ebe690b2902e83da36d28e72005542d6c01 Mon Sep 17 00:00:00 2001
From: Ivan Komarov <jkomarov@gmail.com>
Date: Fri, 24 Jul 2020 12:50:19 -0400
Subject: [PATCH 1/2] Fix const ptr to const syntax

---
 src/conversion.c         |  4 ++--
 src/conversion_slice16.c | 18 +++++++++---------
 src/conversion_slice8.c  |  8 ++++----
 3 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/m4rie/conversion.c b/m4rie/conversion.c
index 3244713..55a72b9 100644
--- a/m4rie/conversion.c
+++ b/m4rie/conversion.c
@@ -226,7 +226,7 @@ mzd_slice_t *_mzed_slice4(mzd_slice_t *T, const mzed_t *F) {
       word *t0 = T->x[0]->rows[i];
       word *t1 = T->x[1]->rows[i];
       word *t2 = T->x[2]->rows[i];
-      const word const *f  = F->x->rows[i];
+      const word * const f  = F->x->rows[i];
 
       /* bulk of work */
       for(j=0, j2=0; j+4 < F->x->width; j+=4,j2++) {
@@ -269,7 +269,7 @@ mzd_slice_t *_mzed_slice4(mzd_slice_t *T, const mzed_t *F) {
       word *t1 = T->x[1]->rows[i];
       word *t2 = T->x[2]->rows[i];
       word *t3 = T->x[3]->rows[i];
-      const word const *f  = F->x->rows[i];
+      const word * const f  = F->x->rows[i];
 
       /* bulk of work */
       for(j=0, j2=0; j+4 < F->x->width; j+=4,j2++) {
diff --git a/m4rie/conversion_slice16.c b/m4rie/conversion_slice16.c
index b74f759..92f4cf9 100644
--- a/m4rie/conversion_slice16.c
+++ b/m4rie/conversion_slice16.c
@@ -69,7 +69,7 @@ mzd_slice_t *_mzed_slice16(mzd_slice_t *T, const mzed_t *F) {
     word *t5 = T->x[5]->rows[i];
     word *t6 = T->x[6]->rows[i];
     word *t7 = T->x[7]->rows[i];
-    const word const *f  = F->x->rows[i];
+    const word * const f  = F->x->rows[i];
 
     /* bulk of work */
     for(j=0, j2=0; j+16 < F->x->width; j+=16,j2++) {
@@ -119,7 +119,7 @@ mzd_slice_t *_mzed_slice16(mzd_slice_t *T, const mzed_t *F) {
       word *t1 = T->x[ 9]->rows[i];
       word *t2 = T->x[10]->rows[i];
       word *t3 = T->x[11]->rows[i];
-      const word const *f  = F->x->rows[i];
+      const word * const f  = F->x->rows[i];
 
       /* bulk of work */
       for(j=0, j2=0; j+16 < F->x->width; j+=16,j2++) {
@@ -163,7 +163,7 @@ mzd_slice_t *_mzed_slice16(mzd_slice_t *T, const mzed_t *F) {
         word *t1 = T->x[13]->rows[i];
         word *t2 = T->x[14]->rows[i];
         word *t3 = T->x[15]->rows[i];
-        const word const *f  = F->x->rows[i];
+        const word * const f  = F->x->rows[i];
 
         /* bulk of work */
         for(j=0, j2=0; j+16 < F->x->width; j+=16,j2++) {
@@ -205,7 +205,7 @@ mzd_slice_t *_mzed_slice16(mzd_slice_t *T, const mzed_t *F) {
         word *t0 = T->x[12]->rows[i];
         word *t1 = T->x[13]->rows[i];
         word *t2 = T->x[14]->rows[i];
-        const word const *f  = F->x->rows[i];
+        const word * const f  = F->x->rows[i];
 
         /* bulk of work */
         for(j=0, j2=0; j+16 < F->x->width; j+=16,j2++) {
@@ -244,7 +244,7 @@ mzd_slice_t *_mzed_slice16(mzd_slice_t *T, const mzed_t *F) {
       for(size_t i=0; i<T->nrows; i++) {
         word *t0 = T->x[12]->rows[i];
         word *t1 = T->x[13]->rows[i];
-        const word const *f  = F->x->rows[i];
+        const word * const f  = F->x->rows[i];
 
         /* bulk of work */
         for(j=0, j2=0; j+16 < F->x->width; j+=16,j2++) {
@@ -280,7 +280,7 @@ mzd_slice_t *_mzed_slice16(mzd_slice_t *T, const mzed_t *F) {
     case 13: {
       for(size_t i=0; i<T->nrows; i++) {
         word *t0 = T->x[12]->rows[i];
-        const word const *f  = F->x->rows[i];
+        const word * const f  = F->x->rows[i];
 
         /* bulk of work */
         for(j=0, j2=0; j+16 < F->x->width; j+=16,j2++) {
@@ -319,7 +319,7 @@ mzd_slice_t *_mzed_slice16(mzd_slice_t *T, const mzed_t *F) {
         word *t0 = T->x[ 8]->rows[i];
         word *t1 = T->x[ 9]->rows[i];
         word *t2 = T->x[10]->rows[i];
-        const word const *f  = F->x->rows[i];
+        const word * const f  = F->x->rows[i];
 
         /* bulk of work */
         for(j=0, j2=0; j+16 < F->x->width; j+=16,j2++) {
@@ -358,7 +358,7 @@ mzd_slice_t *_mzed_slice16(mzd_slice_t *T, const mzed_t *F) {
       for(size_t i=0; i<T->nrows; i++) {
         word *t0 = T->x[ 8]->rows[i];
         word *t1 = T->x[ 9]->rows[i];
-        const word const *f  = F->x->rows[i];
+        const word * const f  = F->x->rows[i];
 
         /* bulk of work */
         for(j=0, j2=0; j+16 < F->x->width; j+=16,j2++) {
@@ -394,7 +394,7 @@ mzd_slice_t *_mzed_slice16(mzd_slice_t *T, const mzed_t *F) {
     case  9: {
       for(size_t i=0; i<T->nrows; i++) {
         word *t0 = T->x[ 8]->rows[i];
-        const word const *f  = F->x->rows[i];
+        const word * const f  = F->x->rows[i];
 
         /* bulk of work */
         for(j=0, j2=0; j+16 < F->x->width; j+=16,j2++) {
diff --git a/m4rie/conversion_slice8.c b/m4rie/conversion_slice8.c
index d545e17..1600570 100644
--- a/m4rie/conversion_slice8.c
+++ b/m4rie/conversion_slice8.c
@@ -47,7 +47,7 @@ mzd_slice_t *_mzed_slice8(mzd_slice_t *T, const mzed_t *F) {
         word *t5 = T->x[5]->rows[i];
         word *t6 = T->x[6]->rows[i];
         word *t7 = T->x[7]->rows[i];
-        const word const *f  = F->x->rows[i];
+        const word * const f  = F->x->rows[i];
 
         /* bulk of work */
         for(j=0, j2=0; j+8 < F->x->width; j+=8,j2++) {
@@ -190,7 +190,7 @@ mzd_slice_t *_mzed_slice8(mzd_slice_t *T, const mzed_t *F) {
         word *t4 = T->x[4]->rows[i];
         word *t5 = T->x[5]->rows[i];
         word *t6 = T->x[6]->rows[i];
-        const word const *f  = F->x->rows[i];
+        const word * const f  = F->x->rows[i];
 
         /* bulk of work */
         for(j=0, j2=0; j+8 < F->x->width; j+=8,j2++) {
@@ -318,7 +318,7 @@ mzd_slice_t *_mzed_slice8(mzd_slice_t *T, const mzed_t *F) {
         word *t3 = T->x[3]->rows[i];
         word *t4 = T->x[4]->rows[i];
         word *t5 = T->x[5]->rows[i];
-        const word const *f  = F->x->rows[i];
+        const word * const f  = F->x->rows[i];
 
         /* bulk of work */
         for(j=0, j2=0; j+8 < F->x->width; j+=8,j2++) {
@@ -431,7 +431,7 @@ mzd_slice_t *_mzed_slice8(mzd_slice_t *T, const mzed_t *F) {
         word *t2 = T->x[2]->rows[i];
         word *t3 = T->x[3]->rows[i];
         word *t4 = T->x[4]->rows[i];
-        const word const *f  = F->x->rows[i];
+        const word * const f  = F->x->rows[i];
 
         /* bulk of work */
         for(j=0, j2=0; j+8 < F->x->width; j+=8,j2++) {
-- 
2.46.2


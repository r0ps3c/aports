diff --git a/django_tenants/tests/test_tenants.py.orig b/django_tenants/tests/test_tenants.py
index 84109865b01..0e6fe9a9865 100644
--- a/django_tenants/tests/test_tenants.py.orig
+++ b/django_tenants/tests/test_tenants.py
@@ -163,97 +163,6 @@ class TenantDataAndSettingsTest(BaseTestCase):
 
         self.created = [domain, tenant]
 
-    def test_switching_search_path(self):
-        """
-        IMPORTANT: using schema_name with underscore here. See
-        https://github.com/django-tenants/django-tenants/pull/829
-        """
-        tenant1 = get_tenant_model()(schema_name='tenant`1')
-        tenant1.save()
-
-        domain1 = get_tenant_domain_model()(tenant=tenant1, domain='something.test.com')
-        domain1.save()
-
-        connection.set_schema_to_public()
-
-        tenant2 = get_tenant_model()(schema_name='Tenant_2')
-        tenant2.save()
-
-        domain2 = get_tenant_domain_model()(tenant=tenant2, domain='example.com')
-        domain2.save()
-
-        # go to tenant1's path
-        connection.set_tenant(tenant1)
-
-        # add some data, 2 DummyModels for tenant1
-        DummyModel(name="Schemas are").save()
-        DummyModel(name="awesome!").save()
-
-        # switch temporarily to tenant2's path
-        with self.assertNumQueries(6):
-            with tenant_context(tenant2):
-                # add some data, 3 DummyModels for tenant2
-                DummyModel(name="Man,").save()
-                DummyModel(name="testing").save()
-                DummyModel(name="is great!").save()
-
-        # we should be back to tenant1's path, test what we have
-        with self.assertNumQueries(2):
-            self.assertEqual(2, DummyModel.objects.count())
-
-        # switch back to tenant2's path
-        with self.assertNumQueries(2):
-            with tenant_context(tenant2):
-                self.assertEqual(3, DummyModel.objects.count())
-
-        self.created = [domain2, domain1, tenant2, tenant1]
-
-    @override_settings(TENANT_LIMIT_SET_CALLS=True)
-    def test_switching_search_path_limited_calls(self):
-        tenant1 = get_tenant_model()(schema_name='tenant1')
-        tenant1.save()
-
-        domain1 = get_tenant_domain_model()(tenant=tenant1, domain='something.test.com')
-        domain1.save()
-
-        connection.set_schema_to_public()
-
-        tenant2 = get_tenant_model()(schema_name='tenant2')
-        tenant2.save()
-
-        domain2 = get_tenant_domain_model()(tenant=tenant2, domain='example.com')
-        domain2.save()
-
-        # set path is not executed when setting tenant so 0 queries expected
-        with self.assertNumQueries(0):
-            connection.set_tenant(tenant1)
-
-        # switch temporarily to tenant2's path
-        # 1 query to set search path + 3 to save data
-        with self.assertNumQueries(4):
-            with tenant_context(tenant2):
-                DummyModel(name="Man,").save()
-                DummyModel(name="testing").save()
-                DummyModel(name="is great!").save()
-
-        # 0 queries as search path not set here
-        with self.assertNumQueries(0):
-            connection.set_tenant(tenant1)
-
-        # 1 set search path + 1 count
-        with self.assertNumQueries(2):
-            self.assertEqual(0, DummyModel.objects.count())
-
-        # 0 queries as search path not set here
-        with self.assertNumQueries(0):
-            connection.set_tenant(tenant2)
-
-        # 1 set search path + 1 count
-        with self.assertNumQueries(2):
-            self.assertEqual(3, DummyModel.objects.count())
-
-        self.created = [domain2, domain1, tenant2, tenant1]
-
     def test_switching_tenant_without_previous_tenant(self):
         tenant = get_tenant_model()(schema_name='test')
         tenant.save()
@@ -626,39 +535,6 @@ class CloneSchemaTest(BaseTestCase):
         self.assertTrue(schema_exists('source'))
         self.assertTrue(schema_exists('destination'))
 
-    def test_clone_schema_with_existing_records_and_add_new_records_to_resulting_schema(self):
-        """
-        Exercises the scenario where the source schema contains records in a shared app which
-        get cloned in the destination schema but the value of the PK column remains at 1 which
-        causes duplicate key errors.
-        See https://github.com/django-tenants/django-tenants/issues/831
-        """
-        Client = get_tenant_model()
-        tenant = Client(schema_name='s1')
-        tenant.save()
-
-        domain = get_tenant_domain_model()(tenant=tenant, domain='s1.test.com')
-        domain.save()
-        self.assertTrue(schema_exists(tenant.schema_name))
-
-        # add some records to the source schema
-        with tenant_context(tenant):
-            self.assertFalse(DummyModel.objects.filter(name='Administrator').exists())
-            self.assertFalse(DummyModel.objects.filter(name='Tester').exists())
-            DummyModel(name='Administrator').save()
-            DummyModel(name='Tester').save()
-
-        clone_schema = CloneSchema()
-        clone_schema.clone_schema(base_schema_name='s1', new_schema_name='d1')
-        self.assertTrue(schema_exists('destination'))
-
-        # add some records to the destination schema
-        with schema_context('d1'):
-            self.assertTrue(DummyModel.objects.filter(name='Administrator').exists())
-            self.assertTrue(DummyModel.objects.filter(name='Tester').exists())
-
-            DummyModel(name='Moderator').save()
-
 
 class SchemaMigratedSignalTest(BaseTestCase):
 

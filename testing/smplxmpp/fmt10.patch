--- a/src/chat.cc
+++ b/src/chat.cc
@@ -60,7 +60,7 @@
 }
 
 void SmplXmppHandlerChat::handleMessage(const Message& msg, MessageSession* session) {
-    spdlog::trace("incoming message (type: {}) from '{}' (subject: '{}', thread: '{}'): '{}'", msg.subtype(), msg.from().full(), msg.subject(), msg.thread(), msg.body());
+    spdlog::trace("incoming message (type: {}) from '{}' (subject: '{}', thread: '{}'): '{}'", fmt::underlying(msg.subtype()), msg.from().full(), msg.subject(), msg.thread(), msg.body());
 
     if (teardownHandshakeStarted()) {
         spdlog::debug("received msg after shutdown has been initiated. ignoring.");
@@ -116,7 +116,7 @@
 }
 
 void SmplXmppHandlerChat::handleMessageEvent(const JID& from, MessageEventType event) {
-    spdlog::trace("received message event: {} from: '{}'", event, from.full());
+    spdlog::trace("received message event: {} from: '{}'", fmt::underlying(event), from.full());
 }
 
 void SmplXmppHandlerChat::handleMessageSession(MessageSession* session) {
@@ -165,6 +165,6 @@
 
 void SmplXmppHandlerChat::sendSingleMsg(const MsgPrototype& msg) {
         Message msgToSend(Message::MessageType::Chat, JID(msg.jid), msg.body);
-        spdlog::trace("sending message to '{}' (type: '{}'): '{}'", msg.jid, msgToSend.subtype(), msg.body);
+        spdlog::trace("sending message to '{}' (type: '{}'): '{}'", msg.jid, fmt::underlying(msgToSend.subtype()), msg.body);
         j.send(msgToSend);
 }
--- a/src/xmpp.cc
+++ b/src/xmpp.cc
@@ -231,9 +231,9 @@
 
 void SmplXmppHandlerBase::handleLog(LogLevel level, LogArea area, const std::string& message) {
     switch (level) {
-        case LogLevel::LogLevelDebug:  spdlog::trace("[area {}] {}", area, message); break;
-        case LogLevel::LogLevelWarning: spdlog::warn("[area {}] {}", area, message); break;
-        case LogLevel::LogLevelError:  spdlog::error("[area {}] {}", area, message); break;
+        case LogLevel::LogLevelDebug:  spdlog::trace("[area {}] {}", fmt::underlying(area), message); break;
+        case LogLevel::LogLevelWarning: spdlog::warn("[area {}] {}", fmt::underlying(area), message); break;
+        case LogLevel::LogLevelError:  spdlog::error("[area {}] {}", fmt::underlying(area), message); break;
     }
 }
 

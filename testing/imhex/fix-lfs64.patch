diff --git a/cmake/build_helpers.cmake b/cmake/build_helpers.cmake
index 624e401..1162513 100644
--- a/cmake/build_helpers.cmake
+++ b/cmake/build_helpers.cmake
@@ -406,7 +406,7 @@ endfunction()
 
 macro(setupCompilerFlags target)
     if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
-        set(IMHEX_COMMON_FLAGS "-Wall -Wextra -Wpedantic -Werror")
+        set(IMHEX_COMMON_FLAGS "-Wall -Wextra -Wpedantic ")
         set(IMHEX_C_FLAGS "${IMHEX_COMMON_FLAGS} -Wno-array-bounds")
         set(IMHEX_CXX_FLAGS "-fexceptions -frtti")
         if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
diff --git a/lib/external/libwolv/libs/io/source/io/file.cpp b/lib/external/libwolv/libs/io/source/io/file.cpp
index 058e817..53c52d3 100644
--- a/lib/external/libwolv/libs/io/source/io/file.cpp
+++ b/lib/external/libwolv/libs/io/source/io/file.cpp
@@ -39,12 +39,12 @@ namespace wolv::io {
         #else
 
             if (mode == File::Mode::Read)
-                this->m_file = fopen64(util::toUTF8String(path).c_str(), "rb");
+                this->m_file = fopen(util::toUTF8String(path).c_str(), "rb");
             else if (mode == File::Mode::Write)
-                this->m_file = fopen64(util::toUTF8String(path).c_str(), "r+b");
+                this->m_file = fopen(util::toUTF8String(path).c_str(), "r+b");
 
             if (mode == File::Mode::Create || (mode == File::Mode::Write && this->m_file == nullptr))
-                this->m_file = fopen64(util::toUTF8String(path).c_str(), "w+b");
+                this->m_file = fopen(util::toUTF8String(path).c_str(), "w+b");
 
         #endif
 
@@ -82,7 +82,7 @@ namespace wolv::io {
     }
 
     void File::seek(u64 offset) {
-        fseeko64(this->m_file, offset, SEEK_SET);
+        fseeko(this->m_file, offset, SEEK_SET);
     }
 
     void File::close() {
@@ -214,7 +214,7 @@ namespace wolv::io {
     void File::setSize(u64 size) {
         if (!isValid()) return;
 
-        auto result = ftruncate64(fileno(this->m_file), size);
+        auto result = ftruncate(fileno(this->m_file), size);
         util::unused(result);
         this->updateSize();
     }
@@ -225,10 +225,10 @@ namespace wolv::io {
             return;
         }
 
-        auto startPos = ftello64(this->m_file);
-        fseeko64(this->m_file, 0, SEEK_END);
-        auto size = ftello64(this->m_file);
-        fseeko64(this->m_file, startPos, SEEK_SET);
+        auto startPos = ftello(this->m_file);
+        fseeko(this->m_file, 0, SEEK_END);
+        auto size = ftello(this->m_file);
+        fseeko(this->m_file, startPos, SEEK_SET);
 
         if (this->m_map != nullptr && size != this->m_fileSize) {
             this->unmap();
@@ -393,4 +393,4 @@ namespace wolv::io {
         this->m_thread.join();
     }
 
-}
\ No newline at end of file
+}
diff --git a/lib/external/miniaudio/source/miniaudio.c b/lib/external/miniaudio/source/miniaudio.c
index 0fe2b9d..dd8eb85 100644
--- a/lib/external/miniaudio/source/miniaudio.c
+++ b/lib/external/miniaudio/source/miniaudio.c
@@ -1665,7 +1665,7 @@ MA_API ma_result ma_fopen(FILE** ppFile, const char* pFilePath, const char* pOpe
     *ppFile = fopen(pFilePath, pOpenMode);
 #else
     #if defined(_FILE_OFFSET_BITS) && _FILE_OFFSET_BITS == 64 && defined(_LARGEFILE64_SOURCE)
-        *ppFile = fopen64(pFilePath, pOpenMode);
+        *ppFile = fopen(pFilePath, pOpenMode);
     #else
         *ppFile = fopen(pFilePath, pOpenMode);
     #endif
diff --git a/lib/external/pattern_language/external/libwolv/libs/io/source/io/file.cpp b/lib/external/pattern_language/external/libwolv/libs/io/source/io/file.cpp
index 0084aef..8082605 100644
--- a/lib/external/pattern_language/external/libwolv/libs/io/source/io/file.cpp
+++ b/lib/external/pattern_language/external/libwolv/libs/io/source/io/file.cpp
@@ -26,12 +26,12 @@ namespace wolv::io {
         #else
 
             if (mode == File::Mode::Read)
-                this->m_file = fopen64(util::toUTF8String(path).c_str(), "rb");
+                this->m_file = fopen(util::toUTF8String(path).c_str(), "rb");
             else if (mode == File::Mode::Write)
-                this->m_file = fopen64(util::toUTF8String(path).c_str(), "r+b");
+                this->m_file = fopen(util::toUTF8String(path).c_str(), "r+b");
 
             if (mode == File::Mode::Create || (mode == File::Mode::Write && this->m_file == nullptr))
-                this->m_file = fopen64(util::toUTF8String(path).c_str(), "w+b");
+                this->m_file = fopen(util::toUTF8String(path).c_str(), "w+b");
 
         #endif
 
@@ -257,4 +257,4 @@ namespace wolv::io {
         return fileInfo;
     }
 
-}
\ No newline at end of file
+}
diff --git a/lib/external/pattern_language/lib/CMakeLists.txt b/lib/external/pattern_language/lib/CMakeLists.txt
index d50d36a..d0ffe45 100644
--- a/lib/external/pattern_language/lib/CMakeLists.txt
+++ b/lib/external/pattern_language/lib/CMakeLists.txt
@@ -69,7 +69,7 @@ add_library(libpl ${LIBRARY_TYPE}
 )
 
 if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
-    target_compile_options(libpl PRIVATE -Wall -Wextra -Werror -Wpedantic -Wno-unknown-pragmas -Wno-array-bounds)
+    target_compile_options(libpl PRIVATE -Wall -Wextra  -Wpedantic -Wno-unknown-pragmas -Wno-array-bounds)
     if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
         target_compile_options(libpl PRIVATE -Wno-stringop-overflow)
     endif()
diff --git a/plugins/builtin/source/content/providers/disk_provider.cpp b/plugins/builtin/source/content/providers/disk_provider.cpp
index 40a2bd9..b7acd37 100644
--- a/plugins/builtin/source/content/providers/disk_provider.cpp
+++ b/plugins/builtin/source/content/providers/disk_provider.cpp
@@ -24,10 +24,6 @@
     #include <sys/types.h>
 #endif
 
-#if defined(OS_LINUX)
-    #define lseek lseek64
-#endif
-
 namespace hex::plugin::builtin {
 
     DiskProvider::DiskProvider() : Provider() {
@@ -382,4 +378,4 @@ namespace hex::plugin::builtin {
             return Provider::queryInformation(category, argument);
     }
 
-}
\ No newline at end of file
+}

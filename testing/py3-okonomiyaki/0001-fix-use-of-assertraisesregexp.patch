This replaces assertRaisesRegexp with assertRaisesRegex for compatibility with
python >= 3.12.
diff --color -rupN a/okonomiyaki/file_formats/tests/test__egg_info.py b/okonomiyaki/file_formats/tests/test__egg_info.py
--- a/okonomiyaki/file_formats/tests/test__egg_info.py	2023-06-29 19:20:58.000000000 +0200
+++ b/okonomiyaki/file_formats/tests/test__egg_info.py	2024-07-04 12:35:25.056131888 +0200
@@ -78,7 +78,7 @@ class TestRequirement(unittest.TestCase)
         self.assertEqual(dependency.build_number, 2)
         self.assertEqual(dependency.strictness, 3)
 
-        with self.assertRaisesRegexp(
+        with self.assertRaisesRegex(
                 InvalidRequirementStringHyphen,
                 "Invalid requirement string {0!r}:"
                 " Package versions should be separated by whitespace"
@@ -301,7 +301,7 @@ packages = [
             packages = []""")
 
         # When/Then
-        with self.assertRaisesRegexp(
+        with self.assertRaisesRegex(
             InvalidMetadataField,
             r"^Invalid value for metadata field 'python': u?'a.7'"
         ) as exc:
@@ -643,7 +643,7 @@ class TestParseRawspec(unittest.TestCase
         spec_string = "metadata_version = '1.0'"
 
         # When/Then
-        with self.assertRaisesRegexp(
+        with self.assertRaisesRegex(
             InvalidMetadataField, r"^Missing metadata field 'name'"
         ):
             parse_rawspec(spec_string)
@@ -778,7 +778,7 @@ packages = [
 """
 
         # When/Then
-        with self.assertRaisesRegexp(
+        with self.assertRaisesRegex(
             InvalidMetadataField,
             r"^Invalid value for metadata field 'metadata_version': None"
         ):
@@ -801,7 +801,7 @@ packages = [
 """
 
         # When/Then
-        with self.assertRaisesRegexp(
+        with self.assertRaisesRegex(
             InvalidMetadataField, r"^Missing metadata field 'platform'"
         ):
             parse_rawspec(spec_s)
@@ -824,7 +824,7 @@ packages = [
 """
 
         # When/Then
-        with self.assertRaisesRegexp(
+        with self.assertRaisesRegex(
             InvalidMetadataField, r"^Missing metadata field 'python_tag'"
         ):
             parse_rawspec(spec_s)
diff --color -rupN a/okonomiyaki/platforms/tests/test_python_implementation.py b/okonomiyaki/platforms/tests/test_python_implementation.py
--- a/okonomiyaki/platforms/tests/test_python_implementation.py	2023-06-29 19:20:58.000000000 +0200
+++ b/okonomiyaki/platforms/tests/test_python_implementation.py	2024-07-04 12:35:25.059465201 +0200
@@ -107,7 +107,7 @@ class TestPythonImplementation(unittest.
     def test_from_string_errors(self, data):
         # When/Then
         message = r"^Invalid value for metadata field 'python_tag': '{}'$"
-        with self.assertRaisesRegexp(
+        with self.assertRaisesRegex(
                 InvalidMetadataField, message.format(data)):
             PythonImplementation.from_string(data)
 
diff --color -rupN a/okonomiyaki/runtimes/tests/test_runtime_metadata.py b/okonomiyaki/runtimes/tests/test_runtime_metadata.py
--- a/okonomiyaki/runtimes/tests/test_runtime_metadata.py	2023-06-29 19:20:58.000000000 +0200
+++ b/okonomiyaki/runtimes/tests/test_runtime_metadata.py	2024-07-04 12:35:25.062798513 +0200
@@ -307,7 +307,7 @@ class TestRuntimeMetadataFactory(unittes
         path = R_DEFAULT_3_0_0_RH5_X86_64
 
         # When/Then
-        with self.assertRaisesRegexp(
+        with self.assertRaisesRegex(
                 UnsupportedMetadata,
                 r"^No support for language 'r' \(metadata version '1.0'\)"):
             runtime_metadata_factory(path)
@@ -342,7 +342,7 @@ class TestRuntimeMetadataFactory(unittes
         path = INVALID_RUNTIME_NO_METADATA_VERSION
 
         # When/Then
-        with self.assertRaisesRegexp(
+        with self.assertRaisesRegex(
                 MissingMetadata,
                 r"^Missing runtime metadata field 'metadata_version'$"):
             runtime_metadata_factory(path)
diff --color -rupN a/okonomiyaki/versions/tests/test_enpkg_version.py b/okonomiyaki/versions/tests/test_enpkg_version.py
--- a/okonomiyaki/versions/tests/test_enpkg_version.py	2023-06-29 19:20:58.000000000 +0200
+++ b/okonomiyaki/versions/tests/test_enpkg_version.py	2024-07-04 12:35:25.056131888 +0200
@@ -74,7 +74,7 @@ class TestEnpkgVersionParsing(unittest.T
         s = "1.3.0-a"
 
         # When/Then
-        with self.assertRaisesRegexp(
+        with self.assertRaisesRegex(
             InvalidEnpkgVersion, "Invalid build number: 'a'"
         ):
             EnpkgVersion.from_string(s)
diff --color -rupN a/okonomiyaki/versions/tests/test_semver.py b/okonomiyaki/versions/tests/test_semver.py
--- a/okonomiyaki/versions/tests/test_semver.py	2023-06-29 19:20:58.000000000 +0200
+++ b/okonomiyaki/versions/tests/test_semver.py	2024-07-04 12:35:25.059465201 +0200
@@ -190,7 +190,7 @@ class TestSemanticVersion(unittest.TestC
         )
 
         # When/Then
-        with self.assertRaisesRegexp(InvalidSemanticVersion, r_output):
+        with self.assertRaisesRegex(InvalidSemanticVersion, r_output):
             SemanticVersion.from_string(version_string)
 
     def test_other_object(self):

musl doesn't support //IGNORE in the iconv_open function
e.g. iconv_open ("UTF-8//IGNORE", "ISO-8859-1"): Invalid argument
therefore we just remove it

--- a/exch/emsmdb/common_util.cpp
+++ b/exch/emsmdb/common_util.cpp
@@ -99,7 +99,7 @@
 	auto charset = cpid_to_cset(cpid);
 	if (charset == nullptr)
 		return -1;
-	sprintf(temp_charset, "%s//IGNORE",
+	sprintf(temp_charset, "%s",
 		replace_iconv_charset(charset));
 	conv_id = iconv_open(temp_charset, "UTF-8");
 	if (conv_id == (iconv_t)-1)
@@ -125,7 +125,7 @@
 	auto charset = cpid_to_cset(cpid);
 	if (charset == nullptr)
 		return -1;
-	conv_id = iconv_open("UTF-8//IGNORE",
+	conv_id = iconv_open("UTF-8",
 		replace_iconv_charset(charset));
 	if (conv_id == (iconv_t)-1)
 		return -1;
--- a/exch/exmdb/common_util.cpp
+++ b/exch/exmdb/common_util.cpp
@@ -219,14 +219,14 @@
 	if (pstr_out == nullptr)
 		return NULL;
 	if (to_utf8) {
-		conv_id = iconv_open("UTF-8//IGNORE", charset);
+		conv_id = iconv_open("UTF-8", charset);
 		if (conv_id == (iconv_t)-1)
-			conv_id = iconv_open("UTF-8//IGNORE", "windows-1252");
+			conv_id = iconv_open("UTF-8", "windows-1252");
 	} else {
-		sprintf(temp_charset, "%s//IGNORE", charset);
+		sprintf(temp_charset, "%s", charset);
 		conv_id = iconv_open(temp_charset, "UTF-8");
 		if (conv_id == (iconv_t)-1)
-			conv_id = iconv_open("windows-1252//IGNORE", "UTF-8");
+			conv_id = iconv_open("windows-1252", "UTF-8");
 	}
 	if (conv_id == (iconv_t)-1) {
 		free(pstr_out);
--- a/exch/exmdb/table.cpp
+++ b/exch/exmdb/table.cpp
@@ -1543,7 +1543,7 @@
 	pin = pstring;
 	pout = tmp_buff;
 	memset(tmp_buff, 0, sizeof(tmp_buff));
-	snprintf(tmp_charset, std::size(tmp_charset), "%s//IGNORE", charset);
+	snprintf(tmp_charset, std::size(tmp_charset), "%s", charset);
 	conv_id = iconv_open(tmp_charset, charset);
 	if (conv_id == (iconv_t)-1)
 		return;
--- a/lib/rfbl.cpp
+++ b/lib/rfbl.cpp
@@ -1553,7 +1553,7 @@
 {
 	if (strcasecmp(from, to) == 0)
 		return {reinterpret_cast<const char *>(src), src_size};
-	auto cs = to + "//IGNORE"s;
+	auto cs = to + ""s;
 	auto cd = iconv_open(cs.c_str(), from);
 	if (cd == reinterpret_cast<iconv_t>(-1)) {
 		mlog(LV_ERR, "E-2116: iconv_open %s: %s",
--- a/lib/util.cpp
+++ b/lib/util.cpp
@@ -297,7 +297,7 @@
 	if (out_len > 0)
 		/* Leave room for \0 */
 		--out_len;
-	snprintf(tmp_charset, std::size(tmp_charset), "%s//IGNORE", replace_iconv_charset(charset));
+	snprintf(tmp_charset, std::size(tmp_charset), "%s", replace_iconv_charset(charset));
 	conv_id = iconv_open("UTF-8", tmp_charset);
 	if (conv_id == iconv_t(-1)) {
 		/* EINVAL could happen as a result of EMFILE... */
--- a/tools/oxm2mt.cpp
+++ b/tools/oxm2mt.cpp
@@ -162,13 +162,13 @@
 	case PT_STRING8: {
 		if (pte.v_ui4 != blob->cb + 1)
 			return -EIO;
-		auto s = iconvtext(blob->pc, blob->cb, cset, "UTF-8//IGNORE");
+		auto s = iconvtext(blob->pc, blob->cb, cset, "UTF-8");
 		return proplist.set(pte.proptag, s.data());
 	}
 	case PT_UNICODE: {
 		if (pte.v_ui4 != blob->cb + 2)
 			return -EIO;
-		auto s = iconvtext(blob->pc, blob->cb, "UTF-16", "UTF-8//IGNORE");
+		auto s = iconvtext(blob->pc, blob->cb, "UTF-16", "UTF-8");
 		return proplist.set(pte.proptag, s.data());
 	}
 	case PT_BINARY:
@@ -266,9 +266,9 @@
 			throw YError("PO-1017");
 
 		if (PROP_TYPE(pte.proptag) == PT_MV_STRING8)
-			rdbuf = iconvtext(rdbuf.c_str(), strm_size, cset, "UTF-8//IGNORE");
+			rdbuf = iconvtext(rdbuf.c_str(), strm_size, cset, "UTF-8");
 		else
-			rdbuf = iconvtext(rdbuf.c_str(), strm_size, "UTF-16", "UTF-8//IGNORE");
+			rdbuf = iconvtext(rdbuf.c_str(), strm_size, "UTF-16", "UTF-8");
 		strs[i] = std::move(rdbuf);
 	}
 	for (uint32_t i = 0; i < sa.count; ++i)
@@ -473,7 +473,7 @@
 			wbuf.resize(len);
 			if (sp.g_bytes(wbuf.data(), len) != EXT_ERR_SUCCESS)
 				return -EIO;
-			pn_req.name = iconvtext(wbuf.data(), len, "UTF-16", "UTF-8//IGNORE");
+			pn_req.name = iconvtext(wbuf.data(), len, "UTF-16", "UTF-8");
 		}
 		if (guididx == 1) {
 			pn_req.guid = PS_MAPI;
--- a/tools/pff2mt.cpp
+++ b/tools/pff2mt.cpp
@@ -639,14 +639,14 @@
 		} else if (vtype == PT_UNICODE) {
 			fprintf(stderr, "PF-1041: Garbage in string which cannot be represented in UTF-8\n");
 			auto s = iconvtext(reinterpret_cast<char *>(buf.get()), dsize,
-			         "UTF-16", "UTF-8//IGNORE");
+			         "UTF-16", "UTF-8");
 			dsize = s.size() + 1;
 			buf = std::make_unique<uint8_t[]>(dsize);
 			memcpy(buf.get(), s.data(), dsize);
 		} else if (vtype == PT_STRING8) {
 			fprintf(stderr, "PF-1041: Garbage in string which cannot be represented in UTF-8\n");
 			auto s = iconvtext(reinterpret_cast<char *>(buf.get()), dsize,
-			         g_ascii_charset, "UTF-8//IGNORE");
+			         g_ascii_charset, "UTF-8");
 			dsize = s.size() * 3 + 1;
 			buf = std::make_unique<uint8_t[]>(dsize);
 			memcpy(buf.get(), s.data(), dsize);

--- a/modules/javafx.base/src/test/java/test/com/sun/javafx/runtime/VersionInfoTest.java
+++ b/modules/javafx.base/src/test/java/test/com/sun/javafx/runtime/VersionInfoTest.java
@@ -161,39 +161,6 @@
     }
 
     @Test
-    public void testNonPublic() {
-        String runtimeVersion = VersionInfo.getRuntimeVersion();
-        Version v = new Version(runtimeVersion);
-        String milestone = VersionInfo.getReleaseMilestone();
-        String timestamp = VersionInfo.getBuildTimestamp();
-        String hudsonJob = VersionInfo.getHudsonJobName();
-        assertEquals(milestone, v.suffix);
-        if (hudsonJob.length() == 0) {
-            assertEquals(timestamp, v.opt);
-            assertEquals("internal", v.suffix);
-        } else {
-            assertFalse("internal".equals(v.suffix));
-        }
-    }
-
-    @Test
-    public void testVersionFormat() {
-        String version = VersionInfo.getVersion();
-        String message = String.format("Wrong short version string: '%s'", version);
-        assertTrue(message, version.matches(SVSTR));
-    }
-
-    @Test
-    public void testRuntimeVersionFormat() {
-        String runtimeVersion = VersionInfo.getRuntimeVersion();
-        try {
-            Runtime.Version.parse(runtimeVersion);
-        } catch (IllegalArgumentException e) {
-            fail(e.getMessage());
-        }
-    }
-
-    @Test
     public void testVersionInFile() {
         String versionLive = VersionInfo.getVersion();
         String versionFile = properties.getProperty(VERSION_KEY);

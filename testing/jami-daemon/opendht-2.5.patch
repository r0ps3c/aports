diff --git a/src/jamidht/account_manager.cpp b/src/jamidht/account_manager.cpp
index 94ed89f..67125ea 100644
--- a/src/jamidht/account_manager.cpp
+++ b/src/jamidht/account_manager.cpp
@@ -139,9 +139,9 @@ AccountManager::useIdentity(const dht::crypto::Identity& identity,
         return nullptr;
     }
 
-    auto pk = accountCertificate->getPublicKey();
-    JAMI_DBG("[Auth] checking device receipt for %s", pk.getId().toString().c_str());
-    if (!pk.checkSignature({receipt.begin(), receipt.end()}, receiptSignature)) {
+    auto pk = accountCertificate->getSharedPublicKey();
+    JAMI_DBG("[Auth] checking device receipt for %s", pk->getId().toString().c_str());
+    if (!pk->checkSignature({receipt.begin(), receipt.end()}, receiptSignature)) {
         JAMI_ERR("[Auth] device receipt signature check failed");
         return nullptr;
     }
@@ -160,13 +160,13 @@ AccountManager::useIdentity(const dht::crypto::Identity& identity,
         return nullptr;
     }
     auto id = root["id"].asString();
-    if (id != pk.getId().toString()) {
+    if (id != pk->getId().toString()) {
         JAMI_ERR("[Auth] account ID mismatch between receipt and certificate");
         return nullptr;
     }
 
     auto devicePk = identity.first->getSharedPublicKey();
-    if (!devicePk) {
+    if (!devicePk.get()) {
         JAMI_ERR("[Auth] No device pk found");
         return nullptr;
     }
@@ -684,7 +684,7 @@ AccountManager::forEachDevice(
                 return true;
             state->remaining++;
             findCertificate(dev.dev, [state](const std::shared_ptr<dht::crypto::Certificate>& cert) {
-                state->found(cert ? std::make_shared<dht::crypto::PublicKey>(cert->getPublicKey())
+                state->found(cert ? cert->getSharedPublicKey()
                                   : std::shared_ptr<dht::crypto::PublicKey> {});
             });
             return true;
diff --git a/src/jamidht/archive_account_manager.cpp b/src/jamidht/archive_account_manager.cpp
index f372bb8..2060241 100644
--- a/src/jamidht/archive_account_manager.cpp
+++ b/src/jamidht/archive_account_manager.cpp
@@ -480,7 +480,7 @@ ArchiveAccountManager::makeReceipt(const dht::crypto::Identity& id,
     auto devId = device.getId();
     DeviceAnnouncement announcement;
     announcement.dev = devId;
-    announcement.pk = std::make_shared<dht::crypto::PublicKey>(device.getPublicKey());
+    announcement.pk = device.getSharedPublicKey();
     dht::Value ann_val {announcement};
     ann_val.sign(*id.first);
 
@@ -529,7 +529,7 @@ ArchiveAccountManager::syncDevices()
         // don't send sync data to ourself
         if (dev.first.toString() == info_->deviceId)
             continue;
-        auto pk = std::make_shared<dht::crypto::PublicKey>(dev.second.certificate->getPublicKey());
+        auto pk = dev.second.certificate->getSharedPublicKey();
         JAMI_DBG("sending device sync to %s %s",
                  dev.second.name.c_str(),
                  dev.first.toString().c_str());
diff --git a/src/jamidht/connectionmanager.cpp b/src/jamidht/connectionmanager.cpp
index 06c7679..b07d7fa 100644
--- a/src/jamidht/connectionmanager.cpp
+++ b/src/jamidht/connectionmanager.cpp
@@ -447,7 +447,7 @@ ConnectionManager::Impl::connectDevice(const std::shared_ptr<dht::crypto::Certif
                      noNewSocket,
                      forceNewSocket,
                      connType] {
-        auto devicePk = std::make_shared<dht::crypto::PublicKey>(cert->getPublicKey());
+        auto devicePk = cert->getSharedPublicKey();
         auto deviceId = devicePk->getLongId();
         auto sthis = w.lock();
         if (!sthis || sthis->isDestroying_) {
diff --git a/src/jamidht/jamiaccount.cpp b/src/jamidht/jamiaccount.cpp
index f00fc99..285153c 100644
--- a/src/jamidht/jamiaccount.cpp
+++ b/src/jamidht/jamiaccount.cpp
@@ -1852,7 +1852,7 @@ JamiAccount::trackPresence(const dht::InfoHash& h, BuddyInfo& buddy)
                 sthis->findCertificate(
                     dev.dev, [sthis, h](const std::shared_ptr<dht::crypto::Certificate>& cert) {
                         if (cert) {
-                            auto pk = std::make_shared<dht::crypto::PublicKey>(cert->getPublicKey());
+                            auto pk = cert->getSharedPublicKey();
                             if (sthis->convModule()->needsSyncingWith(h.toString(),
                                                                       pk->getLongId().toString()))
                                 sthis->requestSIPConnection(
@@ -2302,8 +2302,7 @@ JamiAccount::doRegister_()
                                     }
                                     std::map<std::string, std::string> payloads = {
                                         {datatype, utf8_make_valid(v.msg)}};
-                                    auto pk = std::make_shared<dht::crypto::PublicKey>(
-                                        cert->getPublicKey());
+                                    auto pk = cert->getSharedPublicKey();
                                     onTextMessage(msgId,
                                                   peer_account.toString(),
                                                   pk->getLongId().toString(),
diff --git a/src/jamidht/server_account_manager.cpp b/src/jamidht/server_account_manager.cpp
index 39bb348..978957d 100644
--- a/src/jamidht/server_account_manager.cpp
+++ b/src/jamidht/server_account_manager.cpp
@@ -146,8 +146,7 @@ ServerAccountManager::initAuthentication(PrivateKey key,
                                     auto info = std::make_unique<AccountInfo>();
                                     info->identity.first = ctx->key.get();
                                     info->identity.second = cert;
-                                    info->devicePk = std::make_shared<dht::crypto::PublicKey>(
-                                        cert->getPublicKey());
+                                    info->devicePk = cert->getSharedPublicKey();
                                     info->deviceId = info->devicePk->getLongId().toString();
                                     info->accountId = accountCert->getId().toString();
                                     info->contacts = std::make_unique<ContactList>(accountCert,

From 4ecd6ebbff52dc3b3b0f44b77bfc38fb3ba324e5 Mon Sep 17 00:00:00 2001
From: Val Lorentz <progval+git@progval.net>
Date: Sun, 13 Nov 2022 13:22:33 +0100
Subject: [PATCH 1/2] Add support for using a proxy

---
 README.md                          |  6 ++++++
 lib/irc/handler.ex                 | 16 ++++++++++++++--
 lib/matrix_client/client.ex        |  8 ++++----
 test/matrix_client/client_test.exs | 10 +++++-----
 test/test_helper.exs               |  2 +-
 5 files changed, 30 insertions(+), 12 deletions(-)

diff --git a/README.md b/README.md
index 07d4849..8da832f 100644
--- a/README.md
+++ b/README.md
@@ -83,6 +83,12 @@ See below for extra instructions to work with web clients.
 
 See `INSTALL.md` for a more production-oriented guide.
 
+## End-to-end encryption
+
+Matrix2051 does not support Matrix's end-to-end encryption (E2EE), but can optionally be used with [Pantalaimon](https://github.com/matrix-org/pantalaimon).
+
+To do so, setup Pantalaimon locally, and configure `plaintextproxy=http://localhost:8009/` as your IRC client's GECOS/"real name".
+
 ## Architecture
 
 * `matrix2051.exs` starts M51.Application, which starts M51.Supervisor, which
diff --git a/lib/irc/handler.ex b/lib/irc/handler.ex
index 6fcad82..02bf001 100644
--- a/lib/irc/handler.ex
+++ b/lib/irc/handler.ex
@@ -170,7 +170,6 @@ defmodule M51.IrcConn.Handler do
       state = M51.IrcConn.Supervisor.state(sup_pid)
 
       M51.IrcConn.State.set_nick(state, nick)
-      M51.IrcConn.State.set_gecos(state, gecos)
 
       case user_id do
         # all good
@@ -321,6 +320,8 @@ defmodule M51.IrcConn.Handler do
         nil
 
       {"USER", [_, _, _, gecos | _]} ->
+        state = M51.IrcConn.Supervisor.state(sup_pid)
+        M51.IrcConn.State.set_gecos(state, gecos)
         {:user, gecos}
 
       {"USER", _} ->
@@ -407,6 +408,7 @@ defmodule M51.IrcConn.Handler do
 
         # TODO: support multi-line AUTHENTICATE
 
+        state = M51.IrcConn.Supervisor.state(sup_pid)
         matrix_client = M51.IrcConn.Supervisor.matrix_client(sup_pid)
 
         case M51.MatrixClient.Client.user_id(matrix_client) do
@@ -419,11 +421,21 @@ defmodule M51.IrcConn.Handler do
                       {:ok, {local_name, hostname}} ->
                         user_id = authcid
 
+                        proxy =
+                          case Regex.named_captures(
+                                 ~R(plaintextproxy=(?<url>https?://\S*\)),
+                                 M51.IrcConn.State.gecos(state)  || ""
+                               ) do
+                            nil -> nil
+                            %{"url" => url} -> url
+                          end
+
                         case M51.MatrixClient.Client.connect(
                                matrix_client,
                                local_name,
                                hostname,
-                               passwd
+                               passwd,
+                               proxy
                              ) do
                           {:ok} ->
                             # RPL_LOGGEDIN
diff --git a/lib/matrix_client/client.ex b/lib/matrix_client/client.ex
index 27ffab6..45920c4 100644
--- a/lib/matrix_client/client.ex
+++ b/lib/matrix_client/client.ex
@@ -66,14 +66,14 @@ defmodule M51.MatrixClient.Client do
   end
 
   @impl true
-  def handle_call({:connect, local_name, hostname, password}, _from, state) do
+  def handle_call({:connect, local_name, hostname, password, proxy}, _from, state) do
     case state do
       %M51.MatrixClient.Client{
         state: :initial_state,
         irc_pid: irc_pid
       } ->
         httpoison = M51.Config.httpoison()
-        base_url = get_base_url(hostname)
+        base_url = proxy || get_base_url(hostname)
 
         # Check the server supports password login
         url = base_url <> "/_matrix/client/r0/login"
@@ -491,8 +491,8 @@ defmodule M51.MatrixClient.Client do
     end
   end
 
-  def connect(pid, local_name, hostname, password) do
-    GenServer.call(pid, {:connect, local_name, hostname, password}, @timeout)
+  def connect(pid, local_name, hostname, password, proxy \\ nil) do
+    GenServer.call(pid, {:connect, local_name, hostname, password, proxy}, @timeout)
   end
 
   def raw_client(pid) do
diff --git a/test/matrix_client/client_test.exs b/test/matrix_client/client_test.exs
index 78b496f..0e6f5b6 100644
--- a/test/matrix_client/client_test.exs
+++ b/test/matrix_client/client_test.exs
@@ -105,7 +105,7 @@ defmodule M51.MatrixClient.ClientTest do
     client = start_supervised!({M51.MatrixClient.Client, {sup_pid, [httpoison: MockHTTPoison]}})
 
     assert {:error, :unknown, message} =
-             GenServer.call(client, {:connect, "user", "example.org", "p4ssw0rd"})
+             GenServer.call(client, {:connect, "user", "example.org", "p4ssw0rd", nil})
 
     assert Regex.match?(~r/Could not reach the Matrix homeserver for example.org.*/, message)
 
@@ -168,7 +168,7 @@ defmodule M51.MatrixClient.ClientTest do
 
     client = start_supervised!({M51.MatrixClient.Client, {sup_pid, [httpoison: MockHTTPoison]}})
 
-    assert GenServer.call(client, {:connect, "user", "matrix.example.org", "p4ssw0rd"}) == {:ok}
+    assert GenServer.call(client, {:connect, "user", "matrix.example.org", "p4ssw0rd", nil}) == {:ok}
 
     assert GenServer.call(client, {:dump_state}) ==
              %M51.MatrixClient.Client{
@@ -246,7 +246,7 @@ defmodule M51.MatrixClient.ClientTest do
 
     client = start_supervised!({M51.MatrixClient.Client, {sup_pid, [httpoison: MockHTTPoison]}})
 
-    assert GenServer.call(client, {:connect, "user", "matrix.example.org", "p4ssw0rd"}) == {:ok}
+    assert GenServer.call(client, {:connect, "user", "matrix.example.org", "p4ssw0rd", nil}) == {:ok}
 
     assert GenServer.call(client, {:dump_state}) ==
              %M51.MatrixClient.Client{
@@ -299,7 +299,7 @@ defmodule M51.MatrixClient.ClientTest do
 
     client = start_supervised!({M51.MatrixClient.Client, {sup_pid, [httpoison: MockHTTPoison]}})
 
-    assert GenServer.call(client, {:connect, "user", "matrix.example.org", "p4ssw0rd"}) ==
+    assert GenServer.call(client, {:connect, "user", "matrix.example.org", "p4ssw0rd", nil}) ==
              {:error, :no_password_flow, "No password flow"}
 
     assert GenServer.call(client, {:dump_state}) ==
@@ -359,7 +359,7 @@ defmodule M51.MatrixClient.ClientTest do
 
     client = start_supervised!({M51.MatrixClient.Client, {sup_pid, [httpoison: MockHTTPoison]}})
 
-    assert GenServer.call(client, {:connect, "user", "matrix.example.org", "p4ssw0rd"}) ==
+    assert GenServer.call(client, {:connect, "user", "matrix.example.org", "p4ssw0rd", nil}) ==
              {:error, :denied, "Invalid password"}
 
     assert GenServer.call(client, {:dump_state}) ==
diff --git a/test/test_helper.exs b/test/test_helper.exs
index 66acf53..c4d7904 100644
--- a/test/test_helper.exs
+++ b/test/test_helper.exs
@@ -96,7 +96,7 @@ defmodule MockMatrixClient do
   end
 
   @impl true
-  def handle_call({:connect, local_name, hostname, password}, _from, state) do
+  def handle_call({:connect, local_name, hostname, password, nil}, _from, state) do
     case {hostname, password} do
       {"i-hate-passwords.example.org", _} ->
         {:reply, {:error, :no_password_flow, "No password flow"}, state}

From 50db541f89968a59a2de16ea850a526772291acf Mon Sep 17 00:00:00 2001
From: Val Lorentz <progval+git@progval.net>
Date: Wed, 16 Nov 2022 11:25:49 +0100
Subject: [PATCH 2/2] Fix typo

---
 README.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 8da832f..64dca11 100644
--- a/README.md
+++ b/README.md
@@ -87,7 +87,7 @@ See `INSTALL.md` for a more production-oriented guide.
 
 Matrix2051 does not support Matrix's end-to-end encryption (E2EE), but can optionally be used with [Pantalaimon](https://github.com/matrix-org/pantalaimon).
 
-To do so, setup Pantalaimon locally, and configure `plaintextproxy=http://localhost:8009/` as your IRC client's GECOS/"real name".
+To do so, setup Pantalaimon locally, and configure `plaintextproxy=http://localhost:8009` as your IRC client's GECOS/"real name".
 
 ## Architecture
 

# Maintainer: Celeste <cielesti@protonmail.com>
maintainer="Celeste <cielesti@protonmail.com>"
pkgname=ocaml-lwt_ssl
pkgver=1.2.0
pkgrel=0
_pkgreal=lwt_ssl
pkgdesc="OpenSSL binding with concurrent I/O"
url="https://github.com/ocsigen/lwt_ssl"
arch="all !riscv64 !loongarch64" # ocaml
license="LGPL-2.1-or-later WITH OpenSSL-Exception"
depends_dev="
	$pkgname=$pkgver-r$pkgrel
	ocaml-lwt-dev
	ocaml-ssl-dev
	"
makedepends="
	$depends_dev
	dune
	ocaml
	"
subpackages="$pkgname-dev"
source="$_pkgreal-$pkgver.tar.bz2::https://github.com/ocsigen/lwt_ssl/releases/download/$pkgver/lwt_ssl-$pkgver.tbz"
builddir="$srcdir/$_pkgreal-$pkgver"

# 32-bit archs
case "$CARCH" in
	arm*|x86) options="$options textrels" ;;
esac

build() {
	dune build --release --verbose
}

check() {
	dune runtest --build-dir=.testenv --verbose
}

package() {
	dune install --destdir="$pkgdir" --docdir=/.omit
}

dev() {
	default_dev

	cd "$pkgdir"

	local path; find usr/lib/ocaml \( \
			-name '*.cmt' -o \
			-name '*.cmti' -o \
			-name '*.ml' -o \
			-name '*.mli' \
		\) | while read -r path
	do
		amove "$path"
	done
}

prepare_py_provides() {
	local datadir="${subpkgdir:-$pkgdir}"
	local pkgbasedir=${pkgbasedir:-"$startdir/pkg"}
	local controldir="$pkgbasedir"/.control.${subpkgname:-$pkgname}

	options_has "!tracedeps" && return 0

	ocaml4-abuild-find provides \
		"$datadir"/usr/lib/ocaml \
		"$controldir" \
		"$pkgver-r$pkgrel"
}

scan_python3_dependency() {
	local controldir="$2" datadir="$3"

	ocaml4-abuild-find requires \
		"$datadir"/usr/lib/ocaml \
		"$controldir"
}

sha512sums="
cf2ef7d4db26e40c044e743ce85849a10eb57c916cbd7d6291bf4458291689098293bfb4cd7f1023f3ae8bc8e9a68cb2c7470669501a9b44695659405a75aa00  lwt_ssl-1.2.0.tar.bz2
"

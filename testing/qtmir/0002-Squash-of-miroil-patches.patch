From 336ebdc70b8401028c842ef2da7e6d5ee49e5081 Mon Sep 17 00:00:00 2001
From: Marius Gripsgard <marius@ubports.com>
Date: Tue, 25 Jan 2022 22:06:10 +0100
Subject: [PATCH 2/4] Squash of miroil patches

Squashed from upstream development in branch
"personal/mariogrip/desktop-development", required for compatibility
with Mir 2.x

$ git diff 8291ea2ae..origin/personal/mariogrip/desktop-development
---
 .gitlab-ci.yml                                |   17 +
 CMakeLists.txt                                |   16 +-
 debian/changelog                              |  331 ++-
 debian/control                                |   65 +-
 debian/copyright                              |  150 +-
 debian/libqtmirserver1.install                |    1 -
 debian/libqtmirserver2.install                |    1 +
 debian/libqtmirserver2.symbols                | 2381 +++++++++++++++++
 debian/qml-module-qtmir.install               |    4 +-
 debian/qtmir-tests.install                    |    1 -
 debian/rules                                  |   15 +-
 debian/watch                                  |    4 +
 demos/qtmir-demo-shell/CMakeLists.txt         |    1 +
 demos/qtmir-demo-shell/Shell.qml              |    5 +-
 demos/qtmir-demo-shell/main.cpp               |   17 +-
 demos/qtmir-demo-shell/qml-demo-shell.qml     |    2 +
 .../display_configuration_policy.h            |   14 +-
 .../display_configuration_storage.h           |   19 +-
 include/{qtmir/miral => miroil}/display_id.h  |   11 +-
 include/{qtmir/miral => miroil}/edid.h        |   11 +-
 include/qtmir/displayconfigurationpolicy.h    |   15 +-
 include/qtmir/displayconfigurationstorage.h   |    4 +-
 include/qtmir/screen.h                        |   10 +-
 include/qtmir/windowmanagementpolicy.h        |    4 +-
 src/common/debughelpers.cpp                   |    7 +
 src/common/debughelpers.h                     |    6 +
 src/common/windowcontrollerinterface.h        |    6 +
 src/common/windowmodelnotifier.h              |    4 +
 src/common/workspacecontrollerinterface.h     |    2 -
 src/modules/QtMir/Application/CMakeLists.txt  |    6 +
 src/modules/QtMir/Application/application.cpp |   16 +-
 src/modules/QtMir/Application/application.h   |    3 +
 .../QtMir/Application/application_manager.cpp |   82 +
 .../QtMir/Application/application_manager.h   |    1 +
 .../QtMir/Application/mirbuffersgtexture.cpp  |   35 +-
 .../QtMir/Application/mirbuffersgtexture.h    |    2 +-
 src/modules/QtMir/Application/mirsurface.cpp  |  132 +-
 src/modules/QtMir/Application/mirsurface.h    |   12 +-
 .../QtMir/Application/mirsurfaceinterface.h   |    8 +-
 .../QtMir/Application/mirsurfaceitem.cpp      |   76 +-
 src/modules/QtMir/Application/proc_info.cpp   |    5 +
 src/modules/QtMir/Application/proc_info.h     |    1 +
 src/modules/QtMir/Application/session.cpp     |    8 +-
 src/modules/QtMir/Application/session.h       |   10 +-
 .../QtMir/Application/taskcontroller.cpp      |    8 +-
 .../QtMir/Application/taskcontroller.h        |   10 +-
 src/platforms/mirserver/CMakeLists.txt        |   52 +-
 src/platforms/mirserver/eventbuilder.cpp      |  103 +-
 src/platforms/mirserver/eventbuilder.h        |   40 +-
 .../mirserver/inputdeviceobserver.cpp         |   42 +-
 src/platforms/mirserver/inputdeviceobserver.h |   14 +-
 src/platforms/mirserver/logging.cpp           |    1 +
 src/platforms/mirserver/logging.h             |    1 +
 src/platforms/mirserver/miral/CMakeLists.txt  |   14 -
 src/platforms/mirserver/miroil/CMakeLists.txt |    1 +
 .../miroil/include/miroil/compositor.h        |   40 +
 ...display_configuration_controller_wrapper.h |   51 +
 .../include/miroil/display_listener_wrapper.h |   44 +
 .../miroil/include/miroil/event_builder.h     |  117 +
 .../include/miroil}/eventdispatch.h           |   14 +-
 .../miroil/include/miroil/input_device.h      |   52 +
 .../include/miroil/input_device_observer.h    |   40 +
 .../include/miroil/mir_prompt_session.h       |   48 +
 .../miroil/include/miroil/mir_server_hooks.h  |   57 +
 .../include/miroil}/mirbuffer.h               |    8 +-
 .../include/miroil/open_gl_context.h}         |   22 +-
 .../include/miroil}/persist_display_config.h  |   16 +-
 .../include/miroil/prompt_session_listener.h  |   49 +
 .../include/miroil/prompt_session_manager.h   |   51 +
 .../miroil/include/miroil/set_compositor.h    |   54 +
 .../mirserver/miroil/include/miroil/surface.h |   77 +
 .../miroil/include/miroil/surface_observer.h  |   63 +
 .../mirserver/miroil/src/CMakeLists.txt       |   39 +
 .../mirserver/miroil/src/compositor.cpp       |   20 +
 ...splay_configuration_controller_wrapper.cpp |   32 +
 .../src}/display_configuration_policy.cpp     |    7 +-
 .../miroil/src/display_listener_wrapper.cpp   |   41 +
 .../mirserver/{miral => miroil/src}/edid.cpp  |   10 +-
 .../mirserver/miroil/src/event_builder.cpp    |  116 +
 .../{ => miroil/src}/eventdispatch.cpp        |    5 +-
 .../mirserver/miroil/src/input_device.cpp     |   80 +
 .../miroil/src/input_device_observer.cpp      |   19 +
 .../miroil/src/mir_prompt_session.cpp         |   34 +
 .../mirserver/miroil/src/mir_server_hooks.cpp |  252 ++
 .../{miral => miroil/src}/mirbuffer.cpp       |    6 +-
 .../src/open_gl_context.cpp}                  |   39 +-
 .../src}/persist_display_config.cpp           |   95 +-
 .../miroil/src/prompt_session_listener.cpp    |   19 +
 .../miroil/src/prompt_session_manager.cpp     |   54 +
 .../mirserver/miroil/src/set_compositor.cpp   |   88 +
 .../mirserver/miroil/src/surface.cpp          |  267 ++
 src/platforms/mirserver/miropenglcontext.cpp  |    2 +-
 src/platforms/mirserver/mirserverhooks.cpp    |  229 --
 src/platforms/mirserver/mirserverhooks.h      |   57 -
 src/platforms/mirserver/nativeinterface.cpp   |    2 +-
 src/platforms/mirserver/nativeinterface.h     |    5 +-
 src/platforms/mirserver/platformscreen.h      |    8 +-
 .../mirserver/promptsessionlistener.cpp       |   49 +
 .../mirserver/promptsessionlistener.h         |   31 +-
 .../mirserver/promptsessionmanager.cpp        |   47 -
 .../mirserver/promptsessionmanager.h          |   49 -
 src/platforms/mirserver/qmirserver.cpp        |    3 +-
 src/platforms/mirserver/qmirserver.h          |    7 +-
 src/platforms/mirserver/qmirserver_p.cpp      |  113 +-
 src/platforms/mirserver/qmirserver_p.h        |   20 +-
 src/platforms/mirserver/qtcompositor.cpp      |   16 +
 src/platforms/mirserver/qtcompositor.h        |    7 +-
 src/platforms/mirserver/qteventfeeder.h       |    6 +
 src/platforms/mirserver/qtwindowmanager.cpp   |   80 +
 ...{mircursorimages.cpp => qtwindowmanager.h} |   21 +-
 src/platforms/mirserver/screenadaptor.cpp     |    2 +-
 src/platforms/mirserver/screenadaptor.h       |    2 +-
 src/platforms/mirserver/screenscontroller.cpp |    5 +-
 src/platforms/mirserver/screenscontroller.h   |    5 +-
 src/platforms/mirserver/screensmodel.cpp      |   12 +-
 src/platforms/mirserver/screensmodel.h        |   12 +-
 src/platforms/mirserver/setqtcompositor.cpp   |   83 -
 src/platforms/mirserver/setqtcompositor.h     |   47 -
 src/platforms/mirserver/surfaceobserver.cpp   |    5 +
 .../mirserver/urlbuilderdispatcher.cpp        |   56 +
 .../mirserver/urlbuilderdispatcher.h          |   47 +
 .../wayland-generated/CMakeLists.txt          |   24 +
 .../qt-windowmanager_wrapper.cpp              |  177 ++
 .../qt-windowmanager_wrapper.h                |   69 +
 .../server-decoration_wrapper.cpp             |  295 ++
 .../server-decoration_wrapper.h               |  107 +
 .../xdg-decoration-unstable-v1_wrapper.cpp    |  315 +++
 .../xdg-decoration-unstable-v1_wrapper.h      |   98 +
 .../wayland-protocols/qt-windowmanager.xml    |   58 +
 .../wayland-protocols/server-decoration.xml   |   85 +
 .../xdg-decoration-unstable-v1.xml            |  156 ++
 .../wayland/kwinserverdecoration.cpp          |  109 +
 .../mirserver/wayland/kwinserverdecoration.h  |   34 +
 .../mirserver/wayland/xdgdecorationV1.cpp     |   96 +
 .../mirserver/wayland/xdgdecorationV1.h       |   31 +
 .../mirserver/windowmodelnotifier.cpp         |   10 +
 .../wrappedwindowmanagementpolicy.cpp         |   73 +-
 tests/framework/CMakeLists.txt                |    2 +
 tests/framework/mock_task_controller.cpp      |    2 +-
 tests/framework/mock_task_controller.h        |    2 +-
 tests/framework/qtmir_test.h                  |    4 +-
 tests/mirserver/CMakeLists.txt                |    1 +
 tests/mirserver/EventBuilder/CMakeLists.txt   |    3 +
 tests/mirserver/ScreensModel/CMakeLists.txt   |    2 +
 tests/mirserver/ScreensModel/stub_display.h   |    7 +-
 .../ScreensModel/testable_screensmodel.h      |    2 +-
 .../URLBuilderDispatcher/CMakeLists.txt       |   30 +
 .../URLBuilderDispatcher/mock_services.h      |   23 +-
 .../urlbuilderdispatcher_test.cpp             |  115 +
 tests/mirserver/miral/CMakeLists.txt          |    4 +-
 tests/mirserver/miral/edid_test.cpp           |   18 +-
 tests/modules/Application/CMakeLists.txt      |    2 +
 .../modules/ApplicationManager/CMakeLists.txt |    2 +
 tests/modules/Session/CMakeLists.txt          |    2 +
 tests/modules/Session/session_test.cpp        |    2 +-
 tests/modules/SurfaceManager/CMakeLists.txt   |    2 +-
 tests/modules/WindowManager/CMakeLists.txt    |    2 +
 157 files changed, 7641 insertions(+), 1184 deletions(-)
 create mode 100644 .gitlab-ci.yml
 delete mode 100644 debian/libqtmirserver1.install
 create mode 100644 debian/libqtmirserver2.install
 create mode 100644 debian/libqtmirserver2.symbols
 create mode 100644 debian/watch
 rename include/{qtmir/miral => miroil}/display_configuration_policy.h (79%)
 rename include/{qtmir/miral => miroil}/display_configuration_storage.h (79%)
 rename include/{qtmir/miral => miroil}/display_id.h (66%)
 rename include/{qtmir/miral => miroil}/edid.h (89%)
 delete mode 100644 src/platforms/mirserver/miral/CMakeLists.txt
 create mode 100644 src/platforms/mirserver/miroil/CMakeLists.txt
 create mode 100644 src/platforms/mirserver/miroil/include/miroil/compositor.h
 create mode 100644 src/platforms/mirserver/miroil/include/miroil/display_configuration_controller_wrapper.h
 create mode 100644 src/platforms/mirserver/miroil/include/miroil/display_listener_wrapper.h
 create mode 100644 src/platforms/mirserver/miroil/include/miroil/event_builder.h
 rename src/platforms/mirserver/{ => miroil/include/miroil}/eventdispatch.h (75%)
 create mode 100644 src/platforms/mirserver/miroil/include/miroil/input_device.h
 create mode 100644 src/platforms/mirserver/miroil/include/miroil/input_device_observer.h
 create mode 100644 src/platforms/mirserver/miroil/include/miroil/mir_prompt_session.h
 create mode 100644 src/platforms/mirserver/miroil/include/miroil/mir_server_hooks.h
 rename src/platforms/mirserver/{miral => miroil/include/miroil}/mirbuffer.h (94%)
 rename src/platforms/mirserver/{openglcontextfactory.h => miroil/include/miroil/open_gl_context.h} (67%)
 rename src/platforms/mirserver/{miral => miroil/include/miroil}/persist_display_config.h (78%)
 create mode 100644 src/platforms/mirserver/miroil/include/miroil/prompt_session_listener.h
 create mode 100644 src/platforms/mirserver/miroil/include/miroil/prompt_session_manager.h
 create mode 100644 src/platforms/mirserver/miroil/include/miroil/set_compositor.h
 create mode 100644 src/platforms/mirserver/miroil/include/miroil/surface.h
 create mode 100644 src/platforms/mirserver/miroil/include/miroil/surface_observer.h
 create mode 100644 src/platforms/mirserver/miroil/src/CMakeLists.txt
 create mode 100644 src/platforms/mirserver/miroil/src/compositor.cpp
 create mode 100644 src/platforms/mirserver/miroil/src/display_configuration_controller_wrapper.cpp
 rename src/platforms/mirserver/{miral => miroil/src}/display_configuration_policy.cpp (73%)
 create mode 100644 src/platforms/mirserver/miroil/src/display_listener_wrapper.cpp
 rename src/platforms/mirserver/{miral => miroil/src}/edid.cpp (91%)
 create mode 100644 src/platforms/mirserver/miroil/src/event_builder.cpp
 rename src/platforms/mirserver/{ => miroil/src}/eventdispatch.cpp (87%)
 create mode 100644 src/platforms/mirserver/miroil/src/input_device.cpp
 create mode 100644 src/platforms/mirserver/miroil/src/input_device_observer.cpp
 create mode 100644 src/platforms/mirserver/miroil/src/mir_prompt_session.cpp
 create mode 100644 src/platforms/mirserver/miroil/src/mir_server_hooks.cpp
 rename src/platforms/mirserver/{miral => miroil/src}/mirbuffer.cpp (97%)
 rename src/platforms/mirserver/{openglcontextfactory.cpp => miroil/src/open_gl_context.cpp} (51%)
 rename src/platforms/mirserver/{miral => miroil/src}/persist_display_config.cpp (74%)
 create mode 100644 src/platforms/mirserver/miroil/src/prompt_session_listener.cpp
 create mode 100644 src/platforms/mirserver/miroil/src/prompt_session_manager.cpp
 create mode 100644 src/platforms/mirserver/miroil/src/set_compositor.cpp
 create mode 100644 src/platforms/mirserver/miroil/src/surface.cpp
 delete mode 100644 src/platforms/mirserver/mirserverhooks.cpp
 delete mode 100644 src/platforms/mirserver/mirserverhooks.h
 delete mode 100644 src/platforms/mirserver/promptsessionmanager.cpp
 delete mode 100644 src/platforms/mirserver/promptsessionmanager.h
 create mode 100644 src/platforms/mirserver/qtwindowmanager.cpp
 rename src/platforms/mirserver/{mircursorimages.cpp => qtwindowmanager.h} (55%)
 delete mode 100644 src/platforms/mirserver/setqtcompositor.cpp
 delete mode 100644 src/platforms/mirserver/setqtcompositor.h
 create mode 100644 src/platforms/mirserver/urlbuilderdispatcher.cpp
 create mode 100644 src/platforms/mirserver/urlbuilderdispatcher.h
 create mode 100644 src/platforms/mirserver/wayland-generated/CMakeLists.txt
 create mode 100644 src/platforms/mirserver/wayland-generated/qt-windowmanager_wrapper.cpp
 create mode 100644 src/platforms/mirserver/wayland-generated/qt-windowmanager_wrapper.h
 create mode 100644 src/platforms/mirserver/wayland-generated/server-decoration_wrapper.cpp
 create mode 100644 src/platforms/mirserver/wayland-generated/server-decoration_wrapper.h
 create mode 100644 src/platforms/mirserver/wayland-generated/xdg-decoration-unstable-v1_wrapper.cpp
 create mode 100644 src/platforms/mirserver/wayland-generated/xdg-decoration-unstable-v1_wrapper.h
 create mode 100644 src/platforms/mirserver/wayland-protocols/qt-windowmanager.xml
 create mode 100644 src/platforms/mirserver/wayland-protocols/server-decoration.xml
 create mode 100644 src/platforms/mirserver/wayland-protocols/xdg-decoration-unstable-v1.xml
 create mode 100644 src/platforms/mirserver/wayland/kwinserverdecoration.cpp
 create mode 100644 src/platforms/mirserver/wayland/kwinserverdecoration.h
 create mode 100644 src/platforms/mirserver/wayland/xdgdecorationV1.cpp
 create mode 100644 src/platforms/mirserver/wayland/xdgdecorationV1.h
 create mode 100644 tests/mirserver/URLBuilderDispatcher/CMakeLists.txt
 rename src/platforms/mirserver/mircursorimages.h => tests/mirserver/URLBuilderDispatcher/mock_services.h (62%)
 create mode 100644 tests/mirserver/URLBuilderDispatcher/urlbuilderdispatcher_test.cpp

diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
new file mode 100644
index 00000000..c63abcd1
--- /dev/null
+++ b/.gitlab-ci.yml
@@ -0,0 +1,17 @@
+default:
+  image:
+    name: ubuntu:latest
+  before_script:
+    - apt-get update -yq
+    - DEBIAN_FRONTEND=noninteractive apt-get install -yq devscripts dput git-buildpackage debhelper dh-python pkg-kde-tools
+    - gpg -v --import <(echo "$GPG_PRIVATE_KEY")
+
+upload-ppa:
+  stage: deploy
+  only:
+    - lunar
+  script:
+    - gbp dch --auto -S --multimaint-merge --distribution lunar --force-distribution --ignore-branch
+    - debchange --release --distribution lunar --force-distribution ""
+    - dpkg-buildpackage -I".git" -I"build" -i"^.git|^build" -d -S
+    - dput ppa:mariogrip/butterfly-linux ../*_source.changes
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1c5aace0..72f90b42 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3,8 +3,8 @@ cmake_minimum_required(VERSION 3.1)
 project(qtmir)
 
 set(QTMIR_VERSION_MAJOR 0)
-set(QTMIR_VERSION_MINOR 7)
-set(QTMIR_VERSION_PATCH 2)
+set(QTMIR_VERSION_MINOR 8)
+set(QTMIR_VERSION_PATCH 0)
 
 set(QTMIR_VERSION ${QTMIR_VERSION_MAJOR}.${QTMIR_VERSION_MINOR}.${QTMIR_VERSION_PATCH})
 
@@ -32,7 +32,7 @@ set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99 -Wall -Wextra")
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wall -fno-strict-aliasing -Wextra")
 set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined")
 
-set (CMAKE_CXX_STANDARD 14)
+set (CMAKE_CXX_STANDARD 17)
 
 if ("${CMAKE_CXX_COMPILER}" MATCHES "clang")
     set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-return-type-c-linkage -Wno-mismatched-tags -Wno-inconsistent-missing-override -Wno-implicit-exception-spec-mismatch -Wno-unknown-pragmas")
@@ -66,6 +66,7 @@ add_custom_target(cppcheck COMMAND cppcheck --enable=all -q --error-exitcode=2
 
 option(WITH_CONTENTHUB "Build with content-hub" OFF)
 option(WITH_VALGRIND "Build with Valgrind detection" ON)
+option(WITH_MIR2 "Build with mir 2.x" OFF)
 
 include(FindPkgConfig)
 find_package(Qt5Core 5.9 REQUIRED)
@@ -79,9 +80,16 @@ find_package(Qt5Test 5.9 REQUIRED)
 find_package(Threads REQUIRED)
 
 pkg_check_modules(MIRSERVER mirserver>=0.26 REQUIRED)
+if(WITH_MIR2)
+pkg_check_modules(MIROIL miroil REQUIRED)
+else()
 pkg_check_modules(MIRCLIENT mirclient>=0.26 REQUIRED)
+endif()
 pkg_check_modules(MIRRENDERERGLDEV mir-renderer-gl-dev>=0.26 REQUIRED)
 pkg_check_modules(MIRAL miral>=1.1.0 REQUIRED)
+pkg_check_modules(MIRWAYLAND mirwayland REQUIRED)
+pkg_check_modules(WAYLAND_CLIENT REQUIRED wayland-client)
+pkg_check_modules(WAYLAND_SERVER REQUIRED wayland-server)
 
 pkg_check_modules(XKBCOMMON xkbcommon REQUIRED)
 pkg_check_modules(GLIB glib-2.0 REQUIRED)
@@ -165,7 +173,7 @@ endif()
 add_definitions(-DQT_NO_KEYWORDS)
 
 # Tests
-if (NO_TESTS)
+if (NO_TESTS OR WITH_MIR2)
     message(STATUS "Tests disabled")
 else()
     include(CTest)
diff --git a/debian/changelog b/debian/changelog
index 4405cb42..b467f2ca 100644
--- a/debian/changelog
+++ b/debian/changelog
@@ -7,26 +7,329 @@ qtmir (0.7.2) unstable; urgency=medium
 
 qtmir (0.7.1) unstable; urgency=medium
 
-  * Upstream-provided Debian package for qtmir. See upstream ChangeLog
-    for recent changes.
+  [ Mike Gabriel ]
+  * debian/rules:
+    + Don't hard-code architectures with valgrind support. Simply disable
+      valgrind if not found in $PATH. (Closes: #1022222).
+  * debian/control:
+    + Bump to versioned B-D on liblomiri-api-dev (>= 0.2.0).
 
- -- UBports developers <developers@ubports.com>  Mon, 02 Jan 2023 03:07:10 +0100
+  [ Marius Gripsgard ]
+  * New git snapshot
 
-qtmir (0.7.0) unstable; urgency=medium
+ -- Marius Gripsgard <marius@ubports.com>  Wed, 08 Feb 2023 00:44:49 +0100
 
+qtmir (0.8.0~git20230115.30c2337-3) unstable; urgency=medium
 
-  [ UBports developers ]
-  * Upstream-provided Debian package for qtmir. See upstream ChangeLog
-    for recent changes.
+  * debian/.install: Spesify that we only want xwayland desktop & icon
+    file in qml-module-qtmir (closes: #1029291)
+
+ -- Marius Gripsgard <marius@ubports.com>  Sun, 22 Jan 2023 05:54:37 +0000
+
+qtmir (0.8.0~git20230115.30c2337-2) unstable; urgency=medium
+
+  * debian/control: Drop mir-pref-framework from qtmir-tests (closes: #1029015)
+
+ -- Marius Gripsgard <marius@ubports.com>  Tue, 17 Jan 2023 22:18:34 +0000
+
+qtmir (0.8.0~git20230115.30c2337-1) unstable; urgency=medium
+
+  * New git snapshot (0.8.0~git20230115.30c2337)
+  * debian/*.symbols: Refresh symbols using pkgkde
+  * debian/patches: Refresh patch to match new git snapshot
+  * debian/copyright: Refresh copyright to match new git snapshot
+  * debian/.install: Install x11 desktop file and icon
+
+ -- Marius Gripsgard <marius@ubports.com>  Sun, 15 Jan 2023 20:23:41 +0100
+
+qtmir (0.8.0~git20230109.671f617-3) unstable; urgency=medium
+
+  * Now!!! Really re-upload as is to unstable.
+
+ -- Mike Gabriel <sunweaver@debian.org>  Fri, 13 Jan 2023 16:45:56 +0100
+
+qtmir (0.8.0~git20230109.671f617-2) experimental; urgency=medium
+
+  * Re-upload as is to unstable.
+
+ -- Mike Gabriel <sunweaver@debian.org>  Fri, 13 Jan 2023 13:23:18 +0100
+
+qtmir (0.8.0~git20230109.671f617-1) experimental; urgency=medium
+
+  * Upload to experimental.
+
+  [ Marius Gripsgard ]
+  * New git snapshot (based on ubports/focal_-_mir2 branch)
+  * debian/*:
+    + Bump libqtmirserver soname version to 2
+  * debian/control:
+    + Bump mir requirement to 2.11 and add miroil-dev as B-D.
+  * debian/rules:
+    + Build with MIR2 option enabled.
+  * debian/watch:
+    + Update watch to pull git branch.
+  * debian/copyright:
+    + Refresh copyright to match new git snapshot
+  * debian/*.symbols:
+    + Refresh symbols using pkgkde.
+
+  [ Mike Gabriel ]
+  * debian/copyright:
+    + Update auto-generated copyright.in file.
+    + Update attributions for debian/.
+  * debian/changelog:
+    + Amend white-space issue.
+
+ -- Mike Gabriel <sunweaver@debian.org>  Tue, 10 Jan 2023 08:07:55 +0100
+
+qtmir (0.7.1-3) unstable; urgency=medium
+
+  * [debian/.symbols] Refresh symbols using pkgkde
+
+ -- Marius Gripsgard <marius@ubports.com>  Tue, 03 Jan 2023 10:38:41 +0100
+
+qtmir (0.7.1-2) unstable; urgency=medium
+
+  * debian/rules:
+    - Disable valgrind on mipsel due to known issues with valgrind on mipsel
+
+ -- Marius Gripsgard <marius@ubports.com>  Mon, 02 Jan 2023 12:04:30 +0100
+
+qtmir (0.7.1-1) unstable; urgency=medium
+
+  * New upstream release v0.7.1
+  * Drop upstreamed patch:
+    - 0001_remove-unused-gmock-fixes.patch
+  * Refresh libqtmirserver1 symbols using pkgkde
+  * Update copyright to match new upstream release v0.7.1
+
+ -- Marius Gripsgard <marius@ubports.com>  Mon, 02 Jan 2023 03:25:08 +0100
+
+qtmir (0.7.0-4) unstable; urgency=medium
+
+  * debian/libqtmirserver1.symbols:
+    + Update symbols. (Closes: #1021359).
+
+ -- Mike Gabriel <sunweaver@debian.org>  Fri, 07 Oct 2022 09:20:06 +0200
+
+qtmir (0.7.0-3) unstable; urgency=medium
+
+  * debian/patches:
+    + Cherry-picḱ 0001_remove-unused-gmock-fixes.patch. (Closes: #1015133).
+  * debian/:
+    + Update upstream Git repo URL.
+  * debian/control:
+    + Bump Standards-Version: to 4.6.1. No changes needed.
+  * debian/libqtmirserver1.symbols:
+    + Update .symbols for gcc-12 rebuild.
+  * debian/copyright:
+    + Update copyright attributions for debian/*.
+
+ -- Mike Gabriel <sunweaver@debian.org>  Wed, 05 Oct 2022 21:03:05 +0200
+
+qtmir (0.7.0-2) unstable; urgency=medium
+
+  [ Mike Gabriel ]
+  * debian/control:
+    + Update Homepage: field. Use upstream GitLab URL (instead of deprecated
+      Github URL).
 
- -- UBports developers <developers@ubports.com>  Fri, 22 Apr 2022 06:26:25 +0200
+  [ Marius Gripsgard ]
+  * debian/libqtmirserver1.symbols:
+    + Refresh symbol file from buildd logs using pkgkde-symbolshelper.
 
-qtmir (0.6.1-0) unstable; urgency=medium
+ -- Mike Gabriel <sunweaver@debian.org>  Wed, 25 May 2022 23:48:32 +0200
 
-  * Upstream-provided Debian package for qtmir.
-    See upstream ChangeLog for recent changes.
+qtmir (0.7.0-1) unstable; urgency=medium
 
- -- UBports Team <developers@ubports.com>  Mon, 28 Sep 2020 10:08:12 +0200
+  [ Marius Gripsgard ]
+  * New upstream release v0.7.0
+  * debian/patches: Drop upstreamed and unneeded patches, refresh patches:
+    + Drop upstreamed and unneeded patches:
+     - 0001_demo-fix-detecting-running-installed.patch
+     - 0002_demos-fix-application-name.patch
+     - 1002_drop-cgmanager-dependency.patch
+     - 1003_INSTANTIATE_TEST_SUITE.patch
+     - 1004_remove-cmake-instructions-that-have-been-moved-into-FindGMock.patch
+     - 1005_add-missing-pthread-to-link-target.patch
+     - 1006_make-sure-tracepoints-h-exists.patch
+     - 1007_make-valgrind-dependency-optional.patch
+     - 1008_drop-Werror-enforcement-leave-it-to-configure-option.patch
+     - 2001_no-convert-to-gles-test.patch
+     - 2004_qml-demo-shell-work-without-ui-toolkit.patch
+    + Refreshed patches:
+     - 2002_no-requires-provides-check.patch
+     - 2003_disable-benchmarks.patch
+  * debian/copyright: Update copyright to match new upstream release
+  * debian/symbols: Update symbols to match new upstream release
+  * debian/control: Drop qtmir-{android/desktop} and use a generic qtmir package
+  * debian/control: Add myself as uploader
+  * debian/control: Bump required versions for cmake-extras and googletest
+  * debian/rules: Clean up rules and remove dual binary build (was for
+    android/desktop split)
+  * debian/qtmir-tests: Rename paths to match upstream renames
+  * debian/control: Add qml-module-lomiri-components as DEP for qtmir-tests
+
+  [ Mike Gabriel ]
+  * debian/copyright:
+    + Update auto-generated copyright.in file.
+    + Update more copyright attributions, finalize for upload.
+  * debian/control:
+    + Improve transitional packages, provide former info on the packages'
+      content. Thanks, lintian.
+
+ -- Mike Gabriel <sunweaver@debian.org>  Sat, 23 Apr 2022 09:45:49 +0200
+
+qtmir (0.6.1-8) unstable; urgency=medium
+
+  * debian/rules:
+    + Comment out DPKG_GENSYMBOLS_CHECK_LEVEL=4. Let's use level 1 (default)
+      and receive less build failures. (related to #997464).
+  * debian/control:
+    + Bump Standards-Version: to 4.6.0. No changes needed.
+  * debian/libqtmirserver1.symbols:
+    + Update symbols after build with gcc-11. (Closes: #997464).
+
+ -- Mike Gabriel <sunweaver@debian.org>  Sat, 13 Nov 2021 21:05:14 +0100
+
+qtmir (0.6.1-7) unstable; urgency=medium
+
+  * debian/libqtmirserver1.symbols:
+    + Update for architectures arm64, m68k, mips64el and sh4.
+
+ -- Mike Gabriel <sunweaver@debian.org>  Sun, 14 Mar 2021 21:36:52 +0100
+
+qtmir (0.6.1-6) unstable; urgency=medium
+
+  * debian/control:
+    + Limit qtmir to linux-any architecture builds.
+  * debian/patches:
+    + Add 0001_demo-fix-detecting-running-installed.patch,
+      0002_demos-fix-application-name.patch. Fix loading demo shell and demo
+      client.
+    + Add 2004_qml-demo-shell-work-without-ui-toolkit.patch. Make qml-demo-shell
+      work without lomiri-ui-toolkit.
+  * debian/rules:
+    + Move qtmir-demo-shell files to the correct location.
+  * debian/qtmir-tests.install:
+    + Pick up files for qtmir-demo-shell and qtmir-demo-client from the correct
+      location (as moved around by d/rules).
+
+ -- Mike Gabriel <sunweaver@debian.org>  Wed, 10 Mar 2021 21:08:51 +0100
+
+qtmir (0.6.1-5) unstable; urgency=medium
+
+  * debian/control:
+    + Replace D (qtmir-tests): qtdeclarative5-qtmir-plugin by qml-module-qtmir,
+      drop from D (qtmir-tests): autopilot-qt5 and python3-autopilot. (Closes:
+      #977134).
+    + Bump Standards-Version: to 4.5.1. No changes needed.
+  * debian/qtmir-tests.install:
+    + Drop DATADIR/qtmir/benachmarks/* from qtmir-tests bin:pkg.
+  * debian/patches:
+    + Add 2003_disable-benchmarks.patch. No autopilot in Debian, so let's build
+      qtmir without dependency on it (i.e. without benchmarks).
+
+ -- Mike Gabriel <sunweaver@debian.org>  Wed, 16 Dec 2020 16:32:50 +0100
+
+qtmir (0.6.1-4) unstable; urgency=medium
+
+  * debian/libqtmirserver1.symbols:
+    + Update for armel architecture. (Closes: #973423).
+
+ -- Mike Gabriel <sunweaver@debian.org>  Fri, 30 Oct 2020 19:56:05 +0100
+
+qtmir (0.6.1-3) unstable; urgency=medium
+
+  * debian/patches:
+    + Add 1008_drop-Werror-enforcement-leave-it-to-configure-option.patch. Fix
+      disabling -Werror via CMake configure option.
+  * debian/rules:
+    + Build with CMake option '-DWerror=OFF'. (Closes: #973437).
+  * debian/libqtmirserver1.symbols:
+    + Update after rebuild against Qt 5.15 (amd64 only for now).
+
+ -- Mike Gabriel <sunweaver@debian.org>  Fri, 30 Oct 2020 17:45:48 +0100
+
+qtmir (0.6.1-2) unstable; urgency=medium
+
+  * debian/control:
+    + Only require valgrind as B-D on architectures where it is available on.
+  * debian/patches:
+    + Add 1007_make-valgrind-dependency-optional.patch. Make Valgrind an
+      optional build dependency.
+  * debian/libqtmirserver1.symbols:
+    + Update symbols for armhf i386 mipsel ppc64el.
+
+ -- Mike Gabriel <sunweaver@debian.org>  Wed, 28 Oct 2020 14:33:37 +0100
+
+qtmir (0.6.1-1) unstable; urgency=medium
+
+  * Initial upload to Debian (Closes: #971257).
+  * debian/*:
+    + Rename bin:pkg qtdeclarative5-qtmir-plugin to qml-module-qtmir.
+  * debian/watch:
+    + Add file.
+  * debian/control:
+    + Adjust B-Ds for googletest.
+    + Drop B-D libcontent-hub-dev.
+    + Drop B-D on libcgmanager-dev. (Package not available in Debian anymore).
+    + Drop B-D on libmirclient-dev. Not required anymore with qtmir 0.6.1.
+    + Fix dev:pkg name provided by lomiri-app-launch.
+    + Fix versioned B-D on lomiri-api-dev. Remnant of Unity8 -> Lomiri
+      migration.
+    + Update versioned B-D: cmake-extras (>= 1.5-4~).
+    + Drop from B-D: qt5-default (meta package).
+    + Bump Standards-Version: to 4.5.0. No changes needed.
+    + Bump DH compat level to version 13.
+    + Add Vcs-*: fields.
+    + Assure binNMU'ability between bin:pkgs in this src:pkg.
+    + Add Rules-Requires-Root: field and set it to 'no'.
+    + Add B-D pkg-kde-tools.
+    + Drop Section: field duplicating global Section: field.
+    + Improve LONG_DESCRIPTION fields of two bin:pkgs.
+    + Turn bin:pkg qtmir-tests into Multi-Arch: foreign.
+    + Move qtmir-tests bin:pkg into section 'libdevel'.
+    + Adjust Maintainer: field and Uploaders: field to official upload to
+      Debian.
+    + Add Debian Qt/KDE Maintainers to Uploaders: field.
+  * debian/rules:
+    + Add get-orig-source target.
+    + Move --fail-missing flag into dh_missing override.
+    + Remove build-*/ during dh_clean. Makes build idempotent.
+    + Don't build WITH_CONTENTHUB anymore. Obsolete in qtmir 0.6.1.
+    + Drop now default --parallel DH build option.
+    + Enable all hardening build flags.
+    + Build with pkgkde_symbolshelper.
+  * debian/patches:
+    + Add 1002_drop-cgmanager-dependency.patch. Rip out cgmanager dependent
+      code. This has been sanctioned by upstream.
+    + Add 1003_INSTANTIATE_TEST_SUITE.patch. Use INSTANTIATE_TEST_SUITE macro,
+      rather than deprecated INSTANTIATE_TEST_CASE macro.
+    + Add 1004_remove-cmake-instructions-that-have-been-moved-into-
+      FindGMock.patch. Drop CMake instructions that have been moved into
+      FindGMock of cmake-extras.
+    + Add 1005_add-missing-pthread-to-link-target.patch. Add missing -pthread
+      linker argument. Probably to hard-coded, but works for now.
+    + Add 2001_no-convert-to-gles-test.patch and 2002_no-requires-provides-
+      check.patch. Disable tests fiddling around with files in debian/*. Not
+      wanted by Debian maintainer.
+    + Add 1006_make-sure-tracepoints-h-exists.patch. Make sure tracepoints.h
+      exists for building library 'qtmirserver-mirserver'.
+    + Add upstream bugs for all 100* patches.
+    + Refer to a bug report for Debian-specific patches 200*_*.patch.
+  * debian/source/format:
+    + Add file.
+  * debian/copyright:
+    + Add auto-generated copyright.in file.
+    + Rework copyright attributions, use individual-code-file style.
+    + Also mention files we remove via patch.
+  * debian/upstream/metadata:
+    + Add file. Comply with DEP-12.
+  * debian/libqtmirserver1.symbols:
+    + Add file.
+
+ -- Mike Gabriel <sunweaver@debian.org>  Sun, 25 Oct 2020 01:31:45 +0200
 
 qtmir (0.6.0ubuntu5) xenial; urgency=medium
 
@@ -44,7 +347,7 @@ qtmir (0.6.0ubuntu5) xenial; urgency=medium
 
 qtmir (0.5.3+ubports1) xenial; urgency=medium
 
-  * Import to ubports 
+  * Import to ubports
 
  -- Marius Gripsgard <marius@ubports.com>  Thu, 28 Dec 2017 04:30:55 +0100
 
@@ -982,7 +1285,7 @@ qtmir (0.4.6+15.04.20150827.1-0ubuntu1) vivid; urgency=medium
 
 qtmir (0.4.5+15.10.20150817-0ubuntu1) wily; urgency=medium
 
-  * 
+  *
 
  -- CI Train Bot <ci-train-bot@canonical.com>  Mon, 17 Aug 2015 19:28:26 +0000
 
diff --git a/debian/control b/debian/control
index a1489e85..9c5b5631 100644
--- a/debian/control
+++ b/debian/control
@@ -1,21 +1,24 @@
 Source: qtmir
 Section: libs
 Priority: optional
-Maintainer: UBports Developers <developers@ubports.com>
+Maintainer: Debian UBports Team <team+ubports@tracker.debian.org>
+Uploaders:
+ Debian Qt/KDE Maintainers <debian-qt-kde@lists.debian.org>,
+ Mike Gabriel <sunweaver@debian.org>,
+ Marius Gripsgard <marius@ubports.com>,
 Build-Depends: cmake,
                cmake-extras (>= 1.6~),
-               debhelper-compat (= 12),
+               debhelper-compat (= 13),
                googletest (>= 1.10.0),
-               libcontent-hub-dev (>= 1.0.0),
                libfontconfig1-dev,
                libgles2-mesa-dev,
                libglib2.0-dev,
                libgsettings-qt-dev,
                libgtest-dev,
                liblttng-ust-dev,
-               libmiral-dev (>= 1.2),
-               libmircommon-dev (>= 0.26.0),
-               libmirserver-dev (>= 0.26.0),
+               libmiral-dev (>= 3.0),
+               libmircommon-dev (>= 2.11.0),
+               libmirserver-dev (>= 2.11.0),
                libmtdev-dev,
                libprocess-cpp-dev,
                libqt5sensors5-dev,
@@ -27,9 +30,13 @@ Build-Depends: cmake,
                liblomiri-url-dispatcher-dev,
                libxkbcommon-dev,
                libxrender-dev,
-               mir-renderer-gl-dev (>= 0.26.0),
-               mirtest-dev (>= 0.26.0),
+               mir-renderer-gl-dev (>= 2.11.0),
+               mirtest-dev (>= 2.11.0),
+               libmiroil-dev,
+               libmirwayland-dev,
+               libwayland-dev,
                pkg-config,
+               pkg-kde-tools,
 # lttng-gen-ts needs python3, but doesn't depend on it itself: bug 1359147
                python3:any,
                qtbase5-dev,
@@ -37,15 +44,17 @@ Build-Depends: cmake,
                qtdeclarative5-dev,
                qtdeclarative5-private-dev,
                quilt,
-               valgrind [amd64 arm64 armhf i386 mips64el mipsel ppc64el s390x powerpc ppc64 x32],
+               valgrind-if-available,
 # libmirserver-dev should have brought this dep. Bug lp:1617435
                uuid-dev,
 # mirtest pkgconfig requires these, but doesn't have a deb dependency. Bug lp:1633537
                libboost-filesystem-dev,
                libboost-system-dev,
-Standards-Version: 4.5.1
+Standards-Version: 4.6.1
 Rules-Requires-Root: no
-Homepage: https://github.com/ubports/qtmir
+Homepage: https://gitlab.com/ubports/development/core/qtmir
+Vcs-Git: https://salsa.debian.org/ubports-team/qtmir.git
+Vcs-Browser: https://salsa.debian.org/ubports-team/qtmir
 
 Package: qtmir
 Architecture: linux-any
@@ -65,19 +74,29 @@ Package: qtmir-android
 Architecture: armhf arm64
 Multi-Arch: same
 Depends: qtmir, ${misc:Depends},
-Priority: optional
 Section: oldlibs
-Description: transitional package
-  This is a transitional package. It can safely be removed.
+Description: QPA plugin for a Mir server (mobile, transitional package)
+  QtMir is a set of Qt5 components to enable one to write a Mir server with Qt.
+  It contains a QPA (Qt Platform Abstraction) plugin which creates and manages
+  a Mir server. It also exposes some internal Mir functionality.
+ .
+ This variant of the package is for Android-based phones and tablets.
+ .
+ This is a transitional package. It can safely be removed.
 
 Package: qtmir-desktop
 Architecture: linux-any
 Multi-Arch: same
 Depends: qtmir, ${misc:Depends},
-Priority: optional
 Section: oldlibs
-Description: transitional package
-  This is a transitional package. It can safely be removed.
+Description: QPA plugin for a Mir server (desktop, transitional package)
+ QtMir is a set of Qt5 components to enable one to write a Mir server with Qt.
+ It contains a QPA (Qt Platform Abstraction) plugin which creates and manages
+ a Mir server. It also exposes some internal Mir functionality.
+ .
+ This variant of the package is for GNU-based desktops.
+ .
+ This is a transitional package. It can safely be removed.
 
 Package: libqtmirserver-dev
 Section: libdevel
@@ -86,7 +105,8 @@ Multi-Arch: same
 Pre-Depends: ${misc:Pre-Depends}
 Depends: qtmir (= ${binary:Version}),
          ${misc:Depends},
-         libmiral-dev (>= 1.3.0),
+         libmiral-dev (>= 3.0),
+         libmiroil-dev,
 Description: Developer files for QtMir server API
  QtMir is a set of Qt5 components to enable one to write a Mir server with Qt.
  It contains a QPA (Qt Platform Abstraction) plugin which creates and manages
@@ -94,7 +114,7 @@ Description: Developer files for QtMir server API
  .
  This package contains the library headers for developers.
 
-Package: libqtmirserver1
+Package: libqtmirserver2
 Architecture: linux-any
 Multi-Arch: same
 Pre-Depends: ${misc:Pre-Depends}
@@ -115,7 +135,7 @@ Depends: qtmir (= ${binary:Version}),
          ${misc:Depends},
          ${shlibs:Depends},
 Provides: lomiri-application-impl,
-          lomiri-application-impl-28,
+          lomiri-application-impl-27,
 Description: Qt/QML module for Lomiri specific Mir APIs
  QtMir is a set of Qt5 components to enable one to write a Mir server with Qt.
  It contains a QPA (Qt Platform Abstraction) plugin which creates and manages
@@ -133,16 +153,11 @@ Pre-Depends: ${misc:Pre-Depends},
 Depends: littler,
          lttng-tools,
          mir-test-tools,
-         python3-autopilot,
-         python3-babeltrace,
-         python3-evdev,
-         python3-mir-perf-framework,
          qml-module-lomiri-components,
          qml-module-qtmir,
          qtmir (= ${binary:Version}),
          ${misc:Depends},
          ${shlibs:Depends},
-Recommends: autopilot-qt5,
 Description: QtMir tests and demos
  QtMir is a set of Qt5 components to enable one to write a Mir server with Qt.
  It contains a QPA (Qt Platform Abstraction) plugin which creates and manages
diff --git a/debian/copyright b/debian/copyright
index ca90ebf9..88486c50 100644
--- a/debian/copyright
+++ b/debian/copyright
@@ -1,12 +1,12 @@
 Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
 Upstream-Name: qtmir
 Upstream-Contact: Marius Gripsgard <marius@ubports.com>
-Source: https://gitlab.com/ubports/core/qtmir/
+Source: https://gitlab.com/ubports/development/core/qtmir/
 
-Files: demos/qml-demo-shell/screens.cpp
- demos/qml-demo-shell/screens.h
- demos/qml-demo-shell/screenwindow.cpp
- demos/qml-demo-shell/screenwindow.h
+Files: demos/qtmir-demo-shell/screens.cpp
+ demos/qtmir-demo-shell/screens.h
+ demos/qtmir-demo-shell/screenwindow.cpp
+ demos/qtmir-demo-shell/screenwindow.h
  include/qtmir/displayconfigurationpolicy.h
  include/qtmir/displayconfigurationstorage.h
  include/qtmir/mirserverapplication.h
@@ -26,19 +26,18 @@ Files: demos/qml-demo-shell/screens.cpp
  src/common/workspacecontrollerinterface.h
  src/modules/QtMir/Application/application.cpp
  src/modules/QtMir/Application/application.h
+ src/modules/QtMir/Application/application_manager.cpp
  src/modules/QtMir/Application/application_manager.h
  src/modules/QtMir/Application/applicationinfo.h
- src/modules/QtMir/Application/cgmanager.cpp
- src/modules/QtMir/Application/cgmanager.h
  src/modules/QtMir/Application/compositortextureprovider.cpp
  src/modules/QtMir/Application/compositortextureprovider.h
  src/modules/QtMir/Application/dbusfocusinfo.cpp
  src/modules/QtMir/Application/dbusfocusinfo.h
  src/modules/QtMir/Application/gscopedpointer.h
- src/modules/QtMir/Application/mirbuffersgtexture.cpp
  src/modules/QtMir/Application/mirbuffersgtexture.h
  src/modules/QtMir/Application/mirsurface.h
  src/modules/QtMir/Application/mirsurfaceinterface.h
+ src/modules/QtMir/Application/mirsurfaceitem.cpp
  src/modules/QtMir/Application/mirsurfaceitem.h
  src/modules/QtMir/Application/objectlistmodel.h
  src/modules/QtMir/Application/plugin.cpp
@@ -78,8 +77,6 @@ Files: demos/qml-demo-shell/screens.cpp
  src/platforms/mirserver/inputdeviceobserver.h
  src/platforms/mirserver/logging.cpp
  src/platforms/mirserver/logging.h
- src/platforms/mirserver/mircursorimages.cpp
- src/platforms/mirserver/mircursorimages.h
  src/platforms/mirserver/mirdisplayconfigurationobserver.cpp
  src/platforms/mirserver/mirdisplayconfigurationobserver.h
  src/platforms/mirserver/mirglconfig.h
@@ -107,6 +104,7 @@ Files: demos/qml-demo-shell/screens.cpp
  src/platforms/mirserver/qmirserver_p.h
  src/platforms/mirserver/qtcompositor.cpp
  src/platforms/mirserver/qtcompositor.h
+ src/platforms/mirserver/qteventfeeder.cpp
  src/platforms/mirserver/qteventfeeder.h
  src/platforms/mirserver/screenadaptor.cpp
  src/platforms/mirserver/screenadaptor.h
@@ -130,6 +128,7 @@ Files: demos/qml-demo-shell/screens.cpp
  src/platforms/mirserver/windowmodelnotifier.cpp
  src/platforms/mirserver/workspacecontroller.cpp
  src/platforms/mirserver/workspacecontroller.h
+ src/platforms/mirserver/wrappedsessionauthorizer.cpp
  src/platforms/mirserver/wrappedsessionauthorizer.h
  src/platforms/mirserver/wrappedwindowmanagementpolicy.cpp
  src/platforms/mirserver/wrappedwindowmanagementpolicy.h
@@ -214,8 +213,10 @@ Copyright: 2011-2014, Canonical, Ltd.
   2017, Canonical, Ltd.
 License: LGPL-3
 
-Files: CMakeLists.txt
- Jenkinsfile
+Files:
+ AUTHORS
+ CMakeLists.txt
+ ChangeLog
  NEWS
  README
  benchmarks/CMakeLists.txt
@@ -225,24 +226,27 @@ Files: CMakeLists.txt
  cmake/modules/QmlTest.cmake
  cmake/modules/UseLttngGenTp.cmake
  cmake/modules/autopilot.cmake
+ data/CMakeLists.txt
+ data/xwayland.qtmir.desktop
+ data/xwayland.qtmir.png
  demos/CMakeLists.txt
- demos/qml-demo-client/CMakeLists.txt
- demos/qml-demo-client/MovingRect.qml
- demos/qml-demo-client/qml-demo-client.qml
- demos/qml-demo-client/qtmir-demo-client.desktop.in
- demos/qml-demo-shell/Button.qml
- demos/qml-demo-shell/CMakeLists.txt
- demos/qml-demo-shell/ResizeArea.qml
- demos/qml-demo-shell/ScreenConfiguration.qml
- demos/qml-demo-shell/Shell.qml
- demos/qml-demo-shell/TitleBar.qml
- demos/qml-demo-shell/UnityLogo.png
- demos/qml-demo-shell/Window.qml
- demos/qml-demo-shell/WindowBufferSized.qml
- demos/qml-demo-shell/WindowModelDebugView.qml
- demos/qml-demo-shell/qml-demo-shell.qml
- demos/qml-demo-shell/qml-demo-shell.qmlproject
- include/qtmir/miral/display_id.h
+ demos/qtmir-demo-client/CMakeLists.txt
+ demos/qtmir-demo-client/MovingRect.qml
+ demos/qtmir-demo-client/qml-demo-client.qml
+ demos/qtmir-demo-client/qtmir-demo-client.desktop.in
+ demos/qtmir-demo-shell/Button.qml
+ demos/qtmir-demo-shell/CMakeLists.txt
+ demos/qtmir-demo-shell/ResizeArea.qml
+ demos/qtmir-demo-shell/ScreenConfiguration.qml
+ demos/qtmir-demo-shell/Shell.qml
+ demos/qtmir-demo-shell/TitleBar.qml
+ demos/qtmir-demo-shell/UnityLogo.png
+ demos/qtmir-demo-shell/Window.qml
+ demos/qtmir-demo-shell/WindowBufferSized.qml
+ demos/qtmir-demo-shell/WindowModelDebugView.qml
+ demos/qtmir-demo-shell/qml-demo-shell.qml
+ demos/qtmir-demo-shell/qml-demo-shell.qmlproject
+ include/miroil/display_id.h
  include/qtmir/qtmir.h
  src/CMakeLists.txt
  src/common/timestamp.cpp
@@ -255,14 +259,14 @@ Files: CMakeLists.txt
  src/modules/QtMir/CMakeLists.txt
  src/platforms/CMakeLists.txt
  src/platforms/mirserver/CMakeLists.txt
- src/platforms/mirserver/miral/CMakeLists.txt
+ src/platforms/mirserver/miroil/CMakeLists.txt
+ src/platforms/mirserver/miroil/src/CMakeLists.txt
  src/platforms/mirserver/mirserver.json
  src/platforms/mirserver/qtmir.cpp
  src/platforms/mirserver/qtmirserver.pc.in
  src/platforms/mirserver/tracepoints.tp
  tests/CMakeLists.txt
  tests/check-requires-provides.sh
- tests/convert-to-gles.sh
  tests/framework/CMakeLists.txt
  tests/framework/mock_persistent_surface_store.h
  tests/mirserver/CMakeLists.txt
@@ -288,39 +292,59 @@ Comment:
  Assuming same license as for the majority of code files,
  assuming same copyright holders.
 
-Files: include/qtmir/miral/display_configuration_policy.h
- include/qtmir/miral/display_configuration_storage.h
- include/qtmir/miral/edid.h
- src/platforms/mirserver/eventdispatch.cpp
- src/platforms/mirserver/eventdispatch.h
- src/platforms/mirserver/miral/display_configuration_policy.cpp
- src/platforms/mirserver/miral/edid.cpp
- src/platforms/mirserver/miral/mirbuffer.cpp
- src/platforms/mirserver/miral/mirbuffer.h
- src/platforms/mirserver/miral/persist_display_config.cpp
- src/platforms/mirserver/miral/persist_display_config.h
- src/platforms/mirserver/mirserverhooks.cpp
- src/platforms/mirserver/mirserverhooks.h
- src/platforms/mirserver/openglcontextfactory.cpp
- src/platforms/mirserver/openglcontextfactory.h
+Files: include/miroil/display_configuration_policy.h
+ include/miroil/display_configuration_storage.h
+ include/miroil/edid.h
+ src/platforms/mirserver/miroil/include/miroil/compositor.h
+ src/platforms/mirserver/miroil/include/miroil/display_configuration_controller_wrapper.h
+ src/platforms/mirserver/miroil/include/miroil/display_listener_wrapper.h
+ src/platforms/mirserver/miroil/include/miroil/event_builder.h
+ src/platforms/mirserver/miroil/include/miroil/eventdispatch.h
+ src/platforms/mirserver/miroil/include/miroil/input_device.h
+ src/platforms/mirserver/miroil/include/miroil/input_device_observer.h
+ src/platforms/mirserver/miroil/include/miroil/mir_prompt_session.h
+ src/platforms/mirserver/miroil/include/miroil/mir_server_hooks.h
+ src/platforms/mirserver/miroil/include/miroil/mirbuffer.h
+ src/platforms/mirserver/miroil/include/miroil/open_gl_context.h
+ src/platforms/mirserver/miroil/include/miroil/persist_display_config.h
+ src/platforms/mirserver/miroil/include/miroil/prompt_session_listener.h
+ src/platforms/mirserver/miroil/include/miroil/prompt_session_manager.h
+ src/platforms/mirserver/miroil/include/miroil/set_compositor.h
+ src/platforms/mirserver/miroil/include/miroil/surface.h
+ src/platforms/mirserver/miroil/include/miroil/surface_observer.h
+ src/platforms/mirserver/miroil/src/compositor.cpp
+ src/platforms/mirserver/miroil/src/display_configuration_controller_wrapper.cpp
+ src/platforms/mirserver/miroil/src/display_configuration_policy.cpp
+ src/platforms/mirserver/miroil/src/display_listener_wrapper.cpp
+ src/platforms/mirserver/miroil/src/edid.cpp
+ src/platforms/mirserver/miroil/src/event_builder.cpp
+ src/platforms/mirserver/miroil/src/eventdispatch.cpp
+ src/platforms/mirserver/miroil/src/input_device.cpp
+ src/platforms/mirserver/miroil/src/input_device_observer.cpp
+ src/platforms/mirserver/miroil/src/mir_prompt_session.cpp
+ src/platforms/mirserver/miroil/src/mir_server_hooks.cpp
+ src/platforms/mirserver/miroil/src/mirbuffer.cpp
+ src/platforms/mirserver/miroil/src/open_gl_context.cpp
+ src/platforms/mirserver/miroil/src/persist_display_config.cpp
+ src/platforms/mirserver/miroil/src/prompt_session_listener.cpp
+ src/platforms/mirserver/miroil/src/prompt_session_manager.cpp
+ src/platforms/mirserver/miroil/src/set_compositor.cpp
+ src/platforms/mirserver/miroil/src/surface.cpp
  src/platforms/mirserver/promptsession.h
- src/platforms/mirserver/promptsessionmanager.cpp
- src/platforms/mirserver/promptsessionmanager.h
- src/platforms/mirserver/setqtcompositor.cpp
- src/platforms/mirserver/setqtcompositor.h
  tests/framework/fake_surface.h
  tests/framework/stub_scene_surface.h
 Copyright: 2014, 2016, Canonical Ltd.
   2016, Canonical Ltd.
   2016-2017, Canonical Ltd.
   2017, Canonical Ltd.
+  2016-2020 Canonical Ltd.
 License: GPL-3
 
 Files: demos/paths.h.in
- demos/qml-demo-client/main.cpp
- demos/qml-demo-shell/main.cpp
- demos/qml-demo-shell/pointerposition.cpp
- demos/qml-demo-shell/pointerposition.h
+ demos/qtmir-demo-client/main.cpp
+ demos/qtmir-demo-shell/main.cpp
+ demos/qtmir-demo-shell/pointerposition.cpp
+ demos/qtmir-demo-shell/pointerposition.h
  src/modules/QtMir/Application/mirsurfacelistmodel.cpp
  src/modules/QtMir/Application/mirsurfacelistmodel.h
  src/modules/QtMir/Application/timer.cpp
@@ -338,16 +362,6 @@ Copyright: 2015, Canonical Ltd.
   2016, Canonical Ltd.
 License: LGPL-3
 
-Files: src/modules/QtMir/Application/application_manager.cpp
- src/modules/QtMir/Application/mirsurfaceitem.cpp
- src/platforms/mirserver/qteventfeeder.cpp
- src/platforms/mirserver/wrappedsessionauthorizer.cpp
-Copyright: 2013-2016, Canonical, Ltd.
-  2013-2017, Canonical, Ltd.
-  2016, Canonical, Ltd.
-License: LGPL-3
-Comment: GENERATED FILE
-
 Files: cmake/modules/FindQt5EventDispatcherSupport.cmake
  cmake/modules/FindQt5FontDatabaseSupport.cmake
  cmake/modules/FindQt5ThemeSupport.cmake
@@ -379,6 +393,11 @@ Copyright: 2015-2017, Canonical, Ltd.
   2020, UBports Foundation
 License: LGPL-3
 
+Files: src/modules/QtMir/Application/mirbuffersgtexture.cpp
+Copyright: 2013-2015, Canonical, Ltd.
+  2021, UBports Foundation
+License: GPL-3
+
 Files: cmake/modules/FindQt5PlatformSupport.cmake
 Copyright: 2014, Alex Merry <alex.merry@kde.org>
   2014, Martin Gräßlin <mgraesslin@kde.org>
@@ -386,7 +405,8 @@ License: BSD-3-clause
 
 Files: debian/*
 Copyright: 2013-2017, Canonical Ltd.
-           2020, Mike Gabriel <mike.gabriel@das-netzwerkteam.de>
+           2020-2023, Marius Gripsgard <marius@ubports.com>
+           2020-2023, Mike Gabriel <mike.gabriel@das-netzwerkteam.de>
 License: GPL-2 or GPL-3 or LGPL-2.1 or LGPL-3 or BSD-3-clause
 
 License: LGPL-3
diff --git a/debian/libqtmirserver1.install b/debian/libqtmirserver1.install
deleted file mode 100644
index e07913b9..00000000
--- a/debian/libqtmirserver1.install
+++ /dev/null
@@ -1 +0,0 @@
-usr/lib/*/libqtmirserver.so.1
diff --git a/debian/libqtmirserver2.install b/debian/libqtmirserver2.install
new file mode 100644
index 00000000..89778b57
--- /dev/null
+++ b/debian/libqtmirserver2.install
@@ -0,0 +1 @@
+usr/lib/*/libqtmirserver.so.2
diff --git a/debian/libqtmirserver2.symbols b/debian/libqtmirserver2.symbols
new file mode 100644
index 00000000..27b9a899
--- /dev/null
+++ b/debian/libqtmirserver2.symbols
@@ -0,0 +1,2381 @@
+# SymbolsHelper-Confirmed: 0.8.0~git20230109.671f617 amd64 arm64 armel armhf hppa i386 mips64el mipsel powerpc ppc64 s390x
+libqtmirserver.so.2 libqtmirserver2 #MINVER#
+* Build-Depends-Package: libqtmirserver-dev
+ _Z10QTMIR_DBUSv@Base 0.6.1
+ _Z13QTMIR_SCREENSv@Base 0.6.1
+ _Z14QTMIR_SESSIONSv@Base 0.6.1
+ _Z14QTMIR_SURFACESv@Base 0.6.1
+ _Z15QTMIR_CLIPBOARDv@Base 0.6.1
+ _Z15QTMIR_MIR_INPUTv@Base 0.6.1
+ _Z16QTMIR_MIR_KEYMAPv@Base 0.6.1
+ (optional=templinst)_Z17qRegisterMetaTypeIN3Mir5StateEEiPKcPT_N9QtPrivate21MetaTypeDefinedHelperIS4_Xaasr12QMetaTypeId2IS4_E7DefinedntsrS9_9IsBuiltInEE11DefinedTypeE@Base 0.6.1
+ (optional=templinst)_Z17qRegisterMetaTypeIN5qtmir13PromptSessionEEiPKcPT_N9QtPrivate21MetaTypeDefinedHelperIS4_Xaasr12QMetaTypeId2IS4_E7DefinedntsrS9_9IsBuiltInEE11DefinedTypeE@Base 0.6.1
+ (optional=templinst)_Z17qRegisterMetaTypeISt10shared_ptrIN3mir5scene7SessionEEEiPKcPT_N9QtPrivate21MetaTypeDefinedHelperIS7_Xaasr12QMetaTypeId2IS7_E7DefinedntsrSC_9IsBuiltInEE11DefinedTypeE@Base 0.6.1
+ _Z18QTMIR_APPLICATIONSv@Base 0.6.1
+ _Z18QTMIR_MIR_MESSAGESv@Base 0.6.1
+ _Z18qtCursorShapeToStrN2Qt11CursorShapeE@Base 0.6.1
+ _Z18touchEventToStringPK11QTouchEvent@Base 0.6.1
+ _Z19mirSurfaceTypeToStri@Base 0.6.1
+ _Z20mirSurfaceStateToStri@Base 0.6.1
+ _Z21QTMIR_SENSOR_MESSAGESv@Base 0.6.1
+ _Z21applicationStateToStri@Base 0.6.1
+ _Z21mirTouchEventToStringPK13MirTouchEvent@Base 0.6.1
+ _Z21unityapiMirStateToStri@Base 0.6.1
+ _Z22mirTouchActionToString14MirTouchAction@Base 0.6.1
+ _Z23mirPointerEventToStringPK15MirPointerEvent@Base 0.6.1
+ _Z23touchPointStateToStringN2Qt15TouchPointStateE@Base 0.6.1
+ _Z24mirKeyboardEventToStringPK16MirKeyboardEvent@Base 0.6.1
+ _Z25mirSurfaceFocusStateToStri@Base 0.6.1
+ _Z25mirSurfaceVisibilityToStri@Base 0.6.1
+ (optional=templinst)_Z27qRegisterNormalizedMetaTypeIN3Mir5StateEEiRK10QByteArrayPT_N9QtPrivate21MetaTypeDefinedHelperIS5_Xaasr12QMetaTypeId2IS5_E7DefinedntsrSA_9IsBuiltInEE11DefinedTypeE@Base 0.6.1
+ (optional=templinst)_Z27qRegisterNormalizedMetaTypeIN5qtmir10FormFactorEEiRK10QByteArrayPT_N9QtPrivate21MetaTypeDefinedHelperIS5_Xaasr12QMetaTypeId2IS5_E7DefinedntsrSA_9IsBuiltInEE11DefinedTypeE@Base 0.6.1
+ (optional=templinst)_Z27qRegisterNormalizedMetaTypeIN5qtmir11OutputTypesEEiRK10QByteArrayPT_N9QtPrivate21MetaTypeDefinedHelperIS5_Xaasr12QMetaTypeId2IS5_E7DefinedntsrSA_9IsBuiltInEE11DefinedTypeE@Base 0.6.1
+ (optional=templinst)_Z27qRegisterNormalizedMetaTypeIN5qtmir13PromptSessionEEiRK10QByteArrayPT_N9QtPrivate21MetaTypeDefinedHelperIS5_Xaasr12QMetaTypeId2IS5_E7DefinedntsrSA_9IsBuiltInEE11DefinedTypeE@Base 0.6.1
+ (optional=templinst)_Z27qRegisterNormalizedMetaTypeIPN5qtmir19ScreenConfigurationEEiRK10QByteArrayPT_N9QtPrivate21MetaTypeDefinedHelperIS6_Xaasr12QMetaTypeId2IS6_E7DefinedntsrSB_9IsBuiltInEE11DefinedTypeE@Base 0.6.1
+ (optional=templinst)_Z27qRegisterNormalizedMetaTypeISt10shared_ptrIN3mir5scene7SessionEEEiRK10QByteArrayPT_N9QtPrivate21MetaTypeDefinedHelperIS8_Xaasr12QMetaTypeId2IS8_E7DefinedntsrSD_9IsBuiltInEE11DefinedTypeE@Base 0.6.1
+ _Z32mirSurfaceAttribAndValueToString15MirWindowAttribi@Base 0.6.1
+ _ZGVZN9QtPrivate15ConnectionTypesINS_4ListIJRKN5miral10WindowInfoE5QSizeEEELb1EE5typesEvE1t@Base 0.6.1
+ _ZGVZN9QtPrivate15ConnectionTypesINS_4ListIJRKN5miral10WindowInfoE6QPointEEELb1EE5typesEvE1t@Base 0.6.1
+ _ZGVZN9QtPrivate15ConnectionTypesINS_4ListIJRKN5miral10WindowInfoEEEELb1EE5typesEvE1t@Base 0.6.1
+ _ZGVZN9QtPrivate15ConnectionTypesINS_4ListIJRKN5miral10WindowInfoEN3Mir5StateEEEELb1EE5typesEvE1t@Base 0.6.1
+ _ZGVZN9QtPrivate15ConnectionTypesINS_4ListIJRKN5miral10WindowInfoEbEEELb1EE5typesEvE1t@Base 0.6.1
+ _ZGVZN9QtPrivate15ConnectionTypesINS_4ListIJRKN5qtmir9NewWindowEEEELb1EE5typesEvE1t@Base 0.6.1
+ _ZN10QByteArrayD1Ev@Base 0.6.1
+ _ZN10QByteArrayD2Ev@Base 0.6.1
+ _ZN10QMirServer11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN10QMirServer11qt_metacastEPKc@Base 0.6.1
+ _ZN10QMirServer16staticMetaObjectE@Base 0.6.1
+ (optional=templinst)_ZN10QMirServer25overrideSessionAuthorizerERKSt8functionIFSt10shared_ptrIN5qtmir17SessionAuthorizerEEvEE@Base 0.6.1
+ (optional=templinst)_ZN10QMirServer30overrideWindowManagementPolicyERKSt8functionIFSt10shared_ptrIN5qtmir22WindowManagementPolicyEERKN5miral18WindowManagerToolsES1_INS2_29WindowManagementPolicyPrivateEEEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZN10QMirServer30wrapDisplayConfigurationPolicyERKSt8functionIFSt10shared_ptrIN5miral26DisplayConfigurationPolicyEEvEE@Base 0.6.1
+ (optional=templinst)_ZN10QMirServer30wrapDisplayConfigurationPolicyERKSt8functionIFSt10shared_ptrIN6miroil26DisplayConfigurationPolicyEERKS1_IN3mir8graphics26DisplayConfigurationPolicyEEEE@Base 0.8.0~git20230109.671f617
+ _ZN10QMirServer35overrideDisplayConfigurationStorageERKN5qtmir35BasicSetDisplayConfigurationStorageE@Base 0.6.1
+ _ZN10QMirServer4stopEv@Base 0.6.1
+ _ZN10QMirServer5startEv@Base 0.6.1
+ _ZN10QMirServer6createEv@Base 0.6.1
+ _ZN10QMirServer7startedEv@Base 0.6.1
+ _ZN10QMirServer7stoppedEv@Base 0.6.1
+ _ZN10QMirServerC1EP7QObject@Base 0.6.1
+ _ZN10QMirServerC2EP7QObject@Base 0.6.1
+ _ZN10QMirServerD0Ev@Base 0.6.1
+ _ZN10QMirServerD1Ev@Base 0.6.1
+ _ZN10QMirServerD2Ev@Base 0.6.1
+ (optional=templinst)_ZN10QMultiHashIKN5miral6WindowEPN5qtmir22WindowNotifierObserverEED1Ev@Base 0.6.1
+ (optional=templinst)_ZN10QMultiHashIKN5miral6WindowEPN5qtmir22WindowNotifierObserverEED2Ev@Base 0.6.1
+ _ZN11MirGLConfigD0Ev@Base 0.6.1
+ _ZN11MirGLConfigD1Ev@Base 0.6.1
+ _ZN11MirGLConfigD2Ev@Base 0.6.1
+ (optional=templinst)_ZN11QMetaTypeIdIN3Mir5StateEE14qt_metatype_idEv@Base 0.6.1
+ _ZN12QMutexLocker6unlockEv@Base 0.6.1
+#MISSING: 0.6.1-8# _ZN12QMutexLockerC1EP11QBasicMutex@Base 0.6.1
+#MISSING: 0.6.1-8# _ZN12QMutexLockerC2EP11QBasicMutex@Base 0.6.1
+ (optional=templinst)_ZN12QWeakPointerI10QMirServerED1Ev@Base 0.6.1
+ (optional=templinst)_ZN12QWeakPointerI10QMirServerED2Ev@Base 0.6.1
+ (optional=templinst)_ZN12QWeakPointerI7QObjectED1Ev@Base 0.6.1
+ (optional=templinst)_ZN12QWeakPointerI7QObjectED2Ev@Base 0.6.1
+ (optional=templinst)_ZN12QWeakPointerIN5qtmir7ScreensEED1Ev@Base 0.6.1
+ (optional=templinst)_ZN12QWeakPointerIN5qtmir7ScreensEED2Ev@Base 0.6.1
+ _ZN12QtCompositor11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN12QtCompositor11qt_metacastEPKc@Base 0.6.1
+ _ZN12QtCompositor16staticMetaObjectE@Base 0.6.1
+ _ZN12QtCompositor4stopEv@Base 0.8.0~git20230109.671f617
+ _ZN12QtCompositor5startEv@Base 0.8.0~git20230109.671f617
+ _ZN12QtCompositor8startingEv@Base 0.6.1
+ _ZN12QtCompositor8stoppingEv@Base 0.6.1
+ _ZN12QtCompositorD0Ev@Base 0.6.1
+ _ZN12QtCompositorD1Ev@Base 0.6.1
+ _ZN12QtCompositorD2Ev@Base 0.6.1
+ _ZN12ScreensModel11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN12ScreensModel11qt_metacastEPKc@Base 0.6.1
+ _ZN12ScreensModel11screenAddedEP14PlatformScreen@Base 0.6.1
+ _ZN12ScreensModel12haltRendererEv@Base 0.6.1
+ _ZN12ScreensModel13screenRemovedEP14PlatformScreen@Base 0.6.1
+ _ZN12ScreensModel13startRendererEv@Base 0.6.1
+ _ZN12ScreensModel14updateInternalEv@Base 0.7.1
+ _ZN12ScreensModel16findScreenWithIdERK5QListIP14PlatformScreenEN3mir10IntWrapperINS6_8graphics6detail23GraphicsConfOutputIdTagEiEE@Base 0.6.1
+ _ZN12ScreensModel16staticMetaObjectE@Base 0.6.1
+ _ZN12ScreensModel20onCompositorStartingEv@Base 0.6.1
+ _ZN12ScreensModel20onCompositorStoppingEv@Base 0.6.1
+ _ZN12ScreensModel23canUpdateExistingScreenEPK14PlatformScreenRKN3mir8graphics26DisplayConfigurationOutputE@Base 0.6.1
+ _ZN12ScreensModel4initERKSt10shared_ptrIN3mir8graphics7DisplayEERKS0_I12QtCompositorERKS0_IN6miroil22DisplayListenerWrapperEE@Base 0.8.0~git20230109.671f617
+#MISSING: 0.8.0~git20230109.671f617# _ZN12ScreensModel4initERKSt10shared_ptrIN3mir8graphics7DisplayEERKS0_I12QtCompositorERKS0_INS1_10compositor15DisplayListenerEE@Base 0.6.1
+ _ZN12ScreensModel6updateEv@Base 0.6.1
+ _ZN12ScreensModel9terminateEv@Base 0.6.1
+ _ZN12ScreensModelC1EP7QObject@Base 0.6.1
+ _ZN12ScreensModelC2EP7QObject@Base 0.6.1
+ _ZN12ScreensModelD0Ev@Base 0.6.1
+ _ZN12ScreensModelD1Ev@Base 0.6.1
+ _ZN12ScreensModelD2Ev@Base 0.6.1
+ _ZN13QtEventFeeder11dispatchKeyEPK16MirKeyboardEvent@Base 0.6.1
+ _ZN13QtEventFeeder13dispatchTouchEPK13MirTouchEvent@Base 0.6.1
+ _ZN13QtEventFeeder13validateTouchERN22QWindowSystemInterface10TouchPointE@Base 0.6.1
+ _ZN13QtEventFeeder15dispatchPointerEPK15MirPointerEvent@Base 0.6.1
+ _ZN13QtEventFeeder15touchesToStringERK5QListIN22QWindowSystemInterface10TouchPointEE@Base 0.6.1
+ _ZN13QtEventFeeder15validateTouchesEP7QWindowmR5QListIN22QWindowSystemInterface10TouchPointEE@Base 0.6.1
+ _ZN13QtEventFeeder22sendActiveTouchReleaseEP7QWindowmi@Base 0.6.1
+ _ZN13QtEventFeeder5eventEP6QEvent@Base 0.6.1
+ _ZN13QtEventFeeder8dispatchERK8MirEvent@Base 0.6.1
+ _ZN13QtEventFeederC1EPNS_23QtWindowSystemInterfaceE@Base 0.6.1
+ _ZN13QtEventFeederC1Ev@Base 0.6.1
+ _ZN13QtEventFeederC2EPNS_23QtWindowSystemInterfaceE@Base 0.6.1
+ _ZN13QtEventFeederC2Ev@Base 0.6.1
+ _ZN13QtEventFeederD0Ev@Base 0.6.1
+ _ZN13QtEventFeederD1Ev@Base 0.6.1
+ _ZN13QtEventFeederD2Ev@Base 0.6.1
+ _ZN13ScreenAdaptor11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN13ScreenAdaptor11qt_metacastEPKc@Base 0.6.1
+ _ZN13ScreenAdaptor14availableModesEv@Base 0.6.1
+ _ZN13ScreenAdaptor16staticMetaObjectE@Base 0.6.1
+ _ZN13ScreenAdaptor17updateScreenModesEv@Base 0.6.1
+ _ZN13ScreenAdaptor18applyConfigurationEPN5qtmir19ScreenConfigurationE@Base 0.6.1
+ _ZN13ScreenAdaptor9setActiveEb@Base 0.6.1
+ _ZN13ScreenAdaptorC1EP7QScreenP7QObject@Base 0.6.1
+ _ZN13ScreenAdaptorC2EP7QScreenP7QObject@Base 0.6.1
+ _ZN13ScreenAdaptorD0Ev@Base 0.6.1
+ _ZN13ScreenAdaptorD1Ev@Base 0.6.1
+ _ZN13ScreenAdaptorD2Ev@Base 0.6.1
+ _ZN14PlatformScreen11customEventEP6QEvent@Base 0.6.1
+ _ZN14PlatformScreen11doneCurrentEv@Base 0.6.1
+ _ZN14PlatformScreen11makeCurrentEv@Base 0.6.1
+ _ZN14PlatformScreen11modeChangedEv@Base 0.6.1
+ _ZN14PlatformScreen11nameChangedEv@Base 0.6.1
+ _ZN14PlatformScreen11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN14PlatformScreen11qt_metacastEPKc@Base 0.6.1
+ _ZN14PlatformScreen11swapBuffersEv@Base 0.6.1
+ _ZN14PlatformScreen11usedChangedEv@Base 0.6.1
+ _ZN14PlatformScreen12removeWindowEP20ScreenPlatformWindow@Base 0.6.1
+ _ZN14PlatformScreen12scaleChangedEv@Base 0.6.1
+ _ZN14PlatformScreen13activeChangedEb@Base 0.6.1
+ _ZN14PlatformScreen14destroyWindowsEv@Base 0.7.1
+ _ZN14PlatformScreen15positionChangedEv@Base 0.6.1
+ _ZN14PlatformScreen16powerModeChangedEv@Base 0.6.1
+ _ZN14PlatformScreen16staticMetaObjectE@Base 0.6.1
+ _ZN14PlatformScreen17formFactorChangedEv@Base 0.6.1
+ _ZN14PlatformScreen17outputTypeChangedEv@Base 0.6.1
+ _ZN14PlatformScreen18orientationChangedEv@Base 0.6.1
+ _ZN14PlatformScreen19physicalSizeChangedEv@Base 0.6.1
+ _ZN14PlatformScreen19setMirDisplayBufferEPN3mir8graphics13DisplayBufferEPNS1_16DisplaySyncGroupE@Base 0.6.1
+ _ZN14PlatformScreen20primaryWindowChangedEP20ScreenPlatformWindow@Base 0.6.1
+ _ZN14PlatformScreen21availableModesChangedEv@Base 0.6.1
+ _ZN14PlatformScreen23currentModeIndexChangedEv@Base 0.6.1
+ _ZN14PlatformScreen24orientationSensorEnabledEv@Base 0.6.1
+ _ZN14PlatformScreen26setMirDisplayConfigurationERKN3mir8graphics26DisplayConfigurationOutputEb@Base 0.6.1
+ _ZN14PlatformScreen27onOrientationReadingChangedEN19QOrientationReading11OrientationE@Base 0.6.1
+ _ZN14PlatformScreen8activateEv@Base 0.6.1
+ _ZN14PlatformScreen9addWindowEP20ScreenPlatformWindow@Base 0.6.1
+ _ZN14PlatformScreen9setActiveEb@Base 0.6.1
+ _ZN14PlatformScreenC1ERKN3mir8graphics26DisplayConfigurationOutputESt10shared_ptrI17OrientationSensorE@Base 0.6.1
+ _ZN14PlatformScreenC2ERKN3mir8graphics26DisplayConfigurationOutputESt10shared_ptrI17OrientationSensorE@Base 0.6.1
+ _ZN14PlatformScreenD0Ev@Base 0.6.1
+ _ZN14PlatformScreenD1Ev@Base 0.6.1
+ _ZN14PlatformScreenD2Ev@Base 0.6.1
+ (optional=templinst)_ZN14QSharedPointerI10QMirServerED1Ev@Base 0.6.1
+ (optional=templinst)_ZN14QSharedPointerI10QMirServerED2Ev@Base 0.6.1
+ (optional=templinst)_ZN14QSharedPointerIN5qtmir7ScreensEE5derefEPN15QtSharedPointer20ExternalRefCountDataE@Base 0.6.1
+ _ZN15MirServerThread11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN15MirServerThread11qt_metacastEPKc@Base 0.6.1
+ _ZN15MirServerThread16staticMetaObjectE@Base 0.6.1
+ _ZN15MirServerThread17waitForMirStartupEv@Base 0.6.1
+ _ZN15MirServerThread3runEv@Base 0.6.1
+ _ZN15MirServerThread7stoppedEv@Base 0.6.1
+ _ZN15MirServerThreadD0Ev@Base 0.6.1
+ _ZN15MirServerThreadD1Ev@Base 0.6.1
+ _ZN15MirServerThreadD2Ev@Base 0.6.1
+ _ZN15NativeInterface11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN15NativeInterface11qt_metacastEPKc@Base 0.6.1
+ _ZN15NativeInterface16staticMetaObjectE@Base 0.6.1
+ _ZN15NativeInterface17setWindowPropertyEP15QPlatformWindowRK7QStringRK8QVariant@Base 0.6.1
+ _ZN15NativeInterface23nativeResourceForScreenERK10QByteArrayP7QScreen@Base 0.7.1
+ _ZN15NativeInterface28nativeResourceForIntegrationERK10QByteArray@Base 0.6.1
+ _ZN15NativeInterfaceC1EP10QMirServer@Base 0.6.1
+ _ZN15NativeInterfaceC2EP10QMirServer@Base 0.6.1
+ _ZN15NativeInterfaceD0Ev@Base 0.6.1
+ _ZN15NativeInterfaceD1Ev@Base 0.6.1
+ _ZN15NativeInterfaceD2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst)_ZN15QVarLengthArrayIcLi32EEC1Ei@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst)_ZN15QVarLengthArrayIcLi32EEC2Ei@Base 0.6.1
+#MISSING: 0.6.1-8# _ZN15QtSharedPointer20ExternalRefCountDataD1Ev@Base 0.6.1
+#MISSING: 0.6.1-8# _ZN15QtSharedPointer20ExternalRefCountDataD2Ev@Base 0.6.1
+ (optional=templinst)_ZN15QtSharedPointer33ExternalRefCountWithCustomDeleterI10QMirServerNS_13NormalDeleterEE7deleterEPNS_20ExternalRefCountDataE@Base 0.6.1
+ (optional=templinst)_ZN15QtSharedPointer33ExternalRefCountWithCustomDeleterI17ScreensControllerNS_13NormalDeleterEE7deleterEPNS_20ExternalRefCountDataE@Base 0.6.1
+ (optional=templinst)_ZN15QtSharedPointer33ExternalRefCountWithCustomDeleterI18ScreenAdaptorModelNS_13NormalDeleterEE7deleterEPNS_20ExternalRefCountDataE@Base 0.6.1
+ (optional=templinst)_ZN15QtSharedPointer33ExternalRefCountWithCustomDeleterIN5qtmir6Cursor7PrivateENS_13NormalDeleterEE7deleterEPNS_20ExternalRefCountDataE@Base 0.6.1
+ _ZN15SurfaceObserver11nameChangedERK7QString@Base 0.6.1
+ _ZN15SurfaceObserver11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN15SurfaceObserver11qt_metacastEPKc@Base 0.6.1
+ _ZN15SurfaceObserver12framesPostedEv@Base 0.6.1
+ _ZN15SurfaceObserver13cursorChangedERK7QCursor@Base 0.6.1
+ _ZN15SurfaceObserver13hiddenChangedEb@Base 0.6.1
+ _ZN15SurfaceObserver16attributeChangedE15MirWindowAttribi@Base 0.6.1
+ _ZN15SurfaceObserver16staticMetaObjectE@Base 0.6.1
+ _ZN15SurfaceObserver18inputBoundsChangedERK5QRect@Base 0.6.1
+ _ZN15SurfaceObserver18observerForSurfaceEPKN3mir5scene7SurfaceE@Base 0.6.1
+ _ZN15SurfaceObserver18shellChromeChangedE14MirShellChrome@Base 0.6.1
+ _ZN15SurfaceObserver19maximumWidthChangedEi@Base 0.6.1
+ _ZN15SurfaceObserver19minimumWidthChangedEi@Base 0.6.1
+ _ZN15SurfaceObserver20maximumHeightChangedEi@Base 0.6.1
+ _ZN15SurfaceObserver20minimumHeightChangedEi@Base 0.6.1
+ _ZN15SurfaceObserver21widthIncrementChangedEi@Base 0.6.1
+ _ZN15SurfaceObserver22heightIncrementChangedEi@Base 0.6.1
+ _ZN15SurfaceObserver26notifySurfaceModificationsERKN5miral19WindowSpecificationE@Base 0.6.1
+ _ZN15SurfaceObserver26registerObserverForSurfaceEPS_PKN3mir5scene7SurfaceE@Base 0.6.1
+ _ZN15SurfaceObserver27confinesMousePointerChangedEb@Base 0.6.1
+ _ZN15SurfaceObserver7resizedERK5QSize@Base 0.6.1
+ _ZN15SurfaceObserverD0Ev@Base 0.6.1
+ _ZN15SurfaceObserverD1Ev@Base 0.6.1
+ _ZN15SurfaceObserverD2Ev@Base 0.6.1
+ _ZN16MirOpenGLContext11doneCurrentEv@Base 0.6.1
+ _ZN16MirOpenGLContext11makeCurrentEP16QPlatformSurface@Base 0.6.1
+ _ZN16MirOpenGLContext11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN16MirOpenGLContext11qt_metacastEPKc@Base 0.6.1
+ _ZN16MirOpenGLContext11swapBuffersEP16QPlatformSurface@Base 0.6.1
+ _ZN16MirOpenGLContext14getProcAddressEPKc@Base 0.6.1
+ _ZN16MirOpenGLContext16staticMetaObjectE@Base 0.6.1
+ _ZN16MirOpenGLContextC1ERN3mir8graphics7DisplayERNS1_8GLConfigERK14QSurfaceFormat@Base 0.6.1
+ _ZN16MirOpenGLContextC2ERN3mir8graphics7DisplayERNS1_8GLConfigERK14QSurfaceFormat@Base 0.6.1
+ _ZN16MirOpenGLContextD0Ev@Base 0.6.1
+ _ZN16MirOpenGLContextD1Ev@Base 0.6.1
+ _ZN16MirOpenGLContextD2Ev@Base 0.6.1
+ _ZN16OffscreenSurface9setBufferEP24QOpenGLFramebufferObject@Base 0.6.1
+ _ZN16OffscreenSurfaceC1EP17QOffscreenSurface@Base 0.6.1
+ _ZN16OffscreenSurfaceC2EP17QOffscreenSurface@Base 0.6.1
+ _ZN16OffscreenSurfaceD0Ev@Base 0.6.1
+ _ZN16OffscreenSurfaceD1Ev@Base 0.6.1
+ _ZN16OffscreenSurfaceD2Ev@Base 0.6.1
+ (optional=templinst)_ZN16QQmlListPropertyIN5qtmir10ScreenModeEE11qlist_clearEPS2_@Base 0.6.1
+ (optional=templinst)_ZN16QQmlListPropertyIN5qtmir10ScreenModeEE11qlist_countEPS2_@Base 0.6.1
+ _ZN16QQmlListPropertyIN5qtmir10ScreenModeEE11qslow_clearEPS2_@Base 0.6.1
+ (optional=templinst)_ZN16QQmlListPropertyIN5qtmir10ScreenModeEE12qlist_appendEPS2_PS1_@Base 0.6.1
+ _ZN16QQmlListPropertyIN5qtmir10ScreenModeEE13qslow_replaceEPS2_iPS1_@Base 0.6.1
+ _ZN16QQmlListPropertyIN5qtmir10ScreenModeEE16qslow_removeLastEPS2_@Base 0.6.1
+ (optional=templinst)_ZN16QQmlListPropertyIN5qtmir10ScreenModeEE8qlist_atEPS2_i@Base 0.6.1
+ _ZN17OrientationSensor11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN17OrientationSensor11qt_metacastEPKc@Base 0.6.1
+ _ZN17OrientationSensor13startIfNeededEv@Base 0.6.1
+ _ZN17OrientationSensor16staticMetaObjectE@Base 0.6.1
+ _ZN17OrientationSensor20onOrientationChangedEN19QOrientationReading11OrientationE@Base 0.6.1
+ _ZN17OrientationSensor20skipDBusRegistrationE@Base 0.6.1
+ _ZN17OrientationSensor26onDisplayPowerStateChangedEii@Base 0.6.1
+ _ZN17OrientationSensor4stopEv@Base 0.6.1
+ _ZN17OrientationSensor5startEv@Base 0.6.1
+ _ZN17OrientationSensor6enableEv@Base 0.6.1
+ _ZN17OrientationSensor7enabledEv@Base 0.6.1
+ _ZN17OrientationSensorC1EP7QObject@Base 0.6.1
+ _ZN17OrientationSensorC2EP7QObject@Base 0.6.1
+ _ZN17OrientationSensorD0Ev@Base 0.6.1
+ _ZN17OrientationSensorD1Ev@Base 0.6.1
+ _ZN17OrientationSensorD2Ev@Base 0.6.1
+ _ZN17QMirServerPrivate3runERKSt8functionIFvvEE@Base 0.6.1
+ _ZN17QMirServerPrivate4stopEv@Base 0.6.1
+ _ZN17QMirServerPrivateC1Ev@Base 0.6.1
+ _ZN17QMirServerPrivateC2Ev@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperI6QFlagsIN2Qt11MouseButtonEELb1EE8DestructEPv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperI6QFlagsIN2Qt11MouseButtonEELb1EE9ConstructEPvPKv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperI6QFlagsIN2Qt16KeyboardModifierEELb1EE8DestructEPv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperI6QFlagsIN2Qt16KeyboardModifierEELb1EE9ConstructEPvPKv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIN3Mir5StateELb1EE8DestructEPv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIN3Mir5StateELb1EE9ConstructEPvPKv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIN5miral10WindowInfoELb1EE8DestructEPv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIN5miral10WindowInfoELb1EE9ConstructEPvPKv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIN5miral15ApplicationInfoELb1EE8DestructEPv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIN5miral15ApplicationInfoELb1EE9ConstructEPvPKv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIN5qtmir10FormFactorELb1EE8DestructEPv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIN5qtmir10FormFactorELb1EE9ConstructEPvPKv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIN5qtmir11OutputTypesELb1EE8DestructEPv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIN5qtmir11OutputTypesELb1EE9ConstructEPvPKv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIN5qtmir13PromptSessionELb1EE8DestructEPv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIN5qtmir13PromptSessionELb1EE9ConstructEPvPKv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIN5qtmir9NewWindowELb1EE8DestructEPv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIN5qtmir9NewWindowELb1EE9ConstructEPvPKv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIP20ScreenPlatformWindowLb1EE8DestructEPv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIP20ScreenPlatformWindowLb1EE9ConstructEPvPKv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIPN5qtmir19ScreenConfigurationELb1EE8DestructEPv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperIPN5qtmir19ScreenConfigurationELb1EE9ConstructEPvPKv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperISt10shared_ptrIN3mir5scene7SessionEELb1EE8DestructEPv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperISt10shared_ptrIN3mir5scene7SessionEELb1EE9ConstructEPvPKv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperISt6vectorIN5miral6WindowESaIS3_EELb1EE8DestructEPv@Base 0.6.1
+ (optional=templinst)_ZN17QtMetaTypePrivate23QMetaTypeFunctionHelperISt6vectorIN5miral6WindowESaIS3_EELb1EE9ConstructEPvPKv@Base 0.6.1
+ _ZN17ScreensController11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN17ScreensController11qt_metacastEPKc@Base 0.6.1
+ _ZN17ScreensController13configurationEv@Base 0.6.1
+ _ZN17ScreensController16setConfigurationERK7QVectorIN5qtmir19ScreenConfigurationEE@Base 0.6.1
+ _ZN17ScreensController16staticMetaObjectE@Base 0.6.1
+ _ZN17ScreensController19outputConfigurationEN3mir10IntWrapperINS0_8graphics6detail23GraphicsConfOutputIdTagEiEE@Base 0.6.1
+ _ZN17ScreensController22setOutputConfigurationERKN5qtmir19ScreenConfigurationE@Base 0.6.1
+ _ZN17ScreensControllerC1ERKSt10shared_ptrI12ScreensModelERKS0_IN3mir8graphics7DisplayEERKS0_INS5_5shell30DisplayConfigurationControllerEEP7QObject@Base 0.6.1
+ _ZN17ScreensControllerC2ERKSt10shared_ptrI12ScreensModelERKS0_IN3mir8graphics7DisplayEERKS0_INS5_5shell30DisplayConfigurationControllerEEP7QObject@Base 0.6.1
+ _ZN17ScreensControllerD0Ev@Base 0.6.1
+ _ZN17ScreensControllerD1Ev@Base 0.6.1
+ _ZN17ScreensControllerD2Ev@Base 0.6.1
+ (optional=templinst)_ZN18QMetaTypeIdQObjectIP20ScreenPlatformWindowLi8EE14qt_metatype_idEv@Base 0.6.1
+ _ZN18ScreenAdaptorModel13onScreenAddedEP7QScreen@Base 0.6.1
+ _ZN18ScreenAdaptorModel15onScreenRemovedEP7QScreen@Base 0.6.1
+ _ZN18ScreenAdaptorModelC1EP7QObject@Base 0.6.1
+ _ZN18ScreenAdaptorModelC2EP7QObject@Base 0.6.1
+ _ZN18ScreenAdaptorModelD0Ev@Base 0.6.1
+ _ZN18ScreenAdaptorModelD1Ev@Base 0.6.1
+ _ZN18ScreenAdaptorModelD2Ev@Base 0.6.1
+ _ZN19InitialSurfaceSizes14sizeForSessionE@Base 0.6.1
+ _ZN19InitialSurfaceSizes3getEi@Base 0.6.1
+ _ZN19InitialSurfaceSizes3setEiRK5QSize@Base 0.6.1
+ _ZN19InitialSurfaceSizes5mutexE@Base 0.6.1
+ _ZN19InitialSurfaceSizes6removeEi@Base 0.6.1
+ _ZN20ScreenPlatformWindow10setExposedEb@Base 0.6.1
+ _ZN20ScreenPlatformWindow10setPrimaryEb@Base 0.6.1
+ _ZN20ScreenPlatformWindow10setVisibleEb@Base 0.6.1
+ _ZN20ScreenPlatformWindow11doneCurrentEv@Base 0.6.1
+ _ZN20ScreenPlatformWindow11makeCurrentEv@Base 0.6.1
+ _ZN20ScreenPlatformWindow11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN20ScreenPlatformWindow11qt_metacastEPKc@Base 0.6.1
+ _ZN20ScreenPlatformWindow11setGeometryERK5QRect@Base 0.6.1
+ _ZN20ScreenPlatformWindow11swapBuffersEv@Base 0.6.1
+ _ZN20ScreenPlatformWindow12updateExposeEv@Base 0.6.1
+ _ZN20ScreenPlatformWindow16staticMetaObjectE@Base 0.6.1
+ _ZN20ScreenPlatformWindow21requestActivateWindowEv@Base 0.6.1
+ _ZN20ScreenPlatformWindow9setActiveEb@Base 0.6.1
+ _ZN20ScreenPlatformWindow9setScreenEP15QPlatformScreen@Base 0.6.1
+ _ZN20ScreenPlatformWindowC1EP7QWindowb@Base 0.6.1
+ _ZN20ScreenPlatformWindowC2EP7QWindowb@Base 0.6.1
+ _ZN20ScreenPlatformWindowD0Ev@Base 0.6.1
+ _ZN20ScreenPlatformWindowD1Ev@Base 0.6.1
+ _ZN20ScreenPlatformWindowD2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN21PromptSessionListener11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN21PromptSessionListener11qt_metacastEPKc@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN21PromptSessionListener16staticMetaObjectE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN21PromptSessionListener19promptProviderAddedERKN5qtmir13PromptSessionERKSt10shared_ptrIN3mir5scene7SessionEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN21PromptSessionListener21promptProviderRemovedERKN5qtmir13PromptSessionERKSt10shared_ptrIN3mir5scene7SessionEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN21PromptSessionListener21promptSessionResumingERKN5qtmir13PromptSessionE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN21PromptSessionListener21promptSessionStartingERKN5qtmir13PromptSessionE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN21PromptSessionListener21promptSessionStoppingERKN5qtmir13PromptSessionE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN21PromptSessionListener23promptSessionSuspendingERKN5qtmir13PromptSessionE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN21PromptSessionListenerC1EP7QObject@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN21PromptSessionListenerC2EP7QObject@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN21PromptSessionListenerD0Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN21PromptSessionListenerD1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN21PromptSessionListenerD2Ev@Base 0.6.1
+ _ZN23OrientationReadingEvent6m_typeE@Base 0.6.1
+ _ZN23OrientationReadingEventD0Ev@Base 0.6.1
+ _ZN23OrientationReadingEventD1Ev@Base 0.6.1
+ _ZN23OrientationReadingEventD2Ev@Base 0.6.1
+ _ZN24MirMousePointerInterface11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN24MirMousePointerInterface11qt_metacastEPKc@Base 0.6.1
+ _ZN24MirMousePointerInterface16staticMetaObjectE@Base 0.6.1
+ _ZN24MirMousePointerInterface16themeNameChangedE7QString@Base 0.6.1
+ _ZN24MirMousePointerInterface17cursorNameChangedE7QString@Base 0.6.1
+ _ZN24WrappedSessionAuthorizer21connection_is_allowedERKN5miral22ApplicationCredentialsE@Base 0.6.1
+ _ZN24WrappedSessionAuthorizer21screencast_is_allowedERKN5miral22ApplicationCredentialsE@Base 0.6.1
+ _ZN24WrappedSessionAuthorizer25prompt_session_is_allowedERKN5miral22ApplicationCredentialsE@Base 0.6.1
+ _ZN24WrappedSessionAuthorizer26configure_input_is_allowedERKN5miral22ApplicationCredentialsE@Base 0.6.1
+ _ZN24WrappedSessionAuthorizer28configure_display_is_allowedERKN5miral22ApplicationCredentialsE@Base 0.6.1
+ _ZN24WrappedSessionAuthorizer39set_base_input_configuration_is_allowedERKN5miral22ApplicationCredentialsE@Base 0.6.1
+ _ZN24WrappedSessionAuthorizer41set_base_display_configuration_is_allowedERKN5miral22ApplicationCredentialsE@Base 0.6.1
+ (optional=templinst)_ZN24WrappedSessionAuthorizerC1ERKSt8functionIFSt10shared_ptrIN5qtmir17SessionAuthorizerEEvEE@Base 0.6.1
+ (optional=templinst)_ZN24WrappedSessionAuthorizerC2ERKSt8functionIFSt10shared_ptrIN5qtmir17SessionAuthorizerEEvEE@Base 0.6.1
+ _ZN24WrappedSessionAuthorizerD0Ev@Base 0.6.1
+ _ZN24WrappedSessionAuthorizerD1Ev@Base 0.6.1
+ _ZN24WrappedSessionAuthorizerD2Ev@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy10advise_endEv@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy10forceCloseERKN5miral6WindowE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy12advise_beginEv@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy12advise_raiseERKSt6vectorIN5miral6WindowESaIS2_EE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy12requestStateERKN5miral6WindowEN3Mir5StateE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN29WrappedWindowManagementPolicy13advise_resizeERKN5miral10WindowInfoERKN3mir8geometry4SizeE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy13advise_resizeERKN5miral10WindowInfoERKN3mir8geometry7generic4SizeIiEE@Base 0.8.0~git20230109.671f617
+#MISSING: 0.8.0~git20230109.671f617# _ZN29WrappedWindowManagementPolicy14advise_move_toERKN5miral10WindowInfoEN3mir8geometry5PointE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy14advise_move_toERKN5miral10WindowInfoEN3mir8geometry7generic5PointIiEE@Base 0.8.0~git20230109.671f617
+ _ZN29WrappedWindowManagementPolicy14advise_new_appERN5miral15ApplicationInfoE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy16place_new_windowERKN5miral15ApplicationInfoERKNS0_19WindowSpecificationE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy17advise_delete_appERKN5miral15ApplicationInfoE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy17advise_focus_lostERKN5miral10WindowInfoE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy17advise_new_windowERKN5miral10WindowInfoE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy18handle_touch_eventEPK13MirTouchEvent@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy18set_window_marginsE13MirWindowTypeRK8QMargins@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy19advise_focus_gainedERKN5miral10WindowInfoE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy19advise_state_changeERKN5miral10WindowInfoE14MirWindowState@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy19ask_client_to_closeERKN5miral6WindowE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy19deliver_touch_eventEPK13MirTouchEventRKN5miral6WindowE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy19handle_raise_windowERN5miral10WindowInfoE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy19handle_request_moveERN5miral10WindowInfoEPK13MirInputEvent@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy19handle_window_readyERN5miral10WindowInfoE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy20advise_delete_windowERKN5miral10WindowInfoE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy20advise_output_createERKN5miral6OutputE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy20advise_output_deleteERKN5miral6OutputE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy20advise_output_updateERKN5miral6OutputES3_@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy20handle_modify_windowERN5miral10WindowInfoERKNS0_19WindowSpecificationE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy20handle_pointer_eventEPK15MirPointerEvent@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy21deliver_pointer_eventEPK15MirPointerEventRKN5miral6WindowE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy21handle_keyboard_eventEPK16MirKeyboardEvent@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy21handle_request_resizeERN5miral10WindowInfoEPK13MirInputEvent13MirResizeEdge@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN29WrappedWindowManagementPolicy22confirm_inherited_moveERKN5miral10WindowInfoEN3mir8geometry12DisplacementE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy22confirm_inherited_moveERKN5miral10WindowInfoEN3mir8geometry7generic12DisplacementIiEE@Base 0.8.0~git20230109.671f617
+ _ZN29WrappedWindowManagementPolicy22deliver_keyboard_eventEPK16MirKeyboardEventRKN5miral6WindowE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy24move_window_to_workspaceERKN5miral6WindowERKSt10shared_ptrINS0_9WorkspaceEE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy26advise_adding_to_workspaceERKSt10shared_ptrIN5miral9WorkspaceEERKSt6vectorINS1_6WindowESaIS7_EE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy28confirm_placement_on_displayERKN5miral10WindowInfoE14MirWindowStateRKN3mir8geometry7generic9RectangleIiEE@Base 0.8.0~git20230109.671f617
+#MISSING: 0.8.0~git20230109.671f617# _ZN29WrappedWindowManagementPolicy28confirm_placement_on_displayERKN5miral10WindowInfoE14MirWindowStateRKN3mir8geometry9RectangleE@Base 0.6.1
+ (optional=templinst)_ZN29WrappedWindowManagementPolicy28for_each_window_in_workspaceERKSt10shared_ptrIN5miral9WorkspaceEERKSt8functionIFvRKNS1_6WindowEEE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy28handle_request_drag_and_dropERN5miral10WindowInfoE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy30advise_removing_from_workspaceERKSt10shared_ptrIN5miral9WorkspaceEERKSt6vectorINS1_6WindowESaIS7_EE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy30set_window_confinement_regionsERK7QVectorI5QRectE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy34move_worspace_content_to_workspaceERKSt10shared_ptrIN5miral9WorkspaceEES5_@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN29WrappedWindowManagementPolicy4moveERKN5miral6WindowEN3mir8geometry5PointE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy4moveERKN5miral6WindowEN3mir8geometry7generic5PointIiEE@Base 0.8.0~git20230109.671f617
+ _ZN29WrappedWindowManagementPolicy5raiseERKN5miral6WindowE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN29WrappedWindowManagementPolicy6resizeERKN5miral6WindowEN3mir8geometry4SizeE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicy6resizeERKN5miral6WindowEN3mir8geometry7generic4SizeIiEE@Base 0.8.0~git20230109.671f617
+ _ZN29WrappedWindowManagementPolicy8activateERKN5miral6WindowE@Base 0.6.1
+ (optional=templinst)_ZN29WrappedWindowManagementPolicyC1ERKN5miral18WindowManagerToolsERN5qtmir19WindowModelNotifierERNS4_16WindowControllerERNS4_19WorkspaceControllerERNS4_11AppNotifierESt10shared_ptrI12ScreensModelERKSD_I13QtEventFeederERKSt8functionIFSD_INS4_22WindowManagementPolicyEES3_SD_INS4_29WindowManagementPolicyPrivateEEEE@Base 0.6.1
+ (optional=templinst)_ZN29WrappedWindowManagementPolicyC2ERKN5miral18WindowManagerToolsERN5qtmir19WindowModelNotifierERNS4_16WindowControllerERNS4_19WorkspaceControllerERNS4_11AppNotifierESt10shared_ptrI12ScreensModelERKSD_I13QtEventFeederERKSt8functionIFSD_INS4_22WindowManagementPolicyEES3_SD_INS4_29WindowManagementPolicyPrivateEEEE@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicyD0Ev@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicyD1Ev@Base 0.6.1
+ _ZN29WrappedWindowManagementPolicyD2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserver11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserver11qt_metacastEPKc@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserver16staticMetaObjectE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserver20configurationAppliedERKSt10shared_ptrIKN3mir8graphics20DisplayConfigurationEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserver20configuration_failedERKSt10shared_ptrIKN3mir8graphics20DisplayConfigurationEERKSt9exception@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserver20initialConfigurationERKSt10shared_ptrIKN3mir8graphics20DisplayConfigurationEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserver21configuration_appliedERKSt10shared_ptrIKN3mir8graphics20DisplayConfigurationEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserver21initial_configurationERKSt10shared_ptrIKN3mir8graphics20DisplayConfigurationEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserver24baseConfigurationUpdatedERKSt10shared_ptrIKN3mir8graphics20DisplayConfigurationEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserver26base_configuration_updatedERKSt10shared_ptrIKN3mir8graphics20DisplayConfigurationEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserver29session_configuration_appliedERKSt10shared_ptrIN3mir5scene7SessionEERKS0_INS1_8graphics20DisplayConfigurationEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserver29session_configuration_removedERKSt10shared_ptrIN3mir5scene7SessionEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserver32catastrophic_configuration_errorERKSt10shared_ptrIKN3mir8graphics20DisplayConfigurationEERKSt9exception@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserver33configuration_updated_for_sessionERKSt10shared_ptrIN3mir5scene7SessionEERKS0_IKNS1_8graphics20DisplayConfigurationEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserverC1EP7QObject@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserverC2EP7QObject@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserverD0Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserverD1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN31MirDisplayConfigurationObserverD2Ev@Base 0.6.1
+ _ZN3Mir11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN3Mir11qt_metacastEPKc@Base 0.6.1
+ _ZN3Mir16staticMetaObjectE@Base 0.6.1
+ _ZN3Mir17cursorNameChangedERK7QString@Base 0.6.1
+ _ZN3Mir20currentKeymapChangedERK7QString@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN3mir5input6KeymapD1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN3mir5input6KeymapD2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN3mir8graphics11GammaCurvesD1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZN3mir8graphics11GammaCurvesD2Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZN3mir8graphics26DisplayConfigurationOutputC1ERKS1_@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN3mir8graphics26DisplayConfigurationOutputC2ERKS1_@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN3mir8graphics26DisplayConfigurationOutputD1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN3mir8graphics26DisplayConfigurationOutputD2Ev@Base 0.6.1
+ (optional=templinst)_ZN4QMapIi5QSizeE13detach_helperEv@Base 0.6.1
+ (optional=templinst)_ZN4QMapIi5QSizeED1Ev@Base 0.6.1
+ (optional=templinst)_ZN4QMapIi5QSizeED2Ev@Base 0.6.1
+ (optional=templinst)_ZN4QMapIi7QStringE13detach_helperEv@Base 0.6.1
+ (optional=templinst)_ZN4QMapIi7QStringEixERKi@Base 0.6.1
+ (optional=templinst)_ZN5QHashIKN5miral6WindowEPN5qtmir22WindowNotifierObserverEE11deleteNode2EPN9QHashData4NodeE@Base 0.6.1
+ (optional=templinst)_ZN5QHashIKN5miral6WindowEPN5qtmir22WindowNotifierObserverEE13detach_helperEv@Base 0.6.1
+ (optional=templinst)_ZN5QHashIKN5miral6WindowEPN5qtmir22WindowNotifierObserverEE13duplicateNodeEPN9QHashData4NodeEPv@Base 0.6.1
+ (optional=templinst)_ZN5QHashIKN5miral6WindowEPN5qtmir22WindowNotifierObserverEE5eraseENS6_14const_iteratorE@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !armhf)_ZN5QHashIKN5miral6WindowEPN5qtmir22WindowNotifierObserverEED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !armhf)_ZN5QHashIKN5miral6WindowEPN5qtmir22WindowNotifierObserverEED2Ev@Base 0.6.1
+ (optional=templinst)_ZN5QHashIP20ScreenPlatformWindowP14PlatformScreenE11deleteNode2EPN9QHashData4NodeE@Base 0.6.1
+ (optional=templinst)_ZN5QHashIP20ScreenPlatformWindowP14PlatformScreenE13duplicateNodeEPN9QHashData4NodeEPv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !armhf)_ZN5QHashIP20ScreenPlatformWindowP14PlatformScreenED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !armhf)_ZN5QHashIP20ScreenPlatformWindowP14PlatformScreenED2Ev@Base 0.6.1
+ (optional=templinst)_ZN5QHashIPKN3mir5scene13PromptSessionEN5qtmir13PromptSessionEE11deleteNode2EPN9QHashData4NodeE@Base 0.6.1
+ (optional=templinst)_ZN5QHashIPKN3mir5scene13PromptSessionEN5qtmir13PromptSessionEE13detach_helperEv@Base 0.6.1
+ (optional=templinst)_ZN5QHashIPKN3mir5scene13PromptSessionEN5qtmir13PromptSessionEE13duplicateNodeEPN9QHashData4NodeEPv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst)_ZN5QHashIPKN3mir5scene13PromptSessionEN5qtmir13PromptSessionEE6removeERKS4_@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !armhf)_ZN5QHashIPKN3mir5scene13PromptSessionEN5qtmir13PromptSessionEED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !armhf)_ZN5QHashIPKN3mir5scene13PromptSessionEN5qtmir13PromptSessionEED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst)_ZN5QHashIPKN3mir5scene13PromptSessionEN5qtmir13PromptSessionEEixERKS4_@Base 0.6.1
+ (optional=templinst)_ZN5QHashIPKN3mir5scene7SurfaceEP15SurfaceObserverE11deleteNode2EPN9QHashData4NodeE@Base 0.6.1
+ (optional=templinst)_ZN5QHashIPKN3mir5scene7SurfaceEP15SurfaceObserverE13detach_helperEv@Base 0.6.1
+ (optional=templinst)_ZN5QHashIPKN3mir5scene7SurfaceEP15SurfaceObserverE13duplicateNodeEPN9QHashData4NodeEPv@Base 0.6.1
+ (optional=templinst)_ZN5QHashIPKN3mir5scene7SurfaceEP15SurfaceObserverE5eraseENS7_14const_iteratorE@Base 0.6.1
+ (optional=templinst)_ZN5QHashIPKN3mir5scene7SurfaceEP15SurfaceObserverED1Ev@Base 0.6.1
+ (optional=templinst)_ZN5QHashIPKN3mir5scene7SurfaceEP15SurfaceObserverED2Ev@Base 0.6.1
+ (optional=templinst)_ZN5QHashIi15QHashDummyValueE11deleteNode2EPN9QHashData4NodeE@Base 0.6.1
+ (optional=templinst)_ZN5QHashIi15QHashDummyValueE13duplicateNodeEPN9QHashData4NodeEPv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !armhf)_ZN5QHashIi15QHashDummyValueED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !armhf)_ZN5QHashIi15QHashDummyValueED2Ev@Base 0.6.1
+ (optional=templinst)_ZN5QHashIiN22QWindowSystemInterface10TouchPointEE11deleteNode2EPN9QHashData4NodeE@Base 0.6.1
+ (optional=templinst)_ZN5QHashIiN22QWindowSystemInterface10TouchPointEE13detach_helperEv@Base 0.6.1
+ (optional=templinst)_ZN5QHashIiN22QWindowSystemInterface10TouchPointEE13duplicateNodeEPN9QHashData4NodeEPv@Base 0.6.1
+ (optional=templinst)_ZN5QHashIiN22QWindowSystemInterface10TouchPointEE5eraseENS2_14const_iteratorE@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !armhf)_ZN5QHashIiN22QWindowSystemInterface10TouchPointEED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !armhf)_ZN5QHashIiN22QWindowSystemInterface10TouchPointEED2Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListI5QPairId5QSizeEE18detach_helper_growEii@Base 0.6.1
+ (optional=templinst)_ZN5QListI5QPairId5QSizeEE6appendERKS2_@Base 0.6.1
+ (optional=templinst)_ZN5QListI5QPairId5QSizeEEC1ERKS3_@Base 0.6.1
+ (optional=templinst)_ZN5QListI5QPairId5QSizeEEC2ERKS3_@Base 0.6.1
+ (optional=templinst)_ZN5QListI5QPairId5QSizeEED1Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListI5QPairId5QSizeEED2Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListI7QStringED1Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListI7QStringED2Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListIN22QWindowSystemInterface10TouchPointEE13detach_helperEi@Base 0.6.1
+ (optional=templinst)_ZN5QListIN22QWindowSystemInterface10TouchPointEE18detach_helper_growEii@Base 0.6.1
+ (optional=templinst)_ZN5QListIN22QWindowSystemInterface10TouchPointEE6appendERKS1_@Base 0.6.1
+ (optional=templinst)_ZN5QListIN22QWindowSystemInterface10TouchPointEED1Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListIN22QWindowSystemInterface10TouchPointEED2Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListIP14PlatformScreenE18detach_helper_growEii@Base 0.6.1
+ (optional=templinst)_ZN5QListIP14PlatformScreenE6appendERKS1_@Base 0.6.1
+ (optional=templinst)_ZN5QListIP14PlatformScreenEC1ERKS2_@Base 0.6.1
+ (optional=templinst)_ZN5QListIP14PlatformScreenEC2ERKS2_@Base 0.6.1
+ (optional=templinst)_ZN5QListIP14PlatformScreenED1Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListIP14PlatformScreenED2Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListIP7QScreenED1Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListIP7QScreenED2Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListIP7QWindowEC1ERKS2_@Base 0.6.1
+ (optional=templinst)_ZN5QListIP7QWindowEC2ERKS2_@Base 0.6.1
+ (optional=templinst)_ZN5QListIP7QWindowED1Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListIP7QWindowED2Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListIPN5qtmir10ScreenModeEE18detach_helper_growEii@Base 0.6.1
+ (optional=templinst)_ZN5QListIPN5qtmir10ScreenModeEE6appendERKS2_@Base 0.6.1
+ (optional=templinst)_ZN5QListIPN5qtmir10ScreenModeEED1Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListIPN5qtmir10ScreenModeEED2Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListIPN5qtmir22WindowNotifierObserverEE18detach_helper_growEii@Base 0.6.1
+ (optional=templinst)_ZN5QListIPN5qtmir22WindowNotifierObserverEE6appendERKS2_@Base 0.6.1
+ (optional=templinst)_ZN5QListIPN5qtmir22WindowNotifierObserverEEC1ERKS3_@Base 0.6.1
+ (optional=templinst)_ZN5QListIPN5qtmir22WindowNotifierObserverEEC2ERKS3_@Base 0.6.1
+ (optional=templinst)_ZN5QListIPN5qtmir22WindowNotifierObserverEED1Ev@Base 0.6.1
+ (optional=templinst)_ZN5QListIPN5qtmir22WindowNotifierObserverEED2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral15GLTextureBuffer10setWrappedERKSt10shared_ptrIN3mir8graphics6BufferEE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral15GLTextureBuffer4typeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral15GLTextureBuffer8tex_bindEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral15GLTextureBufferC1ERKSt10shared_ptrIN3mir8graphics6BufferEE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral15GLTextureBufferC2ERKSt10shared_ptrIN3mir8graphics6BufferEE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral20PersistDisplayConfig4Self26base_configuration_updatedERKSt10shared_ptrIKN3mir8graphics20DisplayConfigurationEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral20PersistDisplayConfig4Self29session_configuration_appliedERKSt10shared_ptrIN3mir5scene7SessionEERKS2_INS3_8graphics20DisplayConfigurationEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral20PersistDisplayConfig4Self29session_configuration_removedERKSt10shared_ptrIN3mir5scene7SessionEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral20PersistDisplayConfig4SelfD0Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral20PersistDisplayConfig4SelfD1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral20PersistDisplayConfig4SelfD2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral20PersistDisplayConfigC1ERKS0_@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZN5miral20PersistDisplayConfigC1ERKSt10shared_ptrINS_27DisplayConfigurationStorageEERKSt8functionIFS1_INS_26DisplayConfigurationPolicyEEvEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral20PersistDisplayConfigC2ERKS0_@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZN5miral20PersistDisplayConfigC2ERKSt10shared_ptrINS_27DisplayConfigurationStorageEERKSt8functionIFS1_INS_26DisplayConfigurationPolicyEEvEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral20PersistDisplayConfigD1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral20PersistDisplayConfigD2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral20PersistDisplayConfigaSERKS0_@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral20PersistDisplayConfigclERN3mir6ServerE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral21GLTextureSourceBuffer10setWrappedERKSt10shared_ptrIN3mir8graphics6BufferEE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral21GLTextureSourceBuffer17upload_to_textureEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral21GLTextureSourceBuffer4typeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral21GLTextureSourceBufferC1ERKSt10shared_ptrIN3mir8graphics6BufferEE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral21GLTextureSourceBufferC2ERKSt10shared_ptrIN3mir8graphics6BufferEE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral26DisplayConfigurationPolicyC1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral26DisplayConfigurationPolicyC2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral4Edid10parse_dataERKSt6vectorIhSaIhEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral8GLBuffer10setWrappedERKSt10shared_ptrIN3mir8graphics6BufferEE@Base 0.7.0
+#MISSING: 0.7.0# _ZN5miral8GLBuffer15bind_to_textureEv@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral8GLBuffer15from_mir_bufferERKSt10shared_ptrIN3mir8graphics6BufferEE@Base 0.7.0
+#MISSING: 0.7.0# _ZN5miral8GLBuffer17secure_for_renderEv@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral8GLBuffer5emptyEv@Base 0.7.0
+#MISSING: 0.7.0# _ZN5miral8GLBuffer5resetERKSt10shared_ptrIN3mir8graphics6BufferEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral8GLBuffer5resetEv@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral8GLBufferC1ERKSt10shared_ptrIN3mir8graphics6BufferEE@Base 0.6.1
+#MISSING: 0.7.0# _ZN5miral8GLBufferC1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral8GLBufferC2ERKSt10shared_ptrIN3mir8graphics6BufferEE@Base 0.6.1
+#MISSING: 0.7.0# _ZN5miral8GLBufferC2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral8GLBufferD1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5miral8GLBufferD2Ev@Base 0.6.1
+ _ZN5qtmir10ScreenMode11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN5qtmir10ScreenMode11qt_metacastEPKc@Base 0.6.1
+ _ZN5qtmir10ScreenMode16staticMetaObjectE@Base 0.6.1
+ _ZN5qtmir10ScreenModeD0Ev@Base 0.6.1
+ _ZN5qtmir10ScreenModeD1Ev@Base 0.6.1
+ _ZN5qtmir10ScreenModeD2Ev@Base 0.6.1
+ _ZN5qtmir11AppNotifier10appRemovedERKN5miral15ApplicationInfoE@Base 0.6.1
+ _ZN5qtmir11AppNotifier11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN5qtmir11AppNotifier11qt_metacastEPKc@Base 0.6.1
+ _ZN5qtmir11AppNotifier16appCreatedWindowERKN5miral15ApplicationInfoE@Base 0.6.1
+ _ZN5qtmir11AppNotifier16staticMetaObjectE@Base 0.6.1
+ _ZN5qtmir11AppNotifier8appAddedERKN5miral15ApplicationInfoE@Base 0.6.1
+ _ZN5qtmir11AppNotifierD0Ev@Base 0.6.1
+ _ZN5qtmir11AppNotifierD1Ev@Base 0.6.1
+ _ZN5qtmir11AppNotifierD2Ev@Base 0.6.1
+ _ZN5qtmir11NamedCursorD0Ev@Base 0.6.1
+ _ZN5qtmir11NamedCursorD1Ev@Base 0.6.1
+ _ZN5qtmir11NamedCursorD2Ev@Base 0.6.1
+ _ZN5qtmir12EventBuilder10m_instanceE@Base 0.6.1
+ _ZN5qtmir12EventBuilder12makeMirEventE6QFlagsIN2Qt16KeyboardModifierEERK5QListIN11QTouchEvent10TouchPointEES1_INS2_15TouchPointStateEEm@Base 0.6.1
+ _ZN5qtmir12EventBuilder12makeMirEventEP11QInputEventiij@Base 0.6.1
+ _ZN5qtmir12EventBuilder12makeMirEventEP11QWheelEvent@Base 0.6.1
+ _ZN5qtmir12EventBuilder12makeMirEventEP9QKeyEvent@Base 0.6.1
+ _ZN5qtmir12EventBuilder19reconstructMirEventEP11QHoverEvent@Base 0.6.1
+ _ZN5qtmir12EventBuilder19reconstructMirEventEP11QMouseEvent@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir12EventBuilder5storeEPK13MirInputEventm@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir12EventBuilder8findInfoEm@Base 0.6.1
+ _ZN5qtmir12EventBuilder8instanceEv@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir12EventBuilder9EventInfo5storeEPK13MirInputEventm@Base 0.6.1
+ _ZN5qtmir12EventBuilderC1Ev@Base 0.6.1
+ _ZN5qtmir12EventBuilderC2Ev@Base 0.6.1
+ _ZN5qtmir12EventBuilderD0Ev@Base 0.6.1
+ _ZN5qtmir12EventBuilderD1Ev@Base 0.6.1
+ _ZN5qtmir12EventBuilderD2Ev@Base 0.6.1
+ _ZN5qtmir12getExtraInfoERKN5miral10WindowInfoE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir14MirServerHooks25createInputDeviceObserverEv@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir14MirServerHooksC1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir14MirServerHooksC2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir14MirServerHooksclERN3mir6ServerE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir15MirCursorImages5imageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN3mir8geometry4SizeE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir15MirCursorImagesD0Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir15MirCursorImagesD1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir15MirCursorImagesD2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir15SetQtCompositorC1ERKSt10shared_ptrI12ScreensModelE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir15SetQtCompositorC2ERKSt10shared_ptrI12ScreensModelE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir15SetQtCompositorD1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir15SetQtCompositorD2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir15SetQtCompositorclERN3mir6ServerE@Base 0.6.1
+ _ZN5qtmir16WindowController10forceCloseERKN5miral6WindowE@Base 0.6.1
+ _ZN5qtmir16WindowController12requestCloseERKN5miral6WindowE@Base 0.6.1
+ _ZN5qtmir16WindowController12requestStateERKN5miral6WindowEN3Mir5StateE@Base 0.6.1
+ _ZN5qtmir16WindowController16setWindowMarginsEN3Mir4TypeERK8QMargins@Base 0.6.1
+ _ZN5qtmir16WindowController17deliverTouchEventERKN5miral6WindowEPK13MirTouchEvent@Base 0.6.1
+ _ZN5qtmir16WindowController19deliverPointerEventERKN5miral6WindowEPK15MirPointerEvent@Base 0.6.1
+ _ZN5qtmir16WindowController20deliverKeyboardEventERKN5miral6WindowEPK16MirKeyboardEvent@Base 0.6.1
+ _ZN5qtmir16WindowController27setWindowConfinementRegionsERK7QVectorI5QRectE@Base 0.6.1
+ _ZN5qtmir16WindowController4moveERKN5miral6WindowERK6QPoint@Base 0.6.1
+ _ZN5qtmir16WindowController5raiseERKN5miral6WindowE@Base 0.6.1
+ _ZN5qtmir16WindowController6resizeERKN5miral6WindowERK5QSize@Base 0.6.1
+ _ZN5qtmir16WindowController8activateERKN5miral6WindowE@Base 0.6.1
+ _ZN5qtmir16WindowController9setPolicyEP29WrappedWindowManagementPolicy@Base 0.6.1
+ _ZN5qtmir16WindowControllerC1Ev@Base 0.6.1
+ _ZN5qtmir16WindowControllerC2Ev@Base 0.6.1
+ _ZN5qtmir16WindowControllerD0Ev@Base 0.6.1
+ _ZN5qtmir16WindowControllerD1Ev@Base 0.6.1
+ _ZN5qtmir16WindowControllerD2Ev@Base 0.6.1
+ _ZN5qtmir16get_screen_modelEv@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizer11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizer11qt_metacastEPKc@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizer16staticMetaObjectE@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizer19connectionIsAllowedERKN5miral22ApplicationCredentialsE@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizer19screencastIsAllowedERKN5miral22ApplicationCredentialsE@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizer22promptSessionIsAllowedERKN5miral22ApplicationCredentialsE@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizer23configureInputIsAllowedERKN5miral22ApplicationCredentialsE@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizer25configureDisplayIsAllowedERKN5miral22ApplicationCredentialsE@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizer30requestAuthorizationForSessionERKiRb@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizer34setBaseInputConfigurationIsAllowedERKN5miral22ApplicationCredentialsE@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizer36setBaseDisplayConfigurationIsAllowedERKN5miral22ApplicationCredentialsE@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizerC1Ev@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizerC2Ev@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizerD0Ev@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizerD1Ev@Base 0.6.1
+ _ZN5qtmir17SessionAuthorizerD2Ev@Base 0.6.1
+ (optional=templinst|arch=armel armhf m68k)_ZN5qtmir17compressTimestampINSt6chrono8durationImSt5ratioILx1ELx1000EEEEEET_NS2_IxS3_ILx1ELx1000000000EEEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir18dispatchInputEventERKN5miral6WindowEPK13MirInputEvent@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier11qt_metacastEPKc@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier11windowAddedERKNS_9NewWindowE@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier11windowMovedERKN5miral10WindowInfoE6QPoint@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier11windowReadyERKN5miral10WindowInfoE@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier13windowRemovedERKN5miral10WindowInfoE@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier13windowResizedERKN5miral10WindowInfoE5QSize@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier13windowsRaisedERKSt6vectorIN5miral6WindowESaIS3_EE@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier16staticMetaObjectE@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier18modificationsEndedEv@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier18windowFocusChangedERKN5miral10WindowInfoEb@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier18windowStateChangedERKN5miral10WindowInfoEN3Mir5StateE@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier20modificationsStartedEv@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier20windowRequestedRaiseERKN5miral10WindowInfoE@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier23windowsAddedToWorkspaceERKSt10shared_ptrIN5miral9WorkspaceEERKSt6vectorINS2_6WindowESaIS8_EE@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifier36windowsAboutToBeRemovedFromWorkspaceERKSt10shared_ptrIN5miral9WorkspaceEERKSt6vectorINS2_6WindowESaIS8_EE@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifierC1Ev@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifierC2Ev@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifierD0Ev@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifierD1Ev@Base 0.6.1
+ _ZN5qtmir19WindowModelNotifierD2Ev@Base 0.6.1
+ _ZN5qtmir19WorkspaceController21moveWindowToWorkspaceERKN5miral6WindowERKSt10shared_ptrINS1_9WorkspaceEE@Base 0.6.1
+ (optional=templinst)_ZN5qtmir19WorkspaceController24forEachWindowInWorkspaceERKSt10shared_ptrIN5miral9WorkspaceEERKSt8functionIFvRKNS2_6WindowEEE@Base 0.6.1
+ _ZN5qtmir19WorkspaceController31moveWorkspaceContentToWorkspaceERKSt10shared_ptrIN5miral9WorkspaceEES6_@Base 0.6.1
+ _ZN5qtmir19WorkspaceController9setPolicyEP29WrappedWindowManagementPolicy@Base 0.6.1
+ _ZN5qtmir19WorkspaceControllerC1Ev@Base 0.6.1
+ _ZN5qtmir19WorkspaceControllerC2Ev@Base 0.6.1
+ _ZN5qtmir19WorkspaceControllerD0Ev@Base 0.6.1
+ _ZN5qtmir19WorkspaceControllerD1Ev@Base 0.6.1
+ _ZN5qtmir19WorkspaceControllerD2Ev@Base 0.6.1
+ _ZN5qtmir20MirServerApplication11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN5qtmir20MirServerApplication11qt_metacastEPKc@Base 0.6.1
+ _ZN5qtmir20MirServerApplication16staticMetaObjectE@Base 0.6.1
+ _ZN5qtmir20MirServerApplication22screenAboutToBeRemovedEP7QScreen@Base 0.6.1
+ _ZN5qtmir20MirServerApplicationC1ERiPPcSt16initializer_listISt8functionIFvR10QMirServerEEE@Base 0.6.1
+ _ZN5qtmir20MirServerApplicationC2ERiPPcSt16initializer_listISt8functionIFvR10QMirServerEEE@Base 0.6.1
+ _ZN5qtmir20MirServerApplicationD0Ev@Base 0.6.1
+ _ZN5qtmir20MirServerApplicationD1Ev@Base 0.6.1
+ _ZN5qtmir20MirServerApplicationD2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir20OpenGLContextFactoryC1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir20OpenGLContextFactoryC2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir20OpenGLContextFactoryclERN3mir6ServerE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir20PromptSessionManagerC1ERKSt10shared_ptrIN3mir5scene20PromptSessionManagerEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir20PromptSessionManagerC2ERKSt10shared_ptrIN3mir5scene20PromptSessionManagerEE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir20PromptSessionManagerD0Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir20PromptSessionManagerD1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir20PromptSessionManagerD2Ev@Base 0.6.1
+ _ZN5qtmir21PromptSessionListener10suspendingERKSt10shared_ptrIN3mir5scene13PromptSessionEE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListener11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListener11qt_metacastEPKc@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListener16staticMetaObjectE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListener19promptProviderAddedERKNS_13PromptSessionERKSt10shared_ptrIN3mir5scene7SessionEE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListener21promptProviderRemovedERKNS_13PromptSessionERKSt10shared_ptrIN3mir5scene7SessionEE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListener21promptSessionResumingERKNS_13PromptSessionE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListener21promptSessionStartingERKNS_13PromptSessionE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListener21promptSessionStoppingERKNS_13PromptSessionE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListener21prompt_provider_addedERKN3mir5scene13PromptSessionERKSt10shared_ptrINS2_7SessionEE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListener23promptSessionSuspendingERKNS_13PromptSessionE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListener23prompt_provider_removedERKN3mir5scene13PromptSessionERKSt10shared_ptrINS2_7SessionEE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListener8resumingERKSt10shared_ptrIN3mir5scene13PromptSessionEE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListener8startingERKSt10shared_ptrIN3mir5scene13PromptSessionEE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListener8stoppingERKSt10shared_ptrIN3mir5scene13PromptSessionEE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListenerC1EP7QObject@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListenerC2EP7QObject@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListenerD0Ev@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListenerD1Ev@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir21PromptSessionListenerD2Ev@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir22MirInputDeviceObserver11applyKeymapEN6miroil11InputDeviceE@Base 0.8.0~git20230109.671f617
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir22MirInputDeviceObserver11applyKeymapERKSt10shared_ptrIN3mir5input6DeviceEE@Base 0.6.1
+ _ZN5qtmir22MirInputDeviceObserver11applyKeymapEv@Base 0.6.1
+ _ZN5qtmir22MirInputDeviceObserver11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN5qtmir22MirInputDeviceObserver11qt_metacastEPKc@Base 0.6.1
+ _ZN5qtmir22MirInputDeviceObserver12device_addedEN6miroil11InputDeviceE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir22MirInputDeviceObserver14device_removedEN6miroil11InputDeviceE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir22MirInputDeviceObserver16staticMetaObjectE@Base 0.6.1
+ _ZN5qtmir22MirInputDeviceObserver9setKeymapERK7QString@Base 0.6.1
+ _ZN5qtmir22MirInputDeviceObserverC1EP7QObject@Base 0.6.1
+ _ZN5qtmir22MirInputDeviceObserverC2EP7QObject@Base 0.6.1
+ _ZN5qtmir22MirInputDeviceObserverD0Ev@Base 0.6.1
+ _ZN5qtmir22MirInputDeviceObserverD1Ev@Base 0.6.1
+ _ZN5qtmir22MirInputDeviceObserverD2Ev@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy10advise_endEv@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy12advise_beginEv@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy12advise_raiseERKSt6vectorIN5miral6WindowESaIS3_EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir22WindowManagementPolicy13advise_resizeERKN5miral10WindowInfoERKN3mir8geometry4SizeE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy13advise_resizeERKN5miral10WindowInfoERKN3mir8geometry7generic4SizeIiEE@Base 0.8.0~git20230109.671f617
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir22WindowManagementPolicy14advise_move_toERKN5miral10WindowInfoEN3mir8geometry5PointE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy14advise_move_toERKN5miral10WindowInfoEN3mir8geometry7generic5PointIiEE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir22WindowManagementPolicy14advise_new_appERN5miral15ApplicationInfoE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy16place_new_windowERKN5miral15ApplicationInfoERKNS1_19WindowSpecificationE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy17advise_delete_appERKN5miral15ApplicationInfoE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy17advise_focus_lostERKN5miral10WindowInfoE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy17advise_new_windowERKN5miral10WindowInfoE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy18handle_touch_eventEPK13MirTouchEvent@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy19advise_focus_gainedERKN5miral10WindowInfoE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy19advise_state_changeERKN5miral10WindowInfoE14MirWindowState@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy19handle_raise_windowERN5miral10WindowInfoE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy19handle_request_moveERN5miral10WindowInfoEPK13MirInputEvent@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy19handle_window_readyERN5miral10WindowInfoE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy20advise_delete_windowERKN5miral10WindowInfoE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy20advise_output_createERKN5miral6OutputE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy20advise_output_deleteERKN5miral6OutputE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy20advise_output_updateERKN5miral6OutputES4_@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy20handle_modify_windowERN5miral10WindowInfoERKNS1_19WindowSpecificationE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy20handle_pointer_eventEPK15MirPointerEvent@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy21handle_keyboard_eventEPK16MirKeyboardEvent@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy21handle_request_resizeERN5miral10WindowInfoEPK13MirInputEvent13MirResizeEdge@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir22WindowManagementPolicy22confirm_inherited_moveERKN5miral10WindowInfoEN3mir8geometry12DisplacementE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy22confirm_inherited_moveERKN5miral10WindowInfoEN3mir8geometry7generic12DisplacementIiEE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir22WindowManagementPolicy26advise_adding_to_workspaceERKSt10shared_ptrIN5miral9WorkspaceEERKSt6vectorINS2_6WindowESaIS8_EE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy28confirm_placement_on_displayERKN5miral10WindowInfoE14MirWindowStateRKN3mir8geometry7generic9RectangleIiEE@Base 0.8.0~git20230109.671f617
+#MISSING: 0.8.0~git20230109.671f617# _ZN5qtmir22WindowManagementPolicy28confirm_placement_on_displayERKN5miral10WindowInfoE14MirWindowStateRKN3mir8geometry9RectangleE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy28handle_request_drag_and_dropERN5miral10WindowInfoE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicy30advise_removing_from_workspaceERKSt10shared_ptrIN5miral9WorkspaceEERKSt6vectorINS2_6WindowESaIS8_EE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicyC1ERKN5miral18WindowManagerToolsESt10shared_ptrINS_29WindowManagementPolicyPrivateEE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicyC2ERKN5miral18WindowManagerToolsESt10shared_ptrINS_29WindowManagementPolicyPrivateEE@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicyD0Ev@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicyD1Ev@Base 0.6.1
+ _ZN5qtmir22WindowManagementPolicyD2Ev@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserver11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserver11qt_metacastEPKc@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserver11windowMovedERK6QPoint@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserver11windowReadyEv@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserver13windowCreatedEv@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserver13windowRemovedEv@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserver13windowResizedERK5QSize@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserver16staticMetaObjectE@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserver18windowFocusChangedEb@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserver18windowStateChangedEN3Mir5StateE@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserver20windowRequestedRaiseEv@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserver24foreachObserverForWindowERKN5miral6WindowESt8functionIFvPS0_EE@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserverC1ERKN5miral6WindowE@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserverC2ERKN5miral6WindowE@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserverD0Ev@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserverD1Ev@Base 0.6.1
+ _ZN5qtmir22WindowNotifierObserverD2Ev@Base 0.6.1
+ (optional=templinst)_ZN5qtmir25BasicSetSessionAuthorizerC1ERKSt8functionIFSt10shared_ptrINS_17SessionAuthorizerEEvEE@Base 0.6.1
+ (optional=templinst)_ZN5qtmir25BasicSetSessionAuthorizerC2ERKSt8functionIFSt10shared_ptrINS_17SessionAuthorizerEEvEE@Base 0.6.1
+ _ZN5qtmir25BasicSetSessionAuthorizerclER10QMirServer@Base 0.6.1
+ _ZN5qtmir26DisplayConfigurationPolicy8apply_toERN3mir8graphics20DisplayConfigurationE@Base 0.6.1
+ _ZN5qtmir26DisplayConfigurationPolicyC1Ev@Base 0.6.1
+ _ZN5qtmir26DisplayConfigurationPolicyC2Ev@Base 0.6.1
+ _ZN5qtmir26DisplayConfigurationPolicyD0Ev@Base 0.6.1
+ _ZN5qtmir26DisplayConfigurationPolicyD1Ev@Base 0.6.1
+ _ZN5qtmir26DisplayConfigurationPolicyD2Ev@Base 0.6.1
+ (optional=templinst)_ZN5qtmir30BasicSetWindowManagementPolicyC1ERKSt8functionIFSt10shared_ptrINS_22WindowManagementPolicyEERKN5miral18WindowManagerToolsES2_INS_29WindowManagementPolicyPrivateEEEE@Base 0.6.1
+ (optional=templinst)_ZN5qtmir30BasicSetWindowManagementPolicyC2ERKSt8functionIFSt10shared_ptrINS_22WindowManagementPolicyEERKN5miral18WindowManagerToolsES2_INS_29WindowManagementPolicyPrivateEEEE@Base 0.6.1
+ _ZN5qtmir30BasicSetWindowManagementPolicyclER10QMirServer@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZN5qtmir34BasicSetDisplayConfigurationPolicyC1ERKSt8functionIFSt10shared_ptrIN5miral26DisplayConfigurationPolicyEEvEE@Base 0.6.1
+ (optional=templinst)_ZN5qtmir34BasicSetDisplayConfigurationPolicyC1ERKSt8functionIFSt10shared_ptrIN6miroil26DisplayConfigurationPolicyEERKS2_IN3mir8graphics26DisplayConfigurationPolicyEEEE@Base 0.8.0~git20230109.671f617
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZN5qtmir34BasicSetDisplayConfigurationPolicyC2ERKSt8functionIFSt10shared_ptrIN5miral26DisplayConfigurationPolicyEEvEE@Base 0.6.1
+ (optional=templinst)_ZN5qtmir34BasicSetDisplayConfigurationPolicyC2ERKSt8functionIFSt10shared_ptrIN6miroil26DisplayConfigurationPolicyEERKS2_IN3mir8graphics26DisplayConfigurationPolicyEEEE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir34BasicSetDisplayConfigurationPolicyclER10QMirServer@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZN5qtmir35BasicSetDisplayConfigurationStorageC1ERKSt8functionIFSt10shared_ptrIN5miral27DisplayConfigurationStorageEEvEE@Base 0.6.1
+ (optional=templinst)_ZN5qtmir35BasicSetDisplayConfigurationStorageC1ERKSt8functionIFSt10shared_ptrIN6miroil27DisplayConfigurationStorageEEvEE@Base 0.8.0~git20230109.671f617
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZN5qtmir35BasicSetDisplayConfigurationStorageC2ERKSt8functionIFSt10shared_ptrIN5miral27DisplayConfigurationStorageEEvEE@Base 0.6.1
+ (optional=templinst)_ZN5qtmir35BasicSetDisplayConfigurationStorageC2ERKSt8functionIFSt10shared_ptrIN6miroil27DisplayConfigurationStorageEEvEE@Base 0.8.0~git20230109.671f617
+ _ZN5qtmir35BasicSetDisplayConfigurationStorageclER10QMirServer@Base 0.6.1
+ _ZN5qtmir3Mir10m_instanceE@Base 0.6.1
+ _ZN5qtmir3Mir11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN5qtmir3Mir11qt_metacastEPKc@Base 0.6.1
+ _ZN5qtmir3Mir13setCursorNameERK7QString@Base 0.6.1
+ _ZN5qtmir3Mir16setCurrentKeymapERK7QString@Base 0.6.1
+ _ZN5qtmir3Mir16staticMetaObjectE@Base 0.6.1
+ _ZN5qtmir3Mir8instanceEv@Base 0.6.1
+ _ZN5qtmir3MirC1Ev@Base 0.6.1
+ _ZN5qtmir3MirC2Ev@Base 0.6.1
+ _ZN5qtmir3MirD0Ev@Base 0.6.1
+ _ZN5qtmir3MirD1Ev@Base 0.6.1
+ _ZN5qtmir3MirD2Ev@Base 0.6.1
+ _ZN5qtmir6Cursor11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN5qtmir6Cursor11qt_metacastEPKc@Base 0.6.1
+ _ZN5qtmir6Cursor12changeCursorEP7QCursorP7QWindow@Base 0.6.1
+ _ZN5qtmir6Cursor12pointerEventERK11QMouseEvent@Base 0.6.1
+ _ZN5qtmir6Cursor16staticMetaObjectE@Base 0.6.1
+ _ZN5qtmir6Cursor20registerMousePointerEP24MirMousePointerInterface@Base 0.6.1
+ _ZN5qtmir6Cursor22unregisterMousePointerEP24MirMousePointerInterface@Base 0.6.1
+ _ZN5qtmir6Cursor6setPosERK6QPoint@Base 0.6.1
+ _ZN5qtmir6Cursor7Private11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN5qtmir6Cursor7Private11qt_metacastEPKc@Base 0.6.1
+ _ZN5qtmir6Cursor7Private13cursorChangedERK7QCursorRK7QString@Base 0.6.1
+ _ZN5qtmir6Cursor7Private15setCustomCursorEP7QCursorRK7QString@Base 0.6.1
+ _ZN5qtmir6Cursor7Private16setMirCursorNameERK7QString@Base 0.6.1
+ _ZN5qtmir6Cursor7Private16staticMetaObjectE@Base 0.6.1
+ _ZN5qtmir6Cursor7Private21screenPositionChangedERK6QPoint@Base 0.6.1
+ _ZN5qtmir6Cursor7PrivateC1Ev@Base 0.6.1
+ _ZN5qtmir6Cursor7PrivateC2Ev@Base 0.6.1
+ _ZN5qtmir6Cursor7PrivateD0Ev@Base 0.6.1
+ _ZN5qtmir6Cursor7PrivateD1Ev@Base 0.6.1
+ _ZN5qtmir6Cursor7PrivateD2Ev@Base 0.6.1
+ _ZN5qtmir6CursorC1Ev@Base 0.6.1
+ _ZN5qtmir6CursorC2Ev@Base 0.6.1
+ _ZN5qtmir6CursorD0Ev@Base 0.6.1
+ _ZN5qtmir6CursorD1Ev@Base 0.6.1
+ _ZN5qtmir6CursorD2Ev@Base 0.6.1
+ _ZN5qtmir6Screen11nameChangedEv@Base 0.6.1
+ _ZN5qtmir6Screen11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN5qtmir6Screen11qt_metacastEPKc@Base 0.6.1
+ _ZN5qtmir6Screen11usedChangedEv@Base 0.6.1
+ _ZN5qtmir6Screen12scaleChangedEv@Base 0.6.1
+ _ZN5qtmir6Screen13activeChangedEb@Base 0.6.1
+ _ZN5qtmir6Screen15positionChangedEv@Base 0.6.1
+ _ZN5qtmir6Screen16powerModeChangedEv@Base 0.6.1
+ _ZN5qtmir6Screen16staticMetaObjectE@Base 0.6.1
+ _ZN5qtmir6Screen17formFactorChangedEv@Base 0.6.1
+ _ZN5qtmir6Screen17outputTypeChangedEv@Base 0.6.1
+ _ZN5qtmir6Screen18orientationChangedEv@Base 0.6.1
+ _ZN5qtmir6Screen19physicalSizeChangedEv@Base 0.6.1
+ _ZN5qtmir6Screen21availableModesChangedEv@Base 0.6.1
+ _ZN5qtmir6Screen23currentModeIndexChangedEv@Base 0.6.1
+ _ZN5qtmir7Screens11qt_metacallEN11QMetaObject4CallEiPPv@Base 0.6.1
+ _ZN5qtmir7Screens11qt_metacastEPKc@Base 0.6.1
+ _ZN5qtmir7Screens11screenAddedEPNS_6ScreenE@Base 0.6.1
+ _ZN5qtmir7Screens13screenRemovedEPNS_6ScreenE@Base 0.6.1
+ _ZN5qtmir7Screens16staticMetaObjectE@Base 0.6.1
+ _ZN5qtmir7Screens19activeScreenChangedEv@Base 0.6.1
+ _ZN5qtmir9NewWindowD1Ev@Base 0.6.1
+ _ZN5qtmir9NewWindowD2Ev@Base 0.6.1
+ _ZN5qtmir9ShellUuId6m_uuidE@Base 0.6.1
+ _ZN5qtmir9ShellUuId7m_mutexE@Base 0.6.1
+ _ZN5qtmir9ShellUuId8toStringEv@Base 0.6.1
+ _ZN6QDebuglsEPKc@Base 0.6.1
+ _ZN6miroil13SetCompositorD1Ev@Base 0.8.0~git20230109.671f617
+ _ZN6miroil13SetCompositorD2Ev@Base 0.8.0~git20230109.671f617
+#MISSING: 0.6.1-8# _ZN7QStringC1ERKS_@Base 0.6.1
+#MISSING: 0.6.1-8# _ZN7QStringC2ERKS_@Base 0.6.1
+ _ZN7QStringD1Ev@Base 0.6.1
+ _ZN7QStringD2Ev@Base 0.6.1
+#MISSING: 0.7.0-1# (optional=templinst|arch=!amd64 !arm64 !mips64el !ppc64el !sh4)_ZN7QVectorI5QRectEC1ERKS1_@Base 0.6.1
+#MISSING: 0.7.0-1# (optional=templinst|arch=!amd64 !arm64 !mips64el !ppc64el !sh4)_ZN7QVectorI5QRectEC2ERKS1_@Base 0.6.1
+ (optional=templinst)_ZN7QVectorI5QRectED1Ev@Base 0.6.1
+ (optional=templinst)_ZN7QVectorI5QRectED2Ev@Base 0.6.1
+ (optional=templinst|arch=!amd64 !arm64 !hppa !mips64el !ppc64 !ppc64el !riscv64 !s390x !sh4)_ZN7QVectorI7QPointFEC1ERKS1_@Base 0.6.1
+ (optional=templinst|arch=!amd64 !arm64 !hppa !mips64el !ppc64 !ppc64el !riscv64 !s390x !sh4)_ZN7QVectorI7QPointFEC2ERKS1_@Base 0.6.1
+ (optional=templinst)_ZN7QVectorI7QPointFED1Ev@Base 0.6.1
+ (optional=templinst)_ZN7QVectorI7QPointFED2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZN7QVectorIN5qtmir12EventBuilder9EventInfoEE7reallocEi6QFlagsIN10QArrayData16AllocationOptionEE@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !armhf)_ZN7QVectorIN5qtmir12EventBuilder9EventInfoEED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !armhf)_ZN7QVectorIN5qtmir12EventBuilder9EventInfoEED2Ev@Base 0.6.1
+ (optional=templinst)_ZN7QVectorIN5qtmir19ScreenConfigurationEE6appendEOS1_@Base 0.6.1
+ (optional=templinst)_ZN7QVectorIN5qtmir19ScreenConfigurationEE7reallocEi6QFlagsIN10QArrayData16AllocationOptionEE@Base 0.6.1
+#MISSING: 0.7.0-1# (optional=templinst|arch=!amd64)_ZN7QVectorIN5qtmir19ScreenConfigurationEEC1ERKS2_@Base 0.6.1
+#MISSING: 0.7.0-1# (optional=templinst|arch=!amd64)_ZN7QVectorIN5qtmir19ScreenConfigurationEEC2ERKS2_@Base 0.6.1
+ (optional=templinst)_ZN7QVectorIN5qtmir19ScreenConfigurationEED1Ev@Base 0.6.1
+ (optional=templinst)_ZN7QVectorIN5qtmir19ScreenConfigurationEED2Ev@Base 0.6.1
+ (optional=templinst)_ZN7QVectorIN6miroil11InputDeviceEE6appendERKS1_@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZN7QVectorIN6miroil11InputDeviceEE7reallocEi6QFlagsIN10QArrayData16AllocationOptionEE@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZN7QVectorIN6miroil11InputDeviceEED1Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZN7QVectorIN6miroil11InputDeviceEED2Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZN7QVectorIP20ScreenPlatformWindowE7reallocEi6QFlagsIN10QArrayData16AllocationOptionEE@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst)_ZN7QVectorIP20ScreenPlatformWindowEC1ERKS2_@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst)_ZN7QVectorIP20ScreenPlatformWindowEC2ERKS2_@Base 0.6.1
+ (optional=templinst)_ZN7QVectorIP20ScreenPlatformWindowED1Ev@Base 0.6.1
+ (optional=templinst)_ZN7QVectorIP20ScreenPlatformWindowED2Ev@Base 0.6.1
+ _ZN7QVectorIPN5qtmir10ScreenModeEE6appendEOS2_@Base 0.6.1
+ _ZN7QVectorIPN5qtmir10ScreenModeEE7reallocEi6QFlagsIN10QArrayData16AllocationOptionEE@Base 0.6.1
+ _ZN7QVectorIPN5qtmir10ScreenModeEE7reserveEi@Base 0.6.1
+ _ZN7QVectorIPN5qtmir10ScreenModeEED1Ev@Base 0.6.1
+ _ZN7QVectorIPN5qtmir10ScreenModeEED2Ev@Base 0.6.1
+ (optional=templinst)_ZN7QVectorIPN5qtmir6ScreenEE5eraseEPS2_S4_@Base 0.6.1
+ (optional=templinst)_ZN7QVectorIPN5qtmir6ScreenEE6appendEOS2_@Base 0.6.1
+ (optional=templinst)_ZN7QVectorIPN5qtmir6ScreenEE7reallocEi6QFlagsIN10QArrayData16AllocationOptionEE@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst)_ZN7QVectorIPN5qtmir6ScreenEEC1ERKS3_@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst)_ZN7QVectorIPN5qtmir6ScreenEEC2ERKS3_@Base 0.6.1
+ (optional=templinst)_ZN7QVectorIPN5qtmir6ScreenEED1Ev@Base 0.6.1
+ (optional=templinst)_ZN7QVectorIPN5qtmir6ScreenEED2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZN7QVectorISt10shared_ptrIN3mir5input6DeviceEEE6appendERKS4_@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZN7QVectorISt10shared_ptrIN3mir5input6DeviceEEE7reallocEi6QFlagsIN10QArrayData16AllocationOptionEE@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst)_ZN7QVectorISt10shared_ptrIN3mir5input6DeviceEEE9removeAllERKS4_@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst)_ZN7QVectorISt10shared_ptrIN3mir5input6DeviceEEEC1ERKS5_@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst)_ZN7QVectorISt10shared_ptrIN3mir5input6DeviceEEEC2ERKS5_@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZN7QVectorISt10shared_ptrIN3mir5input6DeviceEEED1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZN7QVectorISt10shared_ptrIN3mir5input6DeviceEEED2Ev@Base 0.6.1
+ (optional=templinst)_ZN8QMapDataIi7QStringE7destroyEv@Base 0.6.1
+ (optional=templinst)_ZN8QMapNodeIi7QStringE14destroySubTreeEv@Base 0.6.1
+ _ZN8Services12openDocumentERK4QUrl@Base 0.6.1
+ _ZN8Services14callDispatcherERK4QUrl@Base 0.6.1
+ _ZN8Services7openUrlERK4QUrl@Base 0.6.1
+ _ZN8ServicesD0Ev@Base 0.6.1
+ _ZN8ServicesD1Ev@Base 0.6.1
+ _ZN8ServicesD2Ev@Base 0.6.1
+ (optional=templinst)_ZN9QtPrivate11QSlotObjectIM10QMirServerFvvENS_4ListIJEEEvE4implEiPNS_15QSlotObjectBaseEP7QObjectPPvPb@Base 0.6.1
+ (optional=templinst)_ZN9QtPrivate11QSlotObjectIM12ScreensModelFvvENS_4ListIJEEEvE4implEiPNS_15QSlotObjectBaseEP7QObjectPPvPb@Base 0.6.1
+ (optional=templinst)_ZN9QtPrivate11QSlotObjectIM13ScreenAdaptorFvvENS_4ListIJEEEvE4implEiPNS_15QSlotObjectBaseEP7QObjectPPvPb@Base 0.6.1
+ (optional=templinst)_ZN9QtPrivate11QSlotObjectIM14PlatformScreenFvN19QOrientationReading11OrientationEENS_4ListIJS3_EEEvE4implEiPNS_15QSlotObjectBaseEP7QObjectPPvPb@Base 0.6.1
+ (optional=templinst)_ZN9QtPrivate11QSlotObjectIM18ScreenAdaptorModelFvP7QScreenENS_4ListIJS3_EEEvE4implEiPNS_15QSlotObjectBaseEP7QObjectPPvPb@Base 0.6.1
+ (optional=templinst)_ZN9QtPrivate11QSlotObjectIM20ScreenPlatformWindowFvbENS_4ListIJbEEEvE4implEiPNS_15QSlotObjectBaseEP7QObjectPPvPb@Base 0.6.1
+ (optional=templinst)_ZN9QtPrivate11QSlotObjectIM20ScreenPlatformWindowFvvENS_4ListIJEEEvE4implEiPNS_15QSlotObjectBaseEP7QObjectPPvPb@Base 0.6.1
+ (optional=templinst)_ZN9QtPrivate11QSlotObjectIMN5qtmir22MirInputDeviceObserverEFvRK7QStringENS_4ListIJS5_EEEvE4implEiPNS_15QSlotObjectBaseEP7QObjectPPvPb@Base 0.6.1
+ (optional=templinst)_ZN9QtPrivate11QSlotObjectIMN5qtmir6Cursor7PrivateEFvRK7QStringENS_4ListIJS6_EEEvE4implEiPNS_15QSlotObjectBaseEP7QObjectPPvPb@Base 0.6.1
+ (optional=templinst)_ZN9QtPrivate11QSlotObjectIMN5qtmir6ScreenEFvbENS_4ListIJbEEEvE4implEiPNS_15QSlotObjectBaseEP7QObjectPPvPb@Base 0.6.1
+ (optional=templinst)_ZN9QtPrivate11QSlotObjectIMN5qtmir6ScreenEFvvENS_4ListIJEEEvE4implEiPNS_15QSlotObjectBaseEP7QObjectPPvPb@Base 0.6.1
+ (optional=templinst)_ZN9QtPrivate11QSlotObjectIMN5qtmir7ScreensEFvvENS_4ListIJEEEvE4implEiPNS_15QSlotObjectBaseEP7QObjectPPvPb@Base 0.6.1
+ _ZN9QtPrivate17QForeachContainerI7QVectorIP20ScreenPlatformWindowEEC1ERKS4_@Base 0.6.1
+ _ZN9QtPrivate17QForeachContainerI7QVectorIP20ScreenPlatformWindowEEC2ERKS4_@Base 0.6.1
+ (optional=templinst)_ZN9QtPrivate24printSequentialContainerI7QVectorIPN5qtmir6ScreenEEEE6QDebugS6_PKcRKT_@Base 0.6.1
+ (arch=armel riscv64)_ZN9__gnu_cxx24__concurrence_lock_errorD0Ev@Base 0.7.0
+ (arch=armel riscv64)_ZN9__gnu_cxx24__concurrence_lock_errorD1Ev@Base 0.7.0
+ (arch=armel riscv64)_ZN9__gnu_cxx24__concurrence_lock_errorD2Ev@Base 0.7.0
+ (arch=armel riscv64)_ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev@Base 0.7.0
+ (arch=armel riscv64)_ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev@Base 0.7.0
+ (arch=armel riscv64)_ZN9__gnu_cxx26__concurrence_unlock_errorD2Ev@Base 0.7.0
+ _ZNK10QMirServer10metaObjectEv@Base 0.6.1
+ _ZNK10QMirServer11appNotifierEv@Base 0.6.1
+ _ZNK10QMirServer12screensModelEv@Base 0.6.1
+ _ZNK10QMirServer19windowModelNotifierEv@Base 0.6.1
+ _ZNK10QMirServer23thePromptSessionManagerEv@Base 0.6.1
+ _ZNK10QMirServer27createPlatformOpenGLContextEP14QOpenGLContext@Base 0.6.1
+ _ZNK10QMirServer28nativeResourceForIntegrationERK10QByteArray@Base 0.6.1
+ _ZNK10QMirServer9isRunningEv@Base 0.6.1
+ _ZNK11MirGLConfig17depth_buffer_bitsEv@Base 0.6.1
+ _ZNK11MirGLConfig19stencil_buffer_bitsEv@Base 0.6.1
+ _ZNK12QtCompositor10metaObjectEv@Base 0.6.1
+ _ZNK12ScreensModel10metaObjectEv@Base 0.6.1
+ _ZNK12ScreensModel12createScreenERKN3mir8graphics26DisplayConfigurationOutputE@Base 0.6.1
+ _ZNK13ScreenAdaptor10formFactorEv@Base 0.6.1
+ _ZNK13ScreenAdaptor10metaObjectEv@Base 0.6.1
+ _ZNK13ScreenAdaptor10outputTypeEv@Base 0.6.1
+ _ZNK13ScreenAdaptor11orientationEv@Base 0.6.1
+ _ZNK13ScreenAdaptor12physicalSizeEv@Base 0.6.1
+ _ZNK13ScreenAdaptor16currentModeIndexEv@Base 0.6.1
+ _ZNK13ScreenAdaptor18beginConfigurationEv@Base 0.6.1
+ _ZNK13ScreenAdaptor4nameEv@Base 0.6.1
+ _ZNK13ScreenAdaptor4usedEv@Base 0.6.1
+ _ZNK13ScreenAdaptor5scaleEv@Base 0.6.1
+ _ZNK13ScreenAdaptor7qscreenEv@Base 0.6.1
+ _ZNK13ScreenAdaptor8isActiveEv@Base 0.6.1
+ _ZNK13ScreenAdaptor8positionEv@Base 0.6.1
+ _ZNK13ScreenAdaptor9displayIdEv@Base 0.6.1
+ _ZNK13ScreenAdaptor9powerModeEv@Base 0.6.1
+ _ZNK14PlatformScreen10metaObjectEv@Base 0.6.1
+ _ZNK14PlatformScreen10topLevelAtERK6QPoint@Base 0.6.1
+ _ZNK14PlatformScreen11orientationEv@Base 0.6.1
+ _ZNK14PlatformScreen11refreshRateEv@Base 0.6.1
+ _ZNK14PlatformScreen12physicalSizeEv@Base 0.6.1
+ _ZNK14PlatformScreen13primaryWindowEv@Base 0.6.1
+ _ZNK14PlatformScreen14availableModesEv@Base 0.6.1
+ _ZNK14PlatformScreen15internalDisplayEv@Base 0.6.1
+ _ZNK14PlatformScreen16devicePixelRatioEv@Base 0.6.1
+ _ZNK14PlatformScreen17nativeOrientationEv@Base 0.6.1
+ _ZNK14PlatformScreen4nameEv@Base 0.6.1
+ _ZNK14PlatformScreen5depthEv@Base 0.6.1
+ _ZNK14PlatformScreen6cursorEv@Base 0.6.1
+ _ZNK14PlatformScreen6formatEv@Base 0.6.1
+ _ZNK14PlatformScreen8geometryEv@Base 0.6.1
+ _ZNK15MirServerThread10metaObjectEv@Base 0.6.1
+ _ZNK15NativeInterface10metaObjectEv@Base 0.6.1
+ _ZNK15NativeInterface23thePromptSessionManagerEv@Base 0.6.1
+ _ZNK15QPlatformScreen13isPlaceholderEv@Base 0.6.1
+ _ZNK15QPlatformScreen17availableGeometryEv@Base 0.6.1
+ _ZNK15QPlatformWindow15isForeignWindowEv@Base 0.6.1
+ _ZNK15SurfaceObserver10metaObjectEv@Base 0.6.1
+ _ZNK16MirOpenGLContext10metaObjectEv@Base 0.6.1
+ _ZNK16MirOpenGLContext6formatEv@Base 0.6.1
+ _ZNK16MirOpenGLContext9isSharingEv@Base 0.6.1
+ _ZNK16OffscreenSurface6bufferEv@Base 0.6.1
+ _ZNK16OffscreenSurface6formatEv@Base 0.6.1
+ _ZNK16OffscreenSurface7isValidEv@Base 0.6.1
+ _ZNK17OrientationSensor10metaObjectEv@Base 0.6.1
+ _ZNK17QMirServerPrivate20promptSessionManagerEv@Base 0.6.1
+ _ZNK17QMirServerPrivate21promptSessionListenerEv@Base 0.6.1
+ _ZNK17QMirServerPrivate24theApplicationAuthorizerEv@Base 0.6.1
+ _ZNK17QMirServerPrivate27createPlatformOpenGLContextEP14QOpenGLContext@Base 0.6.1
+ _ZNK17ScreensController10metaObjectEv@Base 0.6.1
+ _ZNK18ScreenAdaptorModel12activeScreenEv@Base 0.6.1
+ _ZNK18ScreenAdaptorModel7screensEv@Base 0.6.1
+ _ZNK20ScreenPlatformWindow10metaObjectEv@Base 0.6.1
+ _ZNK20ScreenPlatformWindow5winIdEv@Base 0.6.1
+ _ZNK20ScreenPlatformWindow8isActiveEv@Base 0.6.1
+ _ZNK20ScreenPlatformWindow9isExposedEv@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZNK21PromptSessionListener10metaObjectEv@Base 0.6.1
+ _ZNK22QPlatformOpenGLContext7isValidEv@Base 0.6.1
+ _ZNK24MirMousePointerInterface10metaObjectEv@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZNK31MirDisplayConfigurationObserver10metaObjectEv@Base 0.6.1
+ _ZNK3Mir10metaObjectEv@Base 0.6.1
+ (optional=templinst)_ZNK5QHashIKN5miral6WindowEPN5qtmir22WindowNotifierObserverEE8findNodeERS2_j@Base 0.6.1
+ (optional=templinst)_ZNK5QHashIPKN3mir5scene13PromptSessionEN5qtmir13PromptSessionEE8findNodeERKS4_j@Base 0.6.1
+ (optional=templinst)_ZNK5QHashIPKN3mir5scene7SurfaceEP15SurfaceObserverE8findNodeERKS4_j@Base 0.6.1
+ (optional=templinst)_ZNK5QHashIiN22QWindowSystemInterface10TouchPointEE6valuesEv@Base 0.6.1
+ (optional=templinst)_ZNK5QListI5QPairId5QSizeEEeqERKS3_@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZNK5miral4Edid10Descriptor12string_valueB5cxx11Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZNK5miral8GLBuffer17has_alpha_channelEv@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZNK5miral8GLBuffer4sizeEv@Base 0.6.1
+#MISSING: 0.7.0# _ZNK5miral8GLBuffercvbEv@Base 0.6.1
+ _ZNK5qtmir10ScreenMode10metaObjectEv@Base 0.6.1
+ _ZNK5qtmir11AppNotifier10metaObjectEv@Base 0.6.1
+ _ZNK5qtmir11NamedCursor12as_argb_8888Ev@Base 0.6.1
+ _ZNK5qtmir11NamedCursor4sizeEv@Base 0.6.1
+ _ZNK5qtmir11NamedCursor7hotspotEv@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZNK5qtmir14MirServerHooks13theMirDisplayEv@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZNK5qtmir14MirServerHooks17theInputDeviceHubEv@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZNK5qtmir14MirServerHooks21promptSessionListenerEv@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZNK5qtmir14MirServerHooks23createScreensControllerERKSt10shared_ptrI12ScreensModelE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZNK5qtmir14MirServerHooks23thePromptSessionManagerEv@Base 0.6.1
+ _ZNK5qtmir17SessionAuthorizer10metaObjectEv@Base 0.6.1
+ _ZNK5qtmir19WindowModelNotifier10metaObjectEv@Base 0.6.1
+ _ZNK5qtmir20MirServerApplication10metaObjectEv@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZNK5qtmir20OpenGLContextFactory27createPlatformOpenGLContextE14QSurfaceFormatRN3mir8graphics7DisplayE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZNK5qtmir20PromptSessionManager14applicationForERKNS_13PromptSessionE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZNK5qtmir20PromptSessionManager17stopPromptSessionERKNS_13PromptSessionE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZNK5qtmir20PromptSessionManager19resumePromptSessionERKNS_13PromptSessionE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZNK5qtmir20PromptSessionManager20suspendPromptSessionERKNS_13PromptSessionE@Base 0.6.1
+ _ZNK5qtmir21PromptSessionListener10metaObjectEv@Base 0.8.0~git20230109.671f617
+ _ZNK5qtmir22MirInputDeviceObserver10metaObjectEv@Base 0.6.1
+ _ZNK5qtmir22WindowNotifierObserver10metaObjectEv@Base 0.6.1
+ _ZNK5qtmir25BasicSetSessionAuthorizer7builderEv@Base 0.6.1
+ _ZNK5qtmir30BasicSetWindowManagementPolicy7builderEv@Base 0.6.1
+ _ZNK5qtmir35BasicSetDisplayConfigurationStorage7builderEv@Base 0.6.1
+ _ZNK5qtmir3Mir10cursorNameEv@Base 0.6.1
+ _ZNK5qtmir3Mir10metaObjectEv@Base 0.6.1
+ _ZNK5qtmir3Mir13currentKeymapEv@Base 0.6.1
+ _ZNK5qtmir6Cursor10metaObjectEv@Base 0.6.1
+ _ZNK5qtmir6Cursor3posEv@Base 0.6.1
+ _ZNK5qtmir6Cursor7Private10metaObjectEv@Base 0.6.1
+ _ZNK5qtmir6Screen10metaObjectEv@Base 0.6.1
+ _ZNK5qtmir7Screens10metaObjectEv@Base 0.6.1
+ (optional=templinst)_ZNK8QMapNodeIi5QSizeE4copyEP8QMapDataIiS0_E@Base 0.6.1
+ (optional=templinst)_ZNK8QMapNodeIi7QStringE4copyEP8QMapDataIiS0_E@Base 0.6.1
+ (arch=armel riscv64)_ZNK9__gnu_cxx24__concurrence_lock_error4whatEv@Base 0.7.0
+ (arch=armel riscv64)_ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv@Base 0.7.0
+ (optional=templinst)_ZNSt10unique_ptrIN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_EED1Ev@Base 0.6.1
+ (optional=templinst)_ZNSt10unique_ptrIN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_EED2Ev@Base 0.6.1
+ (optional=templinst)_ZNSt12_Vector_baseIhSaIhEED1Ev@Base 0.6.1
+ (optional=templinst)_ZNSt12_Vector_baseIhSaIhEED2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZNSt12_Vector_baseItSaItEED1Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZNSt12_Vector_baseItSaItEED2Ev@Base 0.6.1
+ _ZNSt14_Function_baseD1Ev@Base 0.6.1
+ _ZNSt14_Function_baseD2Ev@Base 0.6.1
+#MISSING: 0.7.0-1# (optional=templinst|arch=armel)_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE1EEC1IN3mir8graphics20DisplayConfigurationESt14default_deleteIS6_EEEOSt10unique_ptrIT_T0_E@Base 0.6.1
+#MISSING: 0.7.0-1# (optional=templinst|arch=armel)_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE1EEC2IN3mir8graphics20DisplayConfigurationESt14default_deleteIS6_EEEOSt10unique_ptrIT_T0_E@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel)_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1IN3mir8graphics20DisplayConfigurationESt14default_deleteIS6_EEEOSt10unique_ptrIT_T0_E@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel)_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2IN3mir8graphics20DisplayConfigurationESt14default_deleteIS6_EEEOSt10unique_ptrIT_T0_E@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIDnLN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIDnLN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE1EE10_M_releaseEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv@Base 0.6.1
+ (arch=amd64 arm64 m68k mips64el ppc64 ppc64el s390x)_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZNSt17_Function_handlerIFSt10shared_ptrIN5miral21ApplicationAuthorizerEEvEZNS1_24SetApplicationAuthorizerI24WrappedSessionAuthorizerEC4IJFS0_IN5qtmir17SessionAuthorizerEEvEEEEDpRKT_EUlvE_E10_M_managerERSt9_Any_dataRKSJ_St18_Manager_operation@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFSt10shared_ptrIN5miral21ApplicationAuthorizerEEvEZNS1_24SetApplicationAuthorizerI24WrappedSessionAuthorizerEC4IJFS0_IN5qtmir17SessionAuthorizerEEvEEEEDpRKT_EUlvE_E9_M_invokeERKSt9_Any_data@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFSt10shared_ptrIN5miral21ApplicationAuthorizerEEvEZNS1_24SetApplicationAuthorizerI24WrappedSessionAuthorizerEC4IJSt8functionIFS0_IN5qtmir17SessionAuthorizerEEvEEEEEDpRKT_EUlvE_E10_M_managerERSt9_Any_dataRKSL_St18_Manager_operation@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFSt10shared_ptrIN5miral21ApplicationAuthorizerEEvEZNS1_24SetApplicationAuthorizerI24WrappedSessionAuthorizerEC4IJSt8functionIFS0_IN5qtmir17SessionAuthorizerEEvEEEEEDpRKT_EUlvE_E9_M_invokeERKSt9_Any_data@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZNSt17_Function_handlerIFSt10shared_ptrIN5miral26DisplayConfigurationPolicyEEvEPS4_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZNSt17_Function_handlerIFSt10shared_ptrIN5miral26DisplayConfigurationPolicyEEvEPS4_E9_M_invokeERKSt9_Any_data@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZNSt17_Function_handlerIFSt10shared_ptrIN5miral27DisplayConfigurationStorageEEvEPS4_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZNSt17_Function_handlerIFSt10shared_ptrIN5miral27DisplayConfigurationStorageEEvEPS4_E9_M_invokeERKSt9_Any_data@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFSt10shared_ptrIN5qtmir17SessionAuthorizerEEvEPS4_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFSt10shared_ptrIN5qtmir17SessionAuthorizerEEvEPS4_E9_M_invokeERKSt9_Any_data@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFSt10shared_ptrIN5qtmir22WindowManagementPolicyEERKN5miral18WindowManagerToolsES0_INS1_29WindowManagementPolicyPrivateEEEPSA_E10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFSt10shared_ptrIN5qtmir22WindowManagementPolicyEERKN5miral18WindowManagerToolsES0_INS1_29WindowManagementPolicyPrivateEEEPSA_E9_M_invokeERKSt9_Any_dataS7_OS9_@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFSt10shared_ptrIN6miroil27DisplayConfigurationStorageEEvEPS4_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZNSt17_Function_handlerIFSt10shared_ptrIN6miroil27DisplayConfigurationStorageEEvEPS4_E9_M_invokeERKSt9_Any_data@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZNSt17_Function_handlerIFSt10unique_ptrIN5miral22WindowManagementPolicyESt14default_deleteIS2_EERKNS1_18WindowManagerToolsEEZNS1_28set_window_management_policyI29WrappedWindowManagementPolicyJN5qtmir19WindowModelNotifierENSC_16WindowControllerENSC_19WorkspaceControllerENSC_11AppNotifierEKSt10shared_ptrI12ScreensModelESH_I13QtEventFeederESt8functionIFSH_INSC_22WindowManagementPolicyEES8_SH_INSC_29WindowManagementPolicyPrivateEEEEEEENS1_25SetWindowManagementPolicyEDpRT0_EUlS8_E_E10_M_managerERSt9_Any_dataRKS10_St18_Manager_operation@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFSt10unique_ptrIN5miral22WindowManagementPolicyESt14default_deleteIS2_EERKNS1_18WindowManagerToolsEEZNS1_28set_window_management_policyI29WrappedWindowManagementPolicyJN5qtmir19WindowModelNotifierENSC_16WindowControllerENSC_19WorkspaceControllerENSC_11AppNotifierEKSt10shared_ptrI12ScreensModelESH_I13QtEventFeederESt8functionIFSH_INSC_22WindowManagementPolicyEES8_SH_INSC_29WindowManagementPolicyPrivateEEEEEEENS1_25SetWindowManagementPolicyEDpRT0_EUlS8_E_E9_M_invokeERKSt9_Any_dataS8_@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5miral13SetTerminatorEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5miral13SetTerminatorEE9_M_invokeERKSt9_Any_dataS2_@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5miral15AddInitCallbackEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5miral15AddInitCallbackEE9_M_invokeERKSt9_Any_dataS2_@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5miral20PersistDisplayConfigEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5miral20PersistDisplayConfigEE9_M_invokeERKSt9_Any_dataS2_@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5miral24SetApplicationAuthorizerI24WrappedSessionAuthorizerEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5miral24SetApplicationAuthorizerI24WrappedSessionAuthorizerEEE9_M_invokeERKSt9_Any_dataS2_@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5miral25SetWindowManagementPolicyEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5miral25SetWindowManagementPolicyEE9_M_invokeERKSt9_Any_dataS2_@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5qtmir14MirServerHooksEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5qtmir14MirServerHooksEE9_M_invokeERKSt9_Any_dataS2_@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5qtmir15SetQtCompositorEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5qtmir15SetQtCompositorEE9_M_invokeERKSt9_Any_dataS2_@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5qtmir20OpenGLContextFactoryEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN5qtmir20OpenGLContextFactoryEE9_M_invokeERKSt9_Any_dataS2_@Base 0.6.1
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN6miroil13OpenGLContextEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN6miroil13OpenGLContextEE9_M_invokeERKSt9_Any_dataS2_@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN6miroil13SetCompositorEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN6miroil13SetCompositorEE9_M_invokeERKSt9_Any_dataS2_@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN6miroil14MirServerHooksEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN6miroil14MirServerHooksEE9_M_invokeERKSt9_Any_dataS2_@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN6miroil20PersistDisplayConfigEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZNSt17_Function_handlerIFvRN3mir6ServerEEN6miroil20PersistDisplayConfigEE9_M_invokeERKSt9_Any_dataS2_@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel riscv64)_ZNSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+ (optional=templinst|arch=!armel !riscv64)_ZNSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.8.0~git20230109.671f617
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.8.0~git20230109.671f617
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.6.1
+#MISSING: 0.7.0# (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.6.1
+#MISSING: 0.7.0-3# (optional=templinst|arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.6.1
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.7.0
+ (optional=templinst|arch=armel riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.7.0
+ (arch=!armel !riscv64)_ZNSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.7.0
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_destroyEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EE10_M_disposeEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EE14_M_get_deleterERKSt9type_info@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EED0Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EED1Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EED2Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst|arch=!armel)_ZNSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EED2Ev@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZNSt6vectorISt10shared_ptrIN5miral9WorkspaceEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_@Base 0.6.1
+ (optional=templinst)_ZNSt6vectorISt10shared_ptrIN5miral9WorkspaceEESaIS3_EED1Ev@Base 0.6.1
+ (optional=templinst)_ZNSt6vectorISt10shared_ptrIN5miral9WorkspaceEESaIS3_EED2Ev@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|subst)_ZNSt6vectorIhSaIhEE17_M_default_appendE{size_t}@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=amd64 arm64)_ZNSt7__cxx119to_stringEm@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=!mipsel)_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_@Base 0.7.1-2
+ _ZTI10QMirServer@Base 0.6.1
+ _ZTI11MirGLConfig@Base 0.6.1
+ _ZTI12QtCompositor@Base 0.6.1
+ _ZTI12ScreensModel@Base 0.6.1
+ _ZTI13QtEventFeeder@Base 0.6.1
+ _ZTI13ScreenAdaptor@Base 0.6.1
+ _ZTI14PlatformScreen@Base 0.6.1
+ _ZTI15MirServerThread@Base 0.6.1
+ _ZTI15NativeInterface@Base 0.6.1
+ _ZTI15SurfaceObserver@Base 0.6.1
+ _ZTI16MirOpenGLContext@Base 0.6.1
+ _ZTI16OffscreenSurface@Base 0.6.1
+ _ZTI17MirPlatformCursor@Base 0.6.1
+ _ZTI17OrientationSensor@Base 0.6.1
+ _ZTI17ScreensController@Base 0.6.1
+ _ZTI18ScreenAdaptorModel@Base 0.6.1
+ _ZTI20ScreenPlatformWindow@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTI21PromptSessionListener@Base 0.6.1
+ _ZTI23OrientationReadingEvent@Base 0.6.1
+ _ZTI24MirMousePointerInterface@Base 0.6.1
+ _ZTI24WrappedSessionAuthorizer@Base 0.6.1
+ _ZTI29WrappedWindowManagementPolicy@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTI31MirDisplayConfigurationObserver@Base 0.6.1
+ _ZTI3Mir@Base 0.6.1
+ _ZTI8Services@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIFSt10shared_ptrIN5miral26DisplayConfigurationPolicyEEvE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIFSt10shared_ptrIN5miral27DisplayConfigurationStorageEEvE@Base 0.6.1
+ _ZTIFSt10shared_ptrIN5qtmir17SessionAuthorizerEEvE@Base 0.6.1
+ _ZTIFSt10shared_ptrIN5qtmir22WindowManagementPolicyEERKN5miral18WindowManagerToolsES_INS0_29WindowManagementPolicyPrivateEEE@Base 0.6.1
+ _ZTIFSt10shared_ptrIN6miroil27DisplayConfigurationStorageEEvE@Base 0.8.0~git20230109.671f617
+ _ZTIN13QtEventFeeder23QtWindowSystemInterfaceE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN3mir10compositor10CompositorE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN3mir5input12CursorImagesE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN3mir5input19InputDeviceObserverE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN3mir5scene21PromptSessionListenerE@Base 0.6.1
+ _ZTIN3mir8graphics11CursorImageE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN3mir8graphics13NativeDisplayE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN3mir8graphics16NativeBufferBaseE@Base 0.6.1
+ _ZTIN3mir8graphics19NativeDisplayBufferE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN3mir8graphics26DisplayConfigurationPolicyE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN3mir8graphics28DisplayConfigurationObserverE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN3mir8graphics6CursorE@Base 0.6.1
+ _ZTIN3mir8graphics8GLConfigE@Base 0.6.1
+ _ZTIN3mir8renderer2gl12RenderTargetE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN3mir8renderer2gl13ContextSourceE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN3mir8renderer2gl13TextureSourceE@Base 0.6.1
+ _ZTIN5miral13SetTerminatorE@Base 0.6.1
+ _ZTIN5miral15AddInitCallbackE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN5miral15GLTextureBufferE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN5miral20PersistDisplayConfig4SelfE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN5miral20PersistDisplayConfigE@Base 0.6.1
+ _ZTIN5miral21ApplicationAuthorizerE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN5miral21GLTextureSourceBufferE@Base 0.7.0
+ _ZTIN5miral24SetApplicationAuthorizerI24WrappedSessionAuthorizerEE@Base 0.6.1
+ _ZTIN5miral25SetWindowManagementPolicyE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN5miral26DisplayConfigurationPolicyE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN5miral27DisplayConfigurationStorageE@Base 0.6.1
+ _ZTIN5miral29BasicSetApplicationAuthorizerE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN5miral8GLBufferE@Base 0.7.0
+ _ZTIN5qtmir10ScreenModeE@Base 0.6.1
+ _ZTIN5qtmir11AppNotifierE@Base 0.6.1
+ _ZTIN5qtmir11NamedCursorE@Base 0.6.1
+ _ZTIN5qtmir12EventBuilderE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN5qtmir14MirServerHooksE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN5qtmir15MirCursorImagesE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN5qtmir15SetQtCompositorE@Base 0.6.1
+ _ZTIN5qtmir16WindowControllerE@Base 0.6.1
+ _ZTIN5qtmir17SessionAuthorizerE@Base 0.6.1
+ _ZTIN5qtmir19WindowModelNotifierE@Base 0.6.1
+ _ZTIN5qtmir19WorkspaceControllerE@Base 0.6.1
+ _ZTIN5qtmir20MirServerApplicationE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN5qtmir20OpenGLContextFactoryE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIN5qtmir20PromptSessionManagerE@Base 0.6.1
+ _ZTIN5qtmir21PromptSessionListenerE@Base 0.8.0~git20230109.671f617
+ _ZTIN5qtmir22MirInputDeviceObserverE@Base 0.6.1
+ _ZTIN5qtmir22WindowManagementPolicyE@Base 0.6.1
+ _ZTIN5qtmir22WindowNotifierObserverE@Base 0.6.1
+ _ZTIN5qtmir25WindowControllerInterfaceE@Base 0.6.1
+ _ZTIN5qtmir26DisplayConfigurationPolicyE@Base 0.6.1
+ _ZTIN5qtmir28WorkspaceControllerInterfaceE@Base 0.6.1
+ _ZTIN5qtmir3MirE@Base 0.6.1
+ _ZTIN5qtmir6Cursor7PrivateE@Base 0.6.1
+ _ZTIN5qtmir6CursorE@Base 0.6.1
+ _ZTIN5qtmir6ScreenE@Base 0.6.1
+ _ZTIN5qtmir7ScreensE@Base 0.6.1
+ _ZTIN6miroil13OpenGLContextE@Base 0.8.0~git20230109.671f617
+ _ZTIN6miroil13SetCompositorE@Base 0.8.0~git20230109.671f617
+ _ZTIN6miroil14MirServerHooksE@Base 0.8.0~git20230109.671f617
+ _ZTIN6miroil20PersistDisplayConfigE@Base 0.8.0~git20230109.671f617
+ _ZTIN6miroil27DisplayConfigurationStorageE@Base 0.8.0~git20230109.671f617
+ (arch=armel riscv64)_ZTIN9__gnu_cxx24__concurrence_lock_errorE@Base 0.7.0
+ (arch=armel riscv64)_ZTIN9__gnu_cxx26__concurrence_unlock_errorE@Base 0.7.0
+ (arch=armel riscv64)_ZTIN9__gnu_cxx7__mutexE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZTIPFSt10shared_ptrIN5miral26DisplayConfigurationPolicyEEvE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTIPFSt10shared_ptrIN5miral27DisplayConfigurationStorageEEvE@Base 0.6.1
+ _ZTIPFSt10shared_ptrIN5qtmir17SessionAuthorizerEEvE@Base 0.6.1
+ _ZTIPFSt10shared_ptrIN5qtmir22WindowManagementPolicyEERKN5miral18WindowManagerToolsES_INS0_29WindowManagementPolicyPrivateEEE@Base 0.6.1
+ _ZTIPFSt10shared_ptrIN6miroil27DisplayConfigurationStorageEEvE@Base 0.8.0~git20230109.671f617
+ (arch=armel riscv64)_ZTISt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel armhf)_ZTISt14default_deleteIN3mir8graphics20DisplayConfigurationEE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel armhf)_ZTISt19_Sp_make_shared_tag@Base 0.6.1
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+ (arch=armel)_ZTISt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTISt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+ (arch=armel)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+ (arch=armel)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTISt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+ (arch=armel)_ZTISt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTISt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+ (arch=armel)_ZTISt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTISt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+ (arch=armel)_ZTISt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTISt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+ _ZTIZN5miral24SetApplicationAuthorizerI24WrappedSessionAuthorizerEC4IJFSt10shared_ptrIN5qtmir17SessionAuthorizerEEvEEEEDpRKT_EUlvE_@Base 0.6.1
+ _ZTIZN5miral24SetApplicationAuthorizerI24WrappedSessionAuthorizerEC4IJSt8functionIFSt10shared_ptrIN5qtmir17SessionAuthorizerEEvEEEEEDpRKT_EUlvE_@Base 0.6.1
+ _ZTIZN5miral28set_window_management_policyI29WrappedWindowManagementPolicyJN5qtmir19WindowModelNotifierENS2_16WindowControllerENS2_19WorkspaceControllerENS2_11AppNotifierEKSt10shared_ptrI12ScreensModelES7_I13QtEventFeederESt8functionIFS7_INS2_22WindowManagementPolicyEERKNS_18WindowManagerToolsES7_INS2_29WindowManagementPolicyPrivateEEEEEEENS_25SetWindowManagementPolicyEDpRT0_EUlSI_E_@Base 0.6.1
+ _ZTS10QMirServer@Base 0.6.1
+ _ZTS11MirGLConfig@Base 0.6.1
+ _ZTS12QtCompositor@Base 0.6.1
+ _ZTS12ScreensModel@Base 0.6.1
+ _ZTS13QtEventFeeder@Base 0.6.1
+ _ZTS13ScreenAdaptor@Base 0.6.1
+ _ZTS14PlatformScreen@Base 0.6.1
+ _ZTS15MirServerThread@Base 0.6.1
+ _ZTS15NativeInterface@Base 0.6.1
+ _ZTS15SurfaceObserver@Base 0.6.1
+ _ZTS16MirOpenGLContext@Base 0.6.1
+ _ZTS16OffscreenSurface@Base 0.6.1
+ _ZTS17MirPlatformCursor@Base 0.6.1
+ _ZTS17OrientationSensor@Base 0.6.1
+ _ZTS17ScreensController@Base 0.6.1
+ _ZTS18ScreenAdaptorModel@Base 0.6.1
+ _ZTS20ScreenPlatformWindow@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTS21PromptSessionListener@Base 0.6.1
+ _ZTS23OrientationReadingEvent@Base 0.6.1
+ _ZTS24MirMousePointerInterface@Base 0.6.1
+ _ZTS24WrappedSessionAuthorizer@Base 0.6.1
+ _ZTS29WrappedWindowManagementPolicy@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTS31MirDisplayConfigurationObserver@Base 0.6.1
+ _ZTS3Mir@Base 0.6.1
+ _ZTS8Services@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSFSt10shared_ptrIN5miral26DisplayConfigurationPolicyEEvE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSFSt10shared_ptrIN5miral27DisplayConfigurationStorageEEvE@Base 0.6.1
+ _ZTSFSt10shared_ptrIN5qtmir17SessionAuthorizerEEvE@Base 0.6.1
+ _ZTSFSt10shared_ptrIN5qtmir22WindowManagementPolicyEERKN5miral18WindowManagerToolsES_INS0_29WindowManagementPolicyPrivateEEE@Base 0.6.1
+ _ZTSFSt10shared_ptrIN6miroil27DisplayConfigurationStorageEEvE@Base 0.8.0~git20230109.671f617
+ _ZTSN13QtEventFeeder23QtWindowSystemInterfaceE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN3mir10compositor10CompositorE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN3mir5input12CursorImagesE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN3mir5input19InputDeviceObserverE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN3mir5scene21PromptSessionListenerE@Base 0.6.1
+ _ZTSN3mir8graphics11CursorImageE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN3mir8graphics13NativeDisplayE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN3mir8graphics16NativeBufferBaseE@Base 0.6.1
+ _ZTSN3mir8graphics19NativeDisplayBufferE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN3mir8graphics26DisplayConfigurationPolicyE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN3mir8graphics28DisplayConfigurationObserverE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN3mir8graphics6CursorE@Base 0.6.1
+ _ZTSN3mir8graphics8GLConfigE@Base 0.6.1
+ _ZTSN3mir8renderer2gl12RenderTargetE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN3mir8renderer2gl13ContextSourceE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN3mir8renderer2gl13TextureSourceE@Base 0.6.1
+ _ZTSN5miral13SetTerminatorE@Base 0.6.1
+ _ZTSN5miral15AddInitCallbackE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN5miral15GLTextureBufferE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN5miral20PersistDisplayConfig4SelfE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN5miral20PersistDisplayConfigE@Base 0.6.1
+ _ZTSN5miral21ApplicationAuthorizerE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN5miral21GLTextureSourceBufferE@Base 0.7.0
+ _ZTSN5miral24SetApplicationAuthorizerI24WrappedSessionAuthorizerEE@Base 0.6.1
+ _ZTSN5miral25SetWindowManagementPolicyE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN5miral26DisplayConfigurationPolicyE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN5miral27DisplayConfigurationStorageE@Base 0.6.1
+ _ZTSN5miral29BasicSetApplicationAuthorizerE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN5miral8GLBufferE@Base 0.7.0
+ _ZTSN5qtmir10ScreenModeE@Base 0.6.1
+ _ZTSN5qtmir11AppNotifierE@Base 0.6.1
+ _ZTSN5qtmir11NamedCursorE@Base 0.6.1
+ _ZTSN5qtmir12EventBuilderE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN5qtmir14MirServerHooksE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN5qtmir15MirCursorImagesE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN5qtmir15SetQtCompositorE@Base 0.6.1
+ _ZTSN5qtmir16WindowControllerE@Base 0.6.1
+ _ZTSN5qtmir17SessionAuthorizerE@Base 0.6.1
+ _ZTSN5qtmir19WindowModelNotifierE@Base 0.6.1
+ _ZTSN5qtmir19WorkspaceControllerE@Base 0.6.1
+ _ZTSN5qtmir20MirServerApplicationE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN5qtmir20OpenGLContextFactoryE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSN5qtmir20PromptSessionManagerE@Base 0.6.1
+ _ZTSN5qtmir21PromptSessionListenerE@Base 0.8.0~git20230109.671f617
+ _ZTSN5qtmir22MirInputDeviceObserverE@Base 0.6.1
+ _ZTSN5qtmir22WindowManagementPolicyE@Base 0.6.1
+ _ZTSN5qtmir22WindowNotifierObserverE@Base 0.6.1
+ _ZTSN5qtmir25WindowControllerInterfaceE@Base 0.6.1
+ _ZTSN5qtmir26DisplayConfigurationPolicyE@Base 0.6.1
+ _ZTSN5qtmir28WorkspaceControllerInterfaceE@Base 0.6.1
+ _ZTSN5qtmir3MirE@Base 0.6.1
+ _ZTSN5qtmir6Cursor7PrivateE@Base 0.6.1
+ _ZTSN5qtmir6CursorE@Base 0.6.1
+ _ZTSN5qtmir6ScreenE@Base 0.6.1
+ _ZTSN5qtmir7ScreensE@Base 0.6.1
+ _ZTSN6miroil13OpenGLContextE@Base 0.8.0~git20230109.671f617
+ _ZTSN6miroil13SetCompositorE@Base 0.8.0~git20230109.671f617
+ _ZTSN6miroil14MirServerHooksE@Base 0.8.0~git20230109.671f617
+ _ZTSN6miroil20PersistDisplayConfigE@Base 0.8.0~git20230109.671f617
+ _ZTSN6miroil27DisplayConfigurationStorageE@Base 0.8.0~git20230109.671f617
+ (arch=armel riscv64)_ZTSN9__gnu_cxx24__concurrence_lock_errorE@Base 0.7.0
+ (arch=armel riscv64)_ZTSN9__gnu_cxx26__concurrence_unlock_errorE@Base 0.7.0
+ (arch=armel riscv64)_ZTSN9__gnu_cxx7__mutexE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZTSPFSt10shared_ptrIN5miral26DisplayConfigurationPolicyEEvE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTSPFSt10shared_ptrIN5miral27DisplayConfigurationStorageEEvE@Base 0.6.1
+ _ZTSPFSt10shared_ptrIN5qtmir17SessionAuthorizerEEvE@Base 0.6.1
+ _ZTSPFSt10shared_ptrIN5qtmir22WindowManagementPolicyEERKN5miral18WindowManagerToolsES_INS0_29WindowManagementPolicyPrivateEEE@Base 0.6.1
+ _ZTSPFSt10shared_ptrIN6miroil27DisplayConfigurationStorageEEvE@Base 0.8.0~git20230109.671f617
+ (arch=armel riscv64)_ZTSSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ _ZTSSt14default_deleteIN3mir8graphics20DisplayConfigurationEE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ _ZTSSt19_Sp_make_shared_tag@Base 0.6.1
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+ (arch=armel)_ZTSSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTSSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+ (arch=armel)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+ (arch=armel)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTSSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+ (arch=armel)_ZTSSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTSSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+ (arch=armel)_ZTSSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTSSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+ (arch=armel)_ZTSSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTSSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+ _ZTSZN5miral24SetApplicationAuthorizerI24WrappedSessionAuthorizerEC4IJFSt10shared_ptrIN5qtmir17SessionAuthorizerEEvEEEEDpRKT_EUlvE_@Base 0.6.1
+ _ZTSZN5miral24SetApplicationAuthorizerI24WrappedSessionAuthorizerEC4IJSt8functionIFSt10shared_ptrIN5qtmir17SessionAuthorizerEEvEEEEEDpRKT_EUlvE_@Base 0.6.1
+ _ZTSZN5miral28set_window_management_policyI29WrappedWindowManagementPolicyJN5qtmir19WindowModelNotifierENS2_16WindowControllerENS2_19WorkspaceControllerENS2_11AppNotifierEKSt10shared_ptrI12ScreensModelES7_I13QtEventFeederESt8functionIFS7_INS2_22WindowManagementPolicyEERKNS_18WindowManagerToolsES7_INS2_29WindowManagementPolicyPrivateEEEEEEENS_25SetWindowManagementPolicyEDpRT0_EUlSI_E_@Base 0.6.1
+ _ZTV10QMirServer@Base 0.6.1
+ _ZTV11MirGLConfig@Base 0.6.1
+ _ZTV12QtCompositor@Base 0.6.1
+ _ZTV12ScreensModel@Base 0.6.1
+ _ZTV13QtEventFeeder@Base 0.6.1
+ _ZTV13ScreenAdaptor@Base 0.6.1
+ _ZTV14PlatformScreen@Base 0.6.1
+ _ZTV15MirServerThread@Base 0.6.1
+ _ZTV15NativeInterface@Base 0.6.1
+ _ZTV15SurfaceObserver@Base 0.6.1
+ _ZTV16MirOpenGLContext@Base 0.6.1
+ _ZTV16OffscreenSurface@Base 0.6.1
+ _ZTV17OrientationSensor@Base 0.6.1
+ _ZTV17ScreensController@Base 0.6.1
+ _ZTV18ScreenAdaptorModel@Base 0.6.1
+ _ZTV20ScreenPlatformWindow@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTV21PromptSessionListener@Base 0.6.1
+ _ZTV23OrientationReadingEvent@Base 0.6.1
+ _ZTV24MirMousePointerInterface@Base 0.6.1
+ _ZTV24WrappedSessionAuthorizer@Base 0.6.1
+ _ZTV29WrappedWindowManagementPolicy@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTV31MirDisplayConfigurationObserver@Base 0.6.1
+ _ZTV3Mir@Base 0.6.1
+ _ZTV8Services@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTVN5miral15GLTextureBufferE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZTVN5miral20PersistDisplayConfig4SelfE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTVN5miral21GLTextureSourceBufferE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# _ZTVN5miral26DisplayConfigurationPolicyE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTVN5miral8GLBufferE@Base 0.7.0
+ _ZTVN5qtmir10ScreenModeE@Base 0.6.1
+ _ZTVN5qtmir11AppNotifierE@Base 0.6.1
+ _ZTVN5qtmir11NamedCursorE@Base 0.6.1
+ _ZTVN5qtmir12EventBuilderE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTVN5qtmir15MirCursorImagesE@Base 0.6.1
+ _ZTVN5qtmir16WindowControllerE@Base 0.6.1
+ _ZTVN5qtmir17SessionAuthorizerE@Base 0.6.1
+ _ZTVN5qtmir19WindowModelNotifierE@Base 0.6.1
+ _ZTVN5qtmir19WorkspaceControllerE@Base 0.6.1
+ _ZTVN5qtmir20MirServerApplicationE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# _ZTVN5qtmir20PromptSessionManagerE@Base 0.6.1
+ _ZTVN5qtmir21PromptSessionListenerE@Base 0.8.0~git20230109.671f617
+ _ZTVN5qtmir22MirInputDeviceObserverE@Base 0.6.1
+ _ZTVN5qtmir22WindowManagementPolicyE@Base 0.6.1
+ _ZTVN5qtmir22WindowNotifierObserverE@Base 0.6.1
+ _ZTVN5qtmir26DisplayConfigurationPolicyE@Base 0.6.1
+ _ZTVN5qtmir3MirE@Base 0.6.1
+ _ZTVN5qtmir6Cursor7PrivateE@Base 0.6.1
+ _ZTVN5qtmir6CursorE@Base 0.6.1
+ _ZTVN5qtmir6ScreenE@Base 0.6.1
+ _ZTVN5qtmir7ScreensE@Base 0.6.1
+ (arch=armel riscv64)_ZTVN9__gnu_cxx24__concurrence_lock_errorE@Base 0.7.0
+ (arch=armel riscv64)_ZTVN9__gnu_cxx26__concurrence_unlock_errorE@Base 0.7.0
+ (arch=armel riscv64)_ZTVSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt15_Sp_counted_ptrIP12ScreensModelLN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTVSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt15_Sp_counted_ptrIP13QtEventFeederLN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTVSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt15_Sp_counted_ptrIPN5qtmir17SessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTVSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt15_Sp_counted_ptrIPN5qtmir25BasicSetSessionAuthorizer7PrivateELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTVSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt15_Sp_counted_ptrIPN5qtmir26DisplayConfigurationPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTVSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt15_Sp_counted_ptrIPN5qtmir30BasicSetWindowManagementPolicy7PrivateELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTVSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt19_Sp_counted_deleterIPN3mir8graphics20DisplayConfigurationESt14default_deleteIS2_ESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceI11MirGLConfigSaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+ (arch=armel)_ZTVSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTVSt23_Sp_counted_ptr_inplaceI12QtCompositorSaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceI17OrientationSensorSaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceI24WrappedSessionAuthorizerSaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5miral15GLTextureBufferESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5miral20PersistDisplayConfig4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5miral21GLTextureSourceBufferESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir11NamedCursorESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir14MirServerHooks4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir15ExtraWindowInfoESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir15MirCursorImagesESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir17SessionAuthorizerESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir20OpenGLContextFactory4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.8.0~git20230109.671f617# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+ (arch=armel)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir21PromptSessionListenerESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+ (arch=armel)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir22MirInputDeviceObserverESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir26DisplayConfigurationPolicyESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir29WindowManagementPolicyPrivateESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir34BasicSetDisplayConfigurationPolicy4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+#MISSING: 0.7.0# (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+#MISSING: 0.7.0-3# (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIS2_ELN9__gnu_cxx12_Lock_policyE2EE@Base 0.6.1
+ (arch=armel riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.7.0
+ (arch=!armel !riscv64)_ZTVSt23_Sp_counted_ptr_inplaceIN5qtmir35BasicSetDisplayConfigurationStorage4SelfESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.7.0
+ (arch=armel)_ZTVSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTVSt23_Sp_counted_ptr_inplaceIN6miroil20PromptSessionManagerESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+ (arch=armel)_ZTVSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTVSt23_Sp_counted_ptr_inplaceIN6miroil22DisplayListenerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+ (arch=armel)_ZTVSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE1EE@Base 0.8.0~git20230109.671f617
+ (arch=!armel)_ZTVSt23_Sp_counted_ptr_inplaceIN6miroil37DisplayConfigurationControllerWrapperESaIvELN9__gnu_cxx12_Lock_policyE2EE@Base 0.8.0~git20230109.671f617
+ (optional=templinst)_ZZN11QMetaTypeIdIN3Mir5StateEE14qt_metatype_idEvE11metatype_id@Base 0.6.1
+ (optional=templinst)_ZZN11QMetaTypeIdIN5miral10WindowInfoEE14qt_metatype_idEvE11metatype_id@Base 0.6.1
+ (optional=templinst)_ZZN11QMetaTypeIdIN5miral15ApplicationInfoEE14qt_metatype_idEvE11metatype_id@Base 0.6.1
+ (optional=templinst)_ZZN11QMetaTypeIdIN5qtmir10FormFactorEE14qt_metatype_idEvE11metatype_id@Base 0.6.1
+ (optional=templinst)_ZZN11QMetaTypeIdIN5qtmir11OutputTypesEE14qt_metatype_idEvE11metatype_id@Base 0.6.1
+ (optional=templinst)_ZZN11QMetaTypeIdIN5qtmir13PromptSessionEE14qt_metatype_idEvE11metatype_id@Base 0.6.1
+ (optional=templinst)_ZZN11QMetaTypeIdIN5qtmir9NewWindowEE14qt_metatype_idEvE11metatype_id@Base 0.6.1
+ (optional=templinst)_ZZN11QMetaTypeIdIPN5qtmir19ScreenConfigurationEE14qt_metatype_idEvE11metatype_id@Base 0.6.1
+ (optional=templinst)_ZZN11QMetaTypeIdISt10shared_ptrIN3mir5scene7SessionEEE14qt_metatype_idEvE11metatype_id@Base 0.6.1
+ (optional=templinst)_ZZN11QMetaTypeIdISt6vectorIN5miral6WindowESaIS2_EEE14qt_metatype_idEvE11metatype_id@Base 0.6.1
+ (optional=templinst)_ZZN18QMetaTypeIdQObjectI6QFlagsIN2Qt11MouseButtonEELi16EE14qt_metatype_idEvE11metatype_id@Base 0.6.1
+ (optional=templinst)_ZZN18QMetaTypeIdQObjectI6QFlagsIN2Qt16KeyboardModifierEELi16EE14qt_metatype_idEvE11metatype_id@Base 0.6.1
+ (optional=templinst)_ZZN18QMetaTypeIdQObjectIP20ScreenPlatformWindowLi8EE14qt_metatype_idEvE11metatype_id@Base 0.6.1
+ (optional=templinst)_ZZN9QtPrivate15ConnectionTypesINS_4ListIJRKN5miral10WindowInfoE5QSizeEEELb1EE5typesEvE1t@Base 0.6.1
+ (optional=templinst)_ZZN9QtPrivate15ConnectionTypesINS_4ListIJRKN5miral10WindowInfoE6QPointEEELb1EE5typesEvE1t@Base 0.6.1
+ (optional=templinst)_ZZN9QtPrivate15ConnectionTypesINS_4ListIJRKN5miral10WindowInfoEEEELb1EE5typesEvE1t@Base 0.6.1
+ (optional=templinst)_ZZN9QtPrivate15ConnectionTypesINS_4ListIJRKN5miral10WindowInfoEN3Mir5StateEEEELb1EE5typesEvE1t@Base 0.6.1
+ (optional=templinst)_ZZN9QtPrivate15ConnectionTypesINS_4ListIJRKN5miral10WindowInfoEbEEELb1EE5typesEvE1t@Base 0.6.1
+ (optional=templinst)_ZZN9QtPrivate15ConnectionTypesINS_4ListIJRKN5qtmir9NewWindowEEEELb1EE5typesEvE1t@Base 0.6.1
+ _ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (optional=templinst|subst)_ZZNSt8__detail18__to_chars_10_implI{size_t}EEvPcjT_E8__digits@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE0_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE10_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE11_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE12_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE13_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE14_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE15_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE16_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE17_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE18_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE19_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE1_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE20_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE2_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE3_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE4_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE5_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE6_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE7_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE8_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE9_clEvE15qstring_literal@Base 0.6.1
+ _ZZZN5qtmir6Cursor7PrivateC4EvENKUlvE_clEvE15qstring_literal@Base 0.6.1
+ _ZZZNK5qtmir6Cursor7Private10cursorNameEvENKUlvE_clEvE15qstring_literal@Base 0.6.1
+#MISSING: 0.6.1-8# __start___tracepoints_ptrs@Base 0.6.1
+ __start_lttng_ust_tracepoints_ptrs@Base 0.6.1
+#MISSING: 0.6.1-8# __stop___tracepoints_ptrs@Base 0.6.1
+ __stop_lttng_ust_tracepoints_ptrs@Base 0.6.1
+#MISSING: 0.6.1-8# __tracepoint_provider_qtmirserver@Base 0.6.1
+#MISSING: 0.6.1-8# __tracepoint_qtmirserver___sessionAuthorizeEnd@Base 0.6.1
+#MISSING: 0.6.1-8# __tracepoint_qtmirserver___sessionAuthorizeStart@Base 0.6.1
+#MISSING: 0.6.1-8# __tracepoint_qtmirserver___starting@Base 0.6.1
+#MISSING: 0.6.1-8# __tracepoint_qtmirserver___stopping@Base 0.6.1
+#MISSING: 0.6.1-8# __tracepoint_qtmirserver___surfaceCreated@Base 0.6.1
+#MISSING: 0.6.1-8# __tracepoint_qtmirserver___surfaceDestroyed@Base 0.6.1
+#MISSING: 0.6.1-8# __tracepoint_qtmirserver___touchEventDispatch_end@Base 0.6.1
+#MISSING: 0.6.1-8# __tracepoint_qtmirserver___touchEventDispatch_start@Base 0.6.1
+ appStartTime@Base 0.6.1
+ getStartTime@Base 0.6.1
+ lttng_ust_tracepoint_provider_qtmirserver@Base 0.6.1
+ lttng_ust_tracepoint_qtmirserver___sessionAuthorizeEnd@Base 0.6.1
+ lttng_ust_tracepoint_qtmirserver___sessionAuthorizeStart@Base 0.6.1
+ lttng_ust_tracepoint_qtmirserver___starting@Base 0.6.1
+ lttng_ust_tracepoint_qtmirserver___stopping@Base 0.6.1
+ lttng_ust_tracepoint_qtmirserver___surfaceCreated@Base 0.6.1
+ lttng_ust_tracepoint_qtmirserver___surfaceDestroyed@Base 0.6.1
+ lttng_ust_tracepoint_qtmirserver___touchEventDispatch_end@Base 0.6.1
+ lttng_ust_tracepoint_qtmirserver___touchEventDispatch_start@Base 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (c++)"non-virtual thunk to MirDisplayConfigurationObserver::base_configuration_updated(std::shared_ptr<mir::graphics::DisplayConfiguration const> const&)@Base" 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (c++)"non-virtual thunk to MirDisplayConfigurationObserver::catastrophic_configuration_error(std::shared_ptr<mir::graphics::DisplayConfiguration const> const&, std::exception const&)@Base" 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (c++)"non-virtual thunk to MirDisplayConfigurationObserver::configuration_applied(std::shared_ptr<mir::graphics::DisplayConfiguration const> const&)@Base" 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (c++)"non-virtual thunk to MirDisplayConfigurationObserver::configuration_failed(std::shared_ptr<mir::graphics::DisplayConfiguration const> const&, std::exception const&)@Base" 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (c++)"non-virtual thunk to MirDisplayConfigurationObserver::configuration_updated_for_session(std::shared_ptr<mir::scene::Session> const&, std::shared_ptr<mir::graphics::DisplayConfiguration const> const&)@Base" 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (c++)"non-virtual thunk to MirDisplayConfigurationObserver::initial_configuration(std::shared_ptr<mir::graphics::DisplayConfiguration const> const&)@Base" 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (c++)"non-virtual thunk to MirDisplayConfigurationObserver::session_configuration_applied(std::shared_ptr<mir::scene::Session> const&, std::shared_ptr<mir::graphics::DisplayConfiguration> const&)@Base" 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (c++)"non-virtual thunk to MirDisplayConfigurationObserver::session_configuration_removed(std::shared_ptr<mir::scene::Session> const&)@Base" 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (c++)"non-virtual thunk to MirDisplayConfigurationObserver::~MirDisplayConfigurationObserver()@Base" 0.6.1
+ (c++)"non-virtual thunk to MirOpenGLContext::doneCurrent()@Base" 0.6.1
+ (c++)"non-virtual thunk to MirOpenGLContext::format() const@Base" 0.6.1
+ (c++)"non-virtual thunk to MirOpenGLContext::getProcAddress(char const*)@Base" 0.6.1
+ (c++)"non-virtual thunk to MirOpenGLContext::isSharing() const@Base" 0.6.1
+ (c++)"non-virtual thunk to MirOpenGLContext::makeCurrent(QPlatformSurface*)@Base" 0.6.1
+ (c++)"non-virtual thunk to MirOpenGLContext::swapBuffers(QPlatformSurface*)@Base" 0.6.1
+ (c++)"non-virtual thunk to MirOpenGLContext::~MirOpenGLContext()@Base" 0.6.1
+ (c++)"non-virtual thunk to PlatformScreen::cursor() const@Base" 0.6.1
+ (c++)"non-virtual thunk to PlatformScreen::depth() const@Base" 0.6.1
+ (c++)"non-virtual thunk to PlatformScreen::devicePixelRatio() const@Base" 0.6.1
+ (c++)"non-virtual thunk to PlatformScreen::format() const@Base" 0.6.1
+ (c++)"non-virtual thunk to PlatformScreen::geometry() const@Base" 0.6.1
+ (c++)"non-virtual thunk to PlatformScreen::name() const@Base" 0.6.1
+ (c++)"non-virtual thunk to PlatformScreen::nativeOrientation() const@Base" 0.6.1
+ (c++)"non-virtual thunk to PlatformScreen::orientation() const@Base" 0.6.1
+ (c++)"non-virtual thunk to PlatformScreen::physicalSize() const@Base" 0.6.1
+ (c++)"non-virtual thunk to PlatformScreen::refreshRate() const@Base" 0.6.1
+ (c++)"non-virtual thunk to PlatformScreen::topLevelAt(QPoint const&) const@Base" 0.6.1
+ (c++)"non-virtual thunk to PlatformScreen::~PlatformScreen()@Base" 0.6.1
+ (c++)"non-virtual thunk to QtCompositor::start()@Base" 0.8.0~git20230109.671f617
+ (c++)"non-virtual thunk to QtCompositor::stop()@Base" 0.8.0~git20230109.671f617
+ (c++)"non-virtual thunk to QtCompositor::~QtCompositor()@Base" 0.8.0~git20230109.671f617
+ (c++)"non-virtual thunk to ScreenPlatformWindow::isActive() const@Base" 0.6.1
+ (c++)"non-virtual thunk to ScreenPlatformWindow::isExposed() const@Base" 0.6.1
+ (c++)"non-virtual thunk to ScreenPlatformWindow::requestActivateWindow()@Base" 0.6.1
+ (c++)"non-virtual thunk to ScreenPlatformWindow::setGeometry(QRect const&)@Base" 0.6.1
+ (c++)"non-virtual thunk to ScreenPlatformWindow::setVisible(bool)@Base" 0.6.1
+ (c++)"non-virtual thunk to ScreenPlatformWindow::winId() const@Base" 0.6.1
+ (c++)"non-virtual thunk to ScreenPlatformWindow::~ScreenPlatformWindow()@Base" 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (c++)"non-virtual thunk to ScreensModel::~ScreensModel()@Base" 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (c++)"non-virtual thunk to miral::PersistDisplayConfig::Self::base_configuration_updated(std::shared_ptr<mir::graphics::DisplayConfiguration const> const&)@Base" 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (c++)"non-virtual thunk to miral::PersistDisplayConfig::Self::session_configuration_applied(std::shared_ptr<mir::scene::Session> const&, std::shared_ptr<mir::graphics::DisplayConfiguration> const&)@Base" 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (c++)"non-virtual thunk to miral::PersistDisplayConfig::Self::session_configuration_removed(std::shared_ptr<mir::scene::Session> const&)@Base" 0.6.1
+#MISSING: 0.8.0~git20230109.671f617# (c++)"non-virtual thunk to miral::PersistDisplayConfig::Self::~Self()@Base" 0.6.1
+ (c++)"non-virtual thunk to qtmir::MirInputDeviceObserver::device_added(miroil::InputDevice)@Base" 0.8.0~git20230109.671f617
+ (c++)"non-virtual thunk to qtmir::MirInputDeviceObserver::device_removed(miroil::InputDevice)@Base" 0.8.0~git20230109.671f617
+ (c++)"non-virtual thunk to qtmir::MirInputDeviceObserver::~MirInputDeviceObserver()@Base" 0.8.0~git20230109.671f617
+ (c++)"non-virtual thunk to qtmir::PromptSessionListener::prompt_provider_added(mir::scene::PromptSession const&, std::shared_ptr<mir::scene::Session> const&)@Base" 0.8.0~git20230109.671f617
+ (c++)"non-virtual thunk to qtmir::PromptSessionListener::prompt_provider_removed(mir::scene::PromptSession const&, std::shared_ptr<mir::scene::Session> const&)@Base" 0.8.0~git20230109.671f617
+ (c++)"non-virtual thunk to qtmir::PromptSessionListener::resuming(std::shared_ptr<mir::scene::PromptSession> const&)@Base" 0.8.0~git20230109.671f617
+ (c++)"non-virtual thunk to qtmir::PromptSessionListener::starting(std::shared_ptr<mir::scene::PromptSession> const&)@Base" 0.8.0~git20230109.671f617
+ (c++)"non-virtual thunk to qtmir::PromptSessionListener::stopping(std::shared_ptr<mir::scene::PromptSession> const&)@Base" 0.8.0~git20230109.671f617
+ (c++)"non-virtual thunk to qtmir::PromptSessionListener::suspending(std::shared_ptr<mir::scene::PromptSession> const&)@Base" 0.8.0~git20230109.671f617
+ (c++)"non-virtual thunk to qtmir::PromptSessionListener::~PromptSessionListener()@Base" 0.8.0~git20230109.671f617
+ resetStartTime@Base 0.6.1
+ weakScreenModel@Base 0.6.1
diff --git a/debian/qml-module-qtmir.install b/debian/qml-module-qtmir.install
index edbef82e..dc7a46e3 100644
--- a/debian/qml-module-qtmir.install
+++ b/debian/qml-module-qtmir.install
@@ -1,4 +1,4 @@
 usr/lib/*/qt5/qml/*
 usr/share/glib-2.0/schemas
-usr/share/applications
-usr/share/icons/hicolor/256x256/apps
+usr/share/applications/xwayland.qtmir.desktop
+usr/share/icons/hicolor/256x256/apps/xwayland.qtmir.png
diff --git a/debian/qtmir-tests.install b/debian/qtmir-tests.install
index e050f651..38088e4f 100644
--- a/debian/qtmir-tests.install
+++ b/debian/qtmir-tests.install
@@ -1,6 +1,5 @@
 usr/bin/qtmir-demo-client
 usr/bin/qtmir-demo-shell
 usr/share/applications/qtmir-demo-client.desktop
-usr/share/qtmir/benchmarks/*
 usr/share/qtmir/qtmir-demo-client/*
 usr/share/qtmir/qtmir-demo-shell/*
diff --git a/debian/rules b/debian/rules
index b9811ae7..d723a112 100755
--- a/debian/rules
+++ b/debian/rules
@@ -1,7 +1,8 @@
 #!/usr/bin/make -f
 # -*- makefile -*-
 
-export DPKG_GENSYMBOLS_CHECK_LEVEL=4
+# Uncomment this to be more picky with non-updated .symbols files
+#export DPKG_GENSYMBOLS_CHECK_LEVEL=4
 
 include /usr/share/dpkg/default.mk
 
@@ -12,15 +13,16 @@ export DEB_BUILD_MAINT_OPTIONS = hardening=+all
 DEB_HOST_ARCH ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)
 
 %:
-	dh $@
+	dh $@ --with pkgkde_symbolshelper
 
 override_dh_missing:
 	dh_missing --fail-missing
 
-FLAGS := -DWITH_CONTENTHUB=ON -DWerror=ON
+FLAGS := -DWITH_CONTENTHUB=ON -DWerror=ON -DWITH_MIR2=on
 # Explicitly disable building with Valgrind on architectures without it.
-valgrind_architectures := amd64 arm64 armhf i386 mips64el mipsel ppc64el s390x powerpc ppc64 x32
-ifeq ($(filter $(DEB_HOST_ARCH), $(valgrind_architectures)),)
+# If valgrind is available or not gets decided via the valgrind-if-available
+# virtual package.
+ifeq (, $(shell command -v valgrind))
 	FLAGS += -DWITH_VALGRIND=OFF
 endif
 
@@ -32,3 +34,6 @@ override_dh_install:
 	-rm -f debian/tmp/usr/lib/libgmock*.a debian/tmp/usr/lib/libgtest*.a
 	-rm -rf debian/tmp/usr/include/gmock debian/tmp/usr/include/gtest
 	dh_install
+
+get-orig-source:
+	uscan --noconf --force-download --rename --download-current-version --destdir=..
diff --git a/debian/watch b/debian/watch
new file mode 100644
index 00000000..0d87b500
--- /dev/null
+++ b/debian/watch
@@ -0,0 +1,4 @@
+version=4
+opts="mode=git, pgpmode=none,  pretty=0.8.0~git%cd.%h" \
+https://gitlab.com/ubports/development/core/qtmir.git \
+heads/ubports/focal_-_mir2.0 debian uupdate
diff --git a/demos/qtmir-demo-shell/CMakeLists.txt b/demos/qtmir-demo-shell/CMakeLists.txt
index 2a95365d..7f0e3839 100644
--- a/demos/qtmir-demo-shell/CMakeLists.txt
+++ b/demos/qtmir-demo-shell/CMakeLists.txt
@@ -6,6 +6,7 @@ include_directories(
     ${CMAKE_SOURCE_DIR}/include
 
     ${MIRSERVER_INCLUDE_DIRS}
+    ${MIROIL_INCLUDE_DIRS}
     ${MIRAL_INCLUDE_DIRS}
 
     ${Qt5Gui_PRIVATE_INCLUDE_DIRS}
diff --git a/demos/qtmir-demo-shell/Shell.qml b/demos/qtmir-demo-shell/Shell.qml
index d0777379..066c0a3b 100644
--- a/demos/qtmir-demo-shell/Shell.qml
+++ b/demos/qtmir-demo-shell/Shell.qml
@@ -62,6 +62,7 @@ FocusScope {
                 height: surface.size.height
                 focus: surface.focused
                 visible: surface.visible
+                fillMode: MirSurfaceItem.PadOrCrop
 
                 Rectangle {
                     anchors { top: parent.bottom; right: parent.right }
@@ -104,8 +105,8 @@ Resize window: Ctrl+Right click"
         color: "black"
         width: 6
         height: 10
-        x: PointerPosition.x - window.screen.position.x
-        y: PointerPosition.y - window.screen.position.y
+        x: PointerPosition.x// - window.screen.position.x
+        y: PointerPosition.y// - window.screen.position.y
     }
 
     MouseArea {
diff --git a/demos/qtmir-demo-shell/main.cpp b/demos/qtmir-demo-shell/main.cpp
index 828a630e..800d385f 100644
--- a/demos/qtmir-demo-shell/main.cpp
+++ b/demos/qtmir-demo-shell/main.cpp
@@ -33,10 +33,11 @@
 #include <qtmir/sessionauthorizer.h>
 #include <qtmir/windowmanagementpolicy.h>
 #include <qtmir/displayconfigurationstorage.h>
-#include <qtmir/miral/edid.h>
 
+#include <miroil/edid.h>
 
-inline QString stringFromEdid(const miral::Edid& edid)
+
+inline QString stringFromEdid(const miroil::Edid& edid)
 {
     QString str;
     str += QString::fromStdString(edid.vendor);
@@ -75,12 +76,12 @@ public:
     }
 };
 
-struct DemoDisplayConfigurationStorage : miral::DisplayConfigurationStorage
+struct DemoDisplayConfigurationStorage : miroil::DisplayConfigurationStorage
 {
-    void save(const miral::DisplayId& displayId, const miral::DisplayConfigurationOptions& options) override
+    void save(const miroil::DisplayId& displayId, const miroil::DisplayConfigurationOptions& options) override
     {
         QFile f(stringFromEdid(displayId.edid) + ".edid");
-        qDebug() << "OVERRIDE miral::DisplayConfigurationStorage::save" << f.fileName();
+        qDebug() << "OVERRIDE miroil::DisplayConfigurationStorage::save" << f.fileName();
 
         QJsonObject json;
         if (options.used.is_set()) json.insert("used", options.used.value());
@@ -105,10 +106,10 @@ struct DemoDisplayConfigurationStorage : miral::DisplayConfigurationStorage
         }
     }
 
-    bool load(const miral::DisplayId& displayId, miral::DisplayConfigurationOptions& options) const override
+    bool load(const miroil::DisplayId& displayId, miroil::DisplayConfigurationOptions& options) const override
     {
         QFile f(stringFromEdid(displayId.edid) + ".edid");
-        qDebug() << "OVERRIDE miral::DisplayConfigurationStorage::load" << f.fileName();
+        qDebug() << "OVERRIDE miroil::DisplayConfigurationStorage::load" << f.fileName();
 
         if (f.open(QIODevice::ReadOnly)) {
             QByteArray saveData = f.readAll();
@@ -124,7 +125,7 @@ struct DemoDisplayConfigurationStorage : miral::DisplayConfigurationStorage
                     QString sz(jsonMode["size"].toString());
                     QStringList geo = sz.split("x", QString::SkipEmptyParts);
                     if (geo.count() == 2) {
-                        miral::DisplayConfigurationOptions::DisplayMode mode;
+                        miroil::DisplayConfigurationOptions::DisplayMode mode;
                         mode.size = mir::geometry::Size(geo[0].toInt(), geo[1].toInt());
                         mode.refresh_rate = jsonMode["refresh_rate"].toDouble();
                         options.mode = mode;
diff --git a/demos/qtmir-demo-shell/qml-demo-shell.qml b/demos/qtmir-demo-shell/qml-demo-shell.qml
index ac175cb0..7ed32d45 100644
--- a/demos/qtmir-demo-shell/qml-demo-shell.qml
+++ b/demos/qtmir-demo-shell/qml-demo-shell.qml
@@ -1,4 +1,6 @@
 import QtQuick 2.5
+import QtQml.Models 2.15
+import QtQml 2.15
 import QtMir.DemoShell 0.1
 
 Instantiator {
diff --git a/include/qtmir/miral/display_configuration_policy.h b/include/miroil/display_configuration_policy.h
similarity index 79%
rename from include/qtmir/miral/display_configuration_policy.h
rename to include/miroil/display_configuration_policy.h
index 9c277135..c6d2b70e 100644
--- a/include/qtmir/miral/display_configuration_policy.h
+++ b/include/miroil/display_configuration_policy.h
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2016 Canonical Ltd.
+ * Copyright © 2016-2020 Canonical Ltd.
  *
  * This program is free software: you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 3,
@@ -16,12 +16,12 @@
  * Authored by: Nick Dedekind <nick.dedekind@canonical.com>
  */
 
-#ifndef MIRAL_DISPLAY_CONDIFIGURATION_POLICY_H
-#define MIRAL_DISPLAY_CONDIFIGURATION_POLICY_H
+#ifndef MIROIL_DISPLAY_CONDIFIGURATION_POLICY_H
+#define MIROIL_DISPLAY_CONDIFIGURATION_POLICY_H
 
 namespace mir { namespace graphics { class DisplayConfiguration; } }
 
-namespace miral
+namespace miroil
 {
 
 class DisplayConfigurationPolicy
@@ -29,14 +29,14 @@ class DisplayConfigurationPolicy
 public:
     DisplayConfigurationPolicy();
 
-    virtual ~DisplayConfigurationPolicy() = default;
+    virtual ~DisplayConfigurationPolicy();
     DisplayConfigurationPolicy(DisplayConfigurationPolicy const&) = delete;
     DisplayConfigurationPolicy& operator=(DisplayConfigurationPolicy const&) = delete;
 
     virtual void apply_to(mir::graphics::DisplayConfiguration& conf) = 0;
 };
 
-} // namespace miral
+} // namespace miroil
 
 
-#endif // MIRAL_DISPLAY_CONDIFIGURATION_POLICY_H
+#endif // MIROIL_DISPLAY_CONDIFIGURATION_POLICY_H
diff --git a/include/qtmir/miral/display_configuration_storage.h b/include/miroil/display_configuration_storage.h
similarity index 79%
rename from include/qtmir/miral/display_configuration_storage.h
rename to include/miroil/display_configuration_storage.h
index 8090877b..f66e3d00 100644
--- a/include/qtmir/miral/display_configuration_storage.h
+++ b/include/miroil/display_configuration_storage.h
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2016-2017 Canonical Ltd.
+ * Copyright © 2016-2020 Canonical Ltd.
  *
  * This program is free software: you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 3,
@@ -16,23 +16,24 @@
  * Authored by: Nick Dedekind <nick.dedekind@canonical.com>
  */
 
-#ifndef MIRAL_DISPLAY_CONFIGURATION_STORAGE_H
-#define MIRAL_DISPLAY_CONFIGURATION_STORAGE_H
+#ifndef MIROIL_DISPLAY_CONFIGURATION_STORAGE_H
+#define MIROIL_DISPLAY_CONFIGURATION_STORAGE_H
+
+#include <miroil/display_id.h>
 
 #include <mir/geometry/rectangle.h>
 #include <mir/optional_value.h>
 #include <mir_toolkit/common.h>
 
-#include "display_id.h"
+#include <sys/types.h>
 
-// Prototyping namespace for later incorporation in MirAL
-namespace miral
+namespace miroil
 {
 
 struct DisplayConfigurationOptions
 {
     mir::optional_value<bool> used;
-    mir::optional_value<unsigned int> clone_output_index;
+    mir::optional_value<uint> clone_output_index;
     struct DisplayMode
     {
         mir::geometry::Size size;
@@ -53,6 +54,6 @@ public:
     virtual bool load(const DisplayId&, DisplayConfigurationOptions&) const = 0;
 };
 
-} // namespace miral
+} // namespace miroil
 
-#endif // MIRAL_DISPLAY_CONFIGURATION_STORAGE_H
+#endif // MIROIL_DISPLAY_CONFIGURATION_STORAGE_H
diff --git a/include/qtmir/miral/display_id.h b/include/miroil/display_id.h
similarity index 66%
rename from include/qtmir/miral/display_id.h
rename to include/miroil/display_id.h
index a65d59b4..50b0c933 100644
--- a/include/qtmir/miral/display_id.h
+++ b/include/miroil/display_id.h
@@ -1,14 +1,13 @@
-#ifndef MIRAL_DISPLAY_ID_H
-#define MIRAL_DISPLAY_ID_H
+#ifndef MIROIL_DISPLAY_ID_H
+#define MIROIL_DISPLAY_ID_H
 
 #include <mir/int_wrapper.h>
 
-#include "edid.h"
+#include <miroil/edid.h>
 
 namespace mir { namespace graphics { namespace detail { struct GraphicsConfOutputIdTag; } } }
 
-// Prototyping namespace for later incorporation in MirAL
-namespace miral
+namespace miroil
 {
 using OutputId = mir::IntWrapper<mir::graphics::detail::GraphicsConfOutputIdTag>;
 
@@ -20,4 +19,4 @@ struct DisplayId
 
 } // namespace miral
 
-#endif // MIRAL_DISPLAY_ID_H
+#endif // MIROIL_DISPLAY_ID_H
diff --git a/include/qtmir/miral/edid.h b/include/miroil/edid.h
similarity index 89%
rename from include/qtmir/miral/edid.h
rename to include/miroil/edid.h
index d8f4e369..ec5996e5 100644
--- a/include/qtmir/miral/edid.h
+++ b/include/miroil/edid.h
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2016 Canonical Ltd.
+ * Copyright © 2016-2020 Canonical Ltd.
  *
  * This program is free software: you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 3,
@@ -16,15 +16,14 @@
  * Authored by: Nick Dedekind <nick.dedekind@canonical.com>
  */
 
-#ifndef MIRAL_EDID_H
-#define MIRAL_EDID_H
+#ifndef MIROIL_EDID_H
+#define MIROIL_EDID_H
 
 #include <cstdint>
 #include <string>
 #include <vector>
 
-// Prototyping namespace for later incorporation in MirAL
-namespace miral
+namespace miroil
 {
 
 struct Edid
@@ -66,4 +65,4 @@ struct Edid
 
 }
 
-#endif // MIRAL_EDID_H
+#endif // MIROIL_EDID_H
diff --git a/include/qtmir/displayconfigurationpolicy.h b/include/qtmir/displayconfigurationpolicy.h
index cb26a0de..3b437625 100644
--- a/include/qtmir/displayconfigurationpolicy.h
+++ b/include/qtmir/displayconfigurationpolicy.h
@@ -17,13 +17,12 @@
 #ifndef QTMIR_DISPLAYCONFIGURATIONPOLICY_H
 #define QTMIR_DISPLAYCONFIGURATIONPOLICY_H
 
-//qtmir
-#include "qtmir/miral/display_configuration_policy.h"
-
-// mir
-#include <mir/server.h>
+//miroil
+#include <miroil/display_configuration_policy.h>
+#include <miroil/persist_display_config.h>
 
 #include <memory>
+#include <functional>
 
 class QMirServer;
 
@@ -44,7 +43,7 @@ namespace qtmir
 
     qtmir::GuiServerApplication app(argc, argv, { SetDisplayConfigurationPolicy<MyDisplayConfigurationPolicy>() });
  */
-class DisplayConfigurationPolicy : public miral::DisplayConfigurationPolicy
+class DisplayConfigurationPolicy : public miroil::DisplayConfigurationPolicy
 {
 public:
     DisplayConfigurationPolicy();
@@ -56,7 +55,7 @@ private:
     std::shared_ptr<Private> d;
 };
 
-using DisplayConfigurationPolicyWrapper = std::function<std::shared_ptr<miral::DisplayConfigurationPolicy>()>;
+using DisplayConfigurationPolicyWrapper = std::function<std::shared_ptr<miroil::DisplayConfigurationPolicy>(std::shared_ptr<mir::graphics::DisplayConfigurationPolicy> const& wrapped)>;
 
 /*
     Base class for access to set the display configuration policy
@@ -84,7 +83,7 @@ public:
     template<typename ...Args>
     explicit SetDisplayConfigurationPolicy(Args const& ...args) :
         BasicSetDisplayConfigurationPolicy{
-            [&args...]() { return std::make_shared<Policy>(args...); }} {}
+            [&args...](auto) { return std::make_shared<Policy>(args...); }} {}
 };
 
 } // namespace qtmir
diff --git a/include/qtmir/displayconfigurationstorage.h b/include/qtmir/displayconfigurationstorage.h
index 8a24e4ab..c7f1451c 100644
--- a/include/qtmir/displayconfigurationstorage.h
+++ b/include/qtmir/displayconfigurationstorage.h
@@ -17,7 +17,7 @@
 #ifndef DISPLAYCONFIGURATIONSTORAGE_H
 #define DISPLAYCONFIGURATIONSTORAGE_H
 
-#include "qtmir/miral/display_configuration_storage.h"
+#include <miroil/display_configuration_storage.h>
 
 #include <functional>
 #include <memory>
@@ -27,7 +27,7 @@ class QMirServer;
 namespace qtmir
 {
 
-using DisplayConfigurationStorageBuilder = std::function<std::shared_ptr<miral::DisplayConfigurationStorage>()>;
+using DisplayConfigurationStorageBuilder = std::function<std::shared_ptr<miroil::DisplayConfigurationStorage>()>;
 
 class BasicSetDisplayConfigurationStorage
 {
diff --git a/include/qtmir/screen.h b/include/qtmir/screen.h
index 48793411..805a0fb7 100644
--- a/include/qtmir/screen.h
+++ b/include/qtmir/screen.h
@@ -18,7 +18,7 @@
 #define QTMIR_SCREEN_H
 
 #include <qtmir/types.h>
-#include <qtmir/miral/display_id.h>
+#include <miroil/display_id.h>
 
 #include <QObject>
 #include <QPointer>
@@ -40,7 +40,7 @@ class Screen : public QObject
 {
     Q_OBJECT
 public:
-    virtual miral::DisplayId displayId() const = 0;
+    virtual miroil::DisplayId displayId() const = 0;
     virtual bool used() const = 0;
     virtual QString name() const = 0;
     virtual float scale() const = 0;
@@ -57,8 +57,8 @@ public:
 
     virtual QScreen* qscreen() const = 0;
 
-    virtual ScreenConfiguration *beginConfiguration() const = 0;
-    virtual bool applyConfiguration(ScreenConfiguration *configuration) = 0;
+    virtual Q_INVOKABLE ScreenConfiguration *beginConfiguration() const = 0;
+    virtual Q_INVOKABLE bool applyConfiguration(ScreenConfiguration *configuration) = 0;
 
 Q_SIGNALS:
     void usedChanged();
@@ -96,7 +96,7 @@ public:
 struct ScreenConfiguration
 {
     bool valid{false};
-    miral::OutputId id;
+    miroil::OutputId id;
 
     bool used;
     QPoint topLeft;
diff --git a/include/qtmir/windowmanagementpolicy.h b/include/qtmir/windowmanagementpolicy.h
index 69f4f6b0..c1e5519f 100644
--- a/include/qtmir/windowmanagementpolicy.h
+++ b/include/qtmir/windowmanagementpolicy.h
@@ -18,7 +18,7 @@
 #define QTMIR_WINDOWMANAGEMENTPOLICY_H
 
 // miral
-#include <miral/canonical_window_manager.h>
+#include <miral/minimal_window_manager.h>
 #include <miral/version.h>
 #if MIRAL_VERSION > MIR_VERSION_NUMBER(1,3,1)
 #include <miral/set_window_management_policy.h>
@@ -43,7 +43,7 @@ class WindowManagementPolicyPrivate;
 /*
     Provides window management callbacks for window behaviour customization
  */
-class WindowManagementPolicy : public miral::CanonicalWindowManagerPolicy
+class WindowManagementPolicy : public miral::MinimalWindowManager
 {
 public:
 
diff --git a/src/common/debughelpers.cpp b/src/common/debughelpers.cpp
index 0e3be568..362d252d 100644
--- a/src/common/debughelpers.cpp
+++ b/src/common/debughelpers.cpp
@@ -17,7 +17,13 @@
 #include "debughelpers.h"
 #include <QTouchEvent>
 
+#include <mir/version.h>
+#if MIR_SERVER_VERSION >= MIR_VERSION_NUMBER(2, 0, 0)
+#include <miral/toolkit_event.h>
+using namespace miral::toolkit;
+#else
 #include <mir_toolkit/event.h>
+#endif
 
 // Lomiri Shell API
 #include <lomiri/shell/application/ApplicationInfoInterface.h>
@@ -124,6 +130,7 @@ const char *mirSurfaceTypeToStr(int value)
     case mir_window_type_inputmethod:  return "input Method";  /**< AKA "OSK" or handwriting etc.   */
     case mir_window_type_satellite:    return "satellite";     /**< AKA "toolbox"/"toolbar"         */
     case mir_window_type_tip:          return "tip";           /**< AKA "tooltip"                   */
+    case mir_window_type_decoration:   return "decoration";
     case mir_window_types:             Q_UNREACHABLE();
     }
     Q_UNREACHABLE();
diff --git a/src/common/debughelpers.h b/src/common/debughelpers.h
index 0828db27..31814dbe 100644
--- a/src/common/debughelpers.h
+++ b/src/common/debughelpers.h
@@ -20,7 +20,13 @@
 #include <QString>
 
 #include <mir_toolkit/common.h>
+#include <mir/version.h>
+#if MIR_SERVER_VERSION >= MIR_VERSION_NUMBER(2, 0, 0)
+#include <miral/toolkit_event.h>
+using namespace miral::toolkit;
+#else
 #include <mir_toolkit/event.h>
+#endif
 
 class QTouchEvent;
 
diff --git a/src/common/windowcontrollerinterface.h b/src/common/windowcontrollerinterface.h
index 062c02a7..f33b1b80 100644
--- a/src/common/windowcontrollerinterface.h
+++ b/src/common/windowcontrollerinterface.h
@@ -19,7 +19,13 @@
 
 #include <miral/window.h>
 
+#include <mir/version.h>
+#if MIR_SERVER_VERSION >= MIR_VERSION_NUMBER(2, 0, 0)
+#include <miral/toolkit_event.h>
+using namespace miral::toolkit;
+#else
 #include <mir_toolkit/event.h>
+#endif
 
 #include <QPoint>
 #include <QSize>
diff --git a/src/common/windowmodelnotifier.h b/src/common/windowmodelnotifier.h
index e534803d..388d0175 100644
--- a/src/common/windowmodelnotifier.h
+++ b/src/common/windowmodelnotifier.h
@@ -90,6 +90,8 @@ Q_SIGNALS: // **Must used Queued Connection or else events will be out of order*
     void modificationsStarted();
     void modificationsEnded();
 
+    void windowDecorationChanged(const miral::Window &window, bool ssd);
+
 private:
     Q_DISABLE_COPY(WindowModelNotifier)
 };
@@ -112,6 +114,7 @@ Q_SIGNALS:
     void windowStateChanged(Mir::State state);
     void windowFocusChanged(bool focused);
     void windowRequestedRaise();
+    void windowDecorationChanged(bool ssd);
 };
 
 } // namespace qtmir
@@ -120,5 +123,6 @@ Q_DECLARE_METATYPE(qtmir::NewWindow)
 Q_DECLARE_METATYPE(miral::WindowInfo)
 Q_DECLARE_METATYPE(std::vector<miral::Window>)
 Q_DECLARE_METATYPE(MirWindowState)
+Q_DECLARE_METATYPE(miral::Window)
 
 #endif // WINDOWMODELNOTIFIER_H
diff --git a/src/common/workspacecontrollerinterface.h b/src/common/workspacecontrollerinterface.h
index eb7b281c..fcb26fb2 100644
--- a/src/common/workspacecontrollerinterface.h
+++ b/src/common/workspacecontrollerinterface.h
@@ -19,8 +19,6 @@
 
 #include <miral/window.h>
 
-#include <mir_toolkit/event.h>
-
 #include <QPoint>
 #include <QSize>
 
diff --git a/src/modules/QtMir/Application/CMakeLists.txt b/src/modules/QtMir/Application/CMakeLists.txt
index 5fac5329..f5a0b125 100644
--- a/src/modules/QtMir/Application/CMakeLists.txt
+++ b/src/modules/QtMir/Application/CMakeLists.txt
@@ -1,8 +1,13 @@
 include(UseLttngGenTp)
 
+if(NOT WITH_MIR2)
+ set(MIROIL_INC ${CMAKE_SOURCE_DIR}/src/platforms/mirserver/miroil/include)
+endif()
+
 include_directories(
     ${CMAKE_SOURCE_DIR}/include
     ${CMAKE_SOURCE_DIR}/src/platforms/mirserver
+    ${MIROIL_INC}
     ${CMAKE_SOURCE_DIR}/src/common
     ${CMAKE_CURRENT_BINARY_DIR} # for tracepoints.h
 )
@@ -14,6 +19,7 @@ include_directories(
     ${GIO_UNIX_INCLUDE_DIRS}
     ${MIRAL_INCLUDE_DIRS}
     ${MIRSERVER_INCLUDE_DIRS}
+    ${MIROIL_INCLUDE_DIRS}
     ${MIRRENDERERGLDEV_INCLUDE_DIRS}
     ${PROCESS_CPP_INCLUDE_DIRS}
     ${UBUNTU_PLATFORM_API_INCLUDE_DIRS}
diff --git a/src/modules/QtMir/Application/application.cpp b/src/modules/QtMir/Application/application.cpp
index c5979f20..f7ca448a 100644
--- a/src/modules/QtMir/Application/application.cpp
+++ b/src/modules/QtMir/Application/application.cpp
@@ -441,12 +441,6 @@ bool Application::fullscreen() const
     return false;
 }
 
-// TODO
-bool Application::serverSideDecoration() const
-{
-    return true;
-}
-
 void Application::close()
 {
     DEBUG_MSG << "()";
@@ -896,6 +890,16 @@ shellapp::MirSurfaceListInterface* Application::promptSurfaceList() const
     return m_proxyPromptSurfaceList;
 }
 
+bool Application::serverSideDecoration() const
+{
+    return m_ssd;
+}
+
+void Application::setServerSideDecoration(bool ssd) {
+    m_ssd = ssd;
+    Q_EMIT serverSideDecorationChanged(ssd);
+}
+
 void Application::requestFocus()
 {
     if (m_surfaceList.rowCount() > 0) {
diff --git a/src/modules/QtMir/Application/application.h b/src/modules/QtMir/Application/application.h
index 41d8e05d..13514097 100644
--- a/src/modules/QtMir/Application/application.h
+++ b/src/modules/QtMir/Application/application.h
@@ -106,6 +106,8 @@ public:
     lomiri::shell::application::MirSurfaceListInterface* promptSurfaceList() const override;
     int surfaceCount() const override { return surfaceList()->count(); }
     bool serverSideDecoration() const override;
+    void setServerSideDecoration(bool ssd);
+
     void close() override;
 
     ProcessState processState() const { return m_processState; }
@@ -180,6 +182,7 @@ private:
     bool m_exemptFromLifecycle;
     QSize m_initialSurfaceSize;
     bool m_closing{false};
+    bool m_ssd{true};
 
     mutable MirSurfaceListModel m_surfaceList;
     ProxySurfaceListModel *m_proxyPromptSurfaceList;
diff --git a/src/modules/QtMir/Application/application_manager.cpp b/src/modules/QtMir/Application/application_manager.cpp
index 3b135541..fe2a69a8 100644
--- a/src/modules/QtMir/Application/application_manager.cpp
+++ b/src/modules/QtMir/Application/application_manager.cpp
@@ -78,6 +78,32 @@ QString toShortAppIdIfPossible(const QString &appId) {
 
 } // namespace
 
+class NoDesktopAppInfo : public ApplicationInfo
+{
+public:
+    NoDesktopAppInfo(QString name) : m_name(name) {};
+    QString appId() const override { return m_name; };
+    QString name() const override { return m_name; };
+    QString comment() const override { return m_name; };
+    QUrl icon() const override {return QUrl(); };
+    bool showSplash() const override { return false; };
+    QString splashTitle() const override {return m_name; };
+    QUrl splashImage() const override {return QUrl(); };
+    bool splashShowHeader() const override { return false; };
+    QString splashColor() const override { return ""; };
+    QString splashColorHeader() const override { return ""; };
+    QString splashColorFooter() const override { return ""; };
+    Qt::ScreenOrientations supportedOrientations() const override { return Qt::PortraitOrientation |
+                                                                           Qt::LandscapeOrientation |
+                                                                           Qt::InvertedPortraitOrientation |
+                                                                           Qt::InvertedLandscapeOrientation; };
+    bool rotatesWindowContents() const override { return false; };
+    bool isTouchApp() const override { return false; };
+
+private:
+    QString m_name;
+};
+
 ApplicationManager* ApplicationManager::create()
 {
     NativeInterface *nativeInterface = dynamic_cast<NativeInterface*>(QGuiApplication::platformNativeInterface());
@@ -503,6 +529,62 @@ void ApplicationManager::onAppDataChanged(const int role)
     }
 }
 
+QSharedPointer<ApplicationInfo> ApplicationManager::tryFindApp(const pid_t pid)
+{
+    // We first try task controller
+    std::unique_ptr<ProcInfo::CommandLine> info = m_procInfo->commandLine(pid);
+    QString desktopFileName = info->getParameter("--desktop_file_hint=");
+
+    if (desktopFileName.isNull()) {
+        auto environment = m_procInfo->environment(pid);
+        if (environment && environment->contains("DESKTOP_FILE_HINT")) {
+            desktopFileName = environment->getParameter("DESKTOP_FILE_HINT");
+        }
+    }
+
+    qCDebug(QTMIR_APPLICATIONS) << "Trying to find desktop file";
+
+    if (desktopFileName.isNull()) {
+        const auto paths = QStandardPaths::standardLocations(QStandardPaths::ApplicationsLocation);
+        for (const auto &path: paths) {
+            qWarning() << "searching" << path;
+            QDirIterator it(path, QStringList() << "*.desktop", QDir::Files, QDirIterator::Subdirectories);
+            while (it.hasNext()) {
+                auto file = it.next();
+                QTextStream in (&file);
+                QString line;
+                while (!line.isNull()) {
+                    line = in.readLine();
+                    if (line.contains("exec") && line.contains(info->getExec())) {
+                        qWarning() << "found match for" << info->asStringList()[0] << "as" << file;
+                        desktopFileName = file;
+                        break;
+                    }
+                }
+                if (!desktopFileName.isNull())
+                    break;
+            }
+        if (!desktopFileName.isNull())
+            break;
+        }
+    }
+
+    if (!desktopFileName.isNull()) {
+        // Guess appId from the desktop file hint
+        const QString appId = toShortAppIdIfPossible(desktopFileName.split('/').last().remove(QRegExp(QStringLiteral(".desktop$"))));
+
+        qCDebug(QTMIR_APPLICATIONS) << "Process supplied desktop_file_hint, loading:" << appId;
+
+        auto appInfo = m_taskController->getInfoForApp(appId);
+        return appInfo;
+    }
+
+    // If all else fails, make a dummy app info
+    auto nod = new NoDesktopAppInfo(info->getExec());
+    return QSharedPointer<NoDesktopAppInfo>(nod);
+
+}
+
 void ApplicationManager::authorizeSession(const pid_t pid, bool &authorized)
 {
     // This is the only function that is called from a different thread than the one
diff --git a/src/modules/QtMir/Application/application_manager.h b/src/modules/QtMir/Application/application_manager.h
index 59e6ec72..cce98d1f 100644
--- a/src/modules/QtMir/Application/application_manager.h
+++ b/src/modules/QtMir/Application/application_manager.h
@@ -123,6 +123,7 @@ private:
 
     Application* findApplicationWithPromptSession(const mir::scene::PromptSession* promptSession);
     Application *findClosingApplication(const QString &inputAppId) const;
+    QSharedPointer<qtmir::ApplicationInfo> tryFindApp(const pid_t pid);
 
     QList<Application*> m_applications;
     DBusFocusInfo *m_dbusFocusInfo;
diff --git a/src/modules/QtMir/Application/mirbuffersgtexture.cpp b/src/modules/QtMir/Application/mirbuffersgtexture.cpp
index 704a4f08..c4bfb53a 100644
--- a/src/modules/QtMir/Application/mirbuffersgtexture.cpp
+++ b/src/modules/QtMir/Application/mirbuffersgtexture.cpp
@@ -19,6 +19,7 @@
 
 // Mir
 #include <mir/geometry/size.h>
+#include <mir/version.h>
 
 // Qt
 #include <QDebug>
@@ -30,7 +31,7 @@ namespace mg = mir::geometry;
 class MirGlBuffer
 {
 public:
-    MirGlBuffer(const std::shared_ptr<miral::GLBuffer>& buffer);
+    MirGlBuffer(const std::shared_ptr<miroil::GLBuffer>& buffer);
     virtual ~MirGlBuffer();
 
     static std::shared_ptr<MirGlBuffer> from_mir_buffer(const std::shared_ptr<mir::graphics::Buffer>& buffer);
@@ -50,7 +51,7 @@ public:
 protected:
     virtual void bindTexture() = 0;
 
-    std::shared_ptr<miral::GLBuffer> m_mirBuffer;
+    std::shared_ptr<miroil::GLBuffer> m_mirBuffer;
     GLuint m_textureId;
 
 private:
@@ -63,10 +64,14 @@ private:
 class MirGlBufferTexture : public MirGlBuffer
 {
 public:
-    MirGlBufferTexture(const std::shared_ptr<miral::GLBuffer>& buffer)
+    MirGlBufferTexture(const std::shared_ptr<miroil::GLBuffer>& buffer)
         : MirGlBuffer(buffer)
           // Strong reference held by base class.
-        , m_texBuf(static_cast<miral::GLTextureBuffer *>(buffer.get()))
+#if MIR_SERVER_MAJOR_VERSION < 2
+        , m_texBuf(static_cast<miroil::GLTextureBuffer *>(buffer.get()))
+#else
+        , m_texBuf(buffer.get())
+#endif
         {}
 
     void updateTextureId() override
@@ -85,16 +90,21 @@ public:
     }
 
 private:
-    miral::GLTextureBuffer *m_texBuf;
+#if MIR_SERVER_MAJOR_VERSION < 2
+    miroil::GLTextureBuffer *m_texBuf;
+#else
+    miroil::GLBuffer *m_texBuf;
+#endif
 };
 
+#if MIR_SERVER_MAJOR_VERSION < 2
 class MirGlBufferTexturesource : public MirGlBuffer
 {
 public:
-    MirGlBufferTexturesource(const std::shared_ptr<miral::GLBuffer>& buffer)
+    MirGlBufferTexturesource(const std::shared_ptr<miroil::GLBuffer>& buffer)
         : MirGlBuffer(buffer)
           // Strong reference held by base class.
-        , m_texSourceBuf(static_cast<miral::GLTextureSourceBuffer *>(buffer.get()))
+        , m_texSourceBuf(static_cast<miroil::GLTextureSourceBuffer *>(buffer.get()))
         {}
 
     void updateTextureId() override
@@ -113,10 +123,11 @@ public:
     }
 
 private:
-    miral::GLTextureSourceBuffer * m_texSourceBuf;
+    miroil::GLTextureSourceBuffer * m_texSourceBuf;
 };
+#endif
 
-MirGlBuffer::MirGlBuffer(const std::shared_ptr<miral::GLBuffer>& buffer) :
+MirGlBuffer::MirGlBuffer(const std::shared_ptr<miroil::GLBuffer>& buffer) :
     m_mirBuffer(buffer)
     , m_textureId(0)
     , m_needsUpdate(true)
@@ -135,10 +146,12 @@ MirGlBuffer::~MirGlBuffer()
 }
 
 std::shared_ptr<MirGlBuffer> MirGlBuffer::from_mir_buffer(const std::shared_ptr<mir::graphics::Buffer>& buffer) {
-    auto glBuffer = miral::GLBuffer::from_mir_buffer(buffer);
-    if (glBuffer->type() == miral::GLBuffer::Type::GLTextureSource)
+    auto glBuffer = miroil::GLBuffer::from_mir_buffer(buffer);
+ #if MIR_SERVER_MAJOR_VERSION < 2
+    if (glBuffer->type() == miroil::GLBuffer::Type::GLTextureSource)
         return std::make_shared<MirGlBufferTexturesource>(glBuffer);
     else
+#endif
         return std::make_shared<MirGlBufferTexture>(glBuffer);
 }
 
diff --git a/src/modules/QtMir/Application/mirbuffersgtexture.h b/src/modules/QtMir/Application/mirbuffersgtexture.h
index 51579d03..2b45b339 100644
--- a/src/modules/QtMir/Application/mirbuffersgtexture.h
+++ b/src/modules/QtMir/Application/mirbuffersgtexture.h
@@ -17,7 +17,7 @@
 #ifndef MIRBUFFERSGTEXTURE_H
 #define MIRBUFFERSGTEXTURE_H
 
-#include "miral/mirbuffer.h"
+#include <miroil/mirbuffer.h>
 
 #include <QSGTexture>
 
diff --git a/src/modules/QtMir/Application/mirsurface.cpp b/src/modules/QtMir/Application/mirsurface.cpp
index 1290d1f5..3391a5c5 100644
--- a/src/modules/QtMir/Application/mirsurface.cpp
+++ b/src/modules/QtMir/Application/mirsurface.cpp
@@ -18,7 +18,6 @@
 #include "compositortextureprovider.h"
 #include "mirsurface.h"
 #include "mirsurfacelistmodel.h"
-#include "namedcursor.h"
 #include "session_interface.h"
 #include "surfacemanager.h"
 #include "timer.h"
@@ -36,10 +35,13 @@
 
 // Mir
 #include <mir/geometry/rectangle.h>
-#include <mir/scene/surface.h>
-#include <mir/scene/surface_observer.h>
+//#include <mir/scene/surface.h>
+//#include <mir/scene/surface_observer.h>
 #include <mir/version.h>
-#include <mir_toolkit/cursors.h>
+//#include <mir_toolkit/cursors.h>
+// #include <mir_toolkit/event.h>
+#include <miroil/surface_observer.h>
+#include "namedcursor.h"
 
 // mirserver
 #include <logging.h>
@@ -82,7 +84,7 @@ qint64 msecsSinceReference()
 
 } // namespace {
 
-class MirSurface::SurfaceObserverImpl : public SurfaceObserver, public mir::scene::SurfaceObserver
+class MirSurface::SurfaceObserverImpl : public SurfaceObserver, public miroil::SurfaceObserver
 {
 public:
     SurfaceObserverImpl();
@@ -94,7 +96,7 @@ public:
     void attrib_changed(mir::scene::Surface const*, MirWindowAttrib, int) override;
 #if MIR_SERVER_VERSION >= MIR_VERSION_NUMBER(1, 6, 0)
     void content_resized_to(mir::scene::Surface const*, mir::geometry::Size const&) override;
-    void window_resized_to(mir::scene::Surface const*, mir::geometry::Size const&) override {}
+    void window_resized_to(mir::scene::Surface const*, mir::geometry::Size const&) override { qWarning("Window resized to");}
 #else
     void resized_to(mir::scene::Surface const*, mir::geometry::Size const&) override;
 #endif
@@ -106,7 +108,7 @@ public:
 
     void alpha_set_to(mir::scene::Surface const*, float) override {}
     void transformation_set_to(mir::scene::Surface const*, glm::mat4 const&) override {}
-    void reception_mode_set_to(mir::scene::Surface const*, mir::input::InputReceptionMode) override {}
+//    void reception_mode_set_to(mir::scene::Surface const*, mir::input::InputReceptionMode) override {}
     void cursor_image_set_to(mir::scene::Surface const*, mir::graphics::CursorImage const&) override;
     void orientation_set_to(mir::scene::Surface const*, MirOrientation) override {}
     void client_surface_close_requested(mir::scene::Surface const*) override {}
@@ -192,6 +194,10 @@ public:
         connect(this, &WindowNotifierObserver::windowRequestedRaise, this, [surface]() {
             surface->requestFocus();
         });
+        connect(this, &WindowNotifierObserver::windowDecorationChanged, this, [surface]( bool ssd) {
+            Application *app = static_cast<Application*>(surface->session()->application());
+            app->setServerSideDecoration(ssd);
+        });
     }
 };
 
@@ -210,7 +216,7 @@ MirSurface::MirSurface(NewWindow newWindowInfo,
     , m_maxHeight{newWindowInfo.windowInfo.max_height().as_int()}
     , m_incWidth{newWindowInfo.windowInfo.width_inc().as_int()}
     , m_incHeight{newWindowInfo.windowInfo.height_inc().as_int()}
-    , m_surface(newWindowInfo.surface)
+    , m_surface(std::make_shared<miroil::Surface>(newWindowInfo.surface))
     , m_session(session)
     , m_controller(controller)
     , m_orientationAngle(Mir::Angle0)
@@ -235,7 +241,7 @@ MirSurface::MirSurface(NewWindow newWindowInfo,
 
     m_position = convertDisplayToLocalCoords(toQPoint(m_window.top_left()));
 
-    SurfaceObserver::registerObserverForSurface(m_surfaceObserver.get(), m_surface.get());
+    SurfaceObserver::registerObserverForSurface(m_surfaceObserver.get(), m_surface->get_wrapped());
     m_surface->add_observer(m_surfaceObserver);
 
     connect(m_surfaceObserver.get(), &SurfaceObserver::framesPosted, this, &MirSurface::onFramesPostedObserved);
@@ -254,6 +260,10 @@ MirSurface::MirSurface(NewWindow newWindowInfo,
     });
     connect(m_surfaceObserver.get(), &SurfaceObserver::inputBoundsChanged, this, &MirSurface::setInputBounds);
     connect(m_surfaceObserver.get(), &SurfaceObserver::confinesMousePointerChanged, this, &MirSurface::confinesMousePointerChanged);
+    connect(m_surfaceObserver.get(), &SurfaceObserver::resized, this, [&](QSize const &size){
+        m_size = size;
+        QMetaObject::invokeMethod(this, "emitSizeChanged", Qt::QueuedConnection);
+    });
     m_surfaceObserver->setListener(this);
 
     connect(session, &SessionInterface::stateChanged, this, [this]() {
@@ -382,9 +392,9 @@ void MirSurface::dropPendingBuffer()
                 texture->freeBuffer();
                 texture->setBuffer(renderables[0]->buffer());
                 if (texture->textureSize() != m_size) {
-                    m_size = texture->textureSize();
-                    m_sizePendingChange = false;
-                    QMetaObject::invokeMethod(this, "emitSizeChanged", Qt::QueuedConnection);
+                    //m_size = texture->textureSize();
+                    //m_sizePendingChange = false;
+                    //QMetaObject::invokeMethod(this, "emitSizeChanged", Qt::QueuedConnection);
                 }
                 compositorTexture->setUpToDate(true);
 
@@ -440,27 +450,29 @@ QSGTexture *MirSurface::weakTexture(qintptr userId) const
     return compositorTexure ? compositorTexure->texture().toStrongRef().data() : nullptr;
 }
 
-bool MirSurface::updateTexture(qintptr userId)
+std::vector<MirSurface::SubSurfaceTexture> MirSurface::updateTexture(qintptr userId)
 {
     QMutexLocker locker(&m_mutex);
 
     auto compositorTexure = m_textures->compositorTextureForId(userId);
-    if (!compositorTexure) return false;
+    if (!compositorTexure) return {};
 
     return updateTextureLocked(userId, compositorTexure);
 }
 
-bool MirSurface::updateTextureLocked(qintptr userId, CompositorTexture *compositorTexture)
+std::vector<MirSurface::SubSurfaceTexture> MirSurface::updateTextureLocked(qintptr userId, CompositorTexture *compositorTexture)
 {
     auto texture = qWeakPointerCast<MirBufferSGTexture, QSGTexture>(compositorTexture->texture()).lock();
-    if (!texture) return false;
+    // TODO figure out how to cache!
+    //if (!texture) return {};
 
-    if (compositorTexture->isUpToDate()) {
-        return texture->hasBuffer();
-    }
+    //if (compositorTexture->isUpToDate()) {
+    //    return {};
+    //}
 
     auto renderables = m_surface->generate_renderables((void*)userId);
 
+    std::vector<SubSurfaceTexture> subsurfaces;
     if (renderables.size() > 0 &&
             (m_surface->buffers_ready_for_compositor((void*)userId) > 0 || !texture->hasBuffer())
         ) {
@@ -471,12 +483,35 @@ bool MirSurface::updateTextureLocked(qintptr userId, CompositorTexture *composit
         compositorTexture->incrementFrame();
 
         if (texture->textureSize() != m_size) {
-            m_size = texture->textureSize();
-            m_sizePendingChange = false;
-            QMetaObject::invokeMethod(this, "emitSizeChanged", Qt::QueuedConnection);
+            //m_size = texture->textureSize();
+            //m_sizePendingChange = false;
+            //QMetaObject::invokeMethod(this, "emitSizeChanged", Qt::QueuedConnection);
         }
 
         compositorTexture->setUpToDate(true);
+
+        subsurfaces.reserve(renderables.size());
+        for (auto const& renderable : renderables)
+        {
+            auto const mirTopLeft = m_surface->top_left();
+            auto const mirStreamPosition = renderable->screen_position();
+            QRectF const relativePosition(
+                mirStreamPosition.left().as_int() - mirTopLeft.x.as_int(),
+                mirStreamPosition.top().as_int() - mirTopLeft.y.as_int(),
+                mirStreamPosition.size.width.as_int(),
+                mirStreamPosition.size.height.as_int()
+            );
+
+            QSharedPointer<MirBufferSGTexture> texture(new MirBufferSGTexture);
+            texture->freeBuffer();
+            texture->setBuffer(renderable->buffer());
+            subsurfaces.emplace_back(
+                SubSurfaceTexture{
+                    relativePosition,
+                    texture
+                });
+        }
+        m_subTextures = subsurfaces;
     }
 
     if (m_surface->buffers_ready_for_compositor((void*)userId) > 0) {
@@ -485,7 +520,7 @@ bool MirSurface::updateTextureLocked(qintptr userId, CompositorTexture *composit
         QMetaObject::invokeMethod(&m_frameDropperTimer, "start", Qt::QueuedConnection);
     }
 
-    return texture->hasBuffer();
+    return m_subTextures;
 }
 
 bool MirSurface::numBuffersReadyForCompositor(qintptr userId)
@@ -738,7 +773,6 @@ bool MirSurface::visible() const
 {
     return m_visible;
 }
-#include <mir_toolkit/event.h>
 void MirSurface::mousePressEvent(QMouseEvent *event)
 {
     auto ev = EventBuilder::instance()->reconstructMirEvent(event);
@@ -801,9 +835,9 @@ void MirSurface::keyPressEvent(QKeyEvent *qtEvent)
         if (!qtEvent->isAutoRepeat()) {
             Q_ASSERT(!isKeyPressed(qtEvent->nativeVirtualKey()));
             PressedKey pressedKey(qtEvent, msecsSinceReference());
-            auto info = EventBuilder::instance()->findInfo(qtEvent->timestamp());
+            auto info = EventBuilder::instance()->find_info(qtEvent->timestamp());
             if (info) {
-                pressedKey.deviceId = info->deviceId;
+                pressedKey.deviceId = info->device_id;
             }
             m_pressedKeys.append(std::move(pressedKey));
         }
@@ -1080,7 +1114,7 @@ QRect MirSurface::inputBounds() const
 
 bool MirSurface::confinesMousePointer() const
 {
-    return m_surface->confine_pointer_state() == mir_pointer_confined_to_window;
+    return m_surface->is_confined_to_window();
 }
 
 bool MirSurface::allowClientResize() const
@@ -1282,23 +1316,23 @@ MirSurface::SurfaceObserverImpl::SurfaceObserverImpl()
     , m_framesPosted(false)
 {
     // mir cursor names, used by the mir protocol
-
-    m_cursorNameToShape[mir_default_cursor_name] = Qt::ArrowCursor;
-    m_cursorNameToShape[mir_arrow_cursor_name] = Qt::ArrowCursor;
-    m_cursorNameToShape[mir_crosshair_cursor_name] = Qt::CrossCursor;
-    m_cursorNameToShape[mir_busy_cursor_name] =  Qt::WaitCursor;
-    m_cursorNameToShape[mir_caret_cursor_name] = Qt::IBeamCursor;
-    m_cursorNameToShape[mir_vertical_resize_cursor_name] = Qt::SizeVerCursor;
-    m_cursorNameToShape[mir_horizontal_resize_cursor_name] = Qt::SizeHorCursor;
-    m_cursorNameToShape[mir_diagonal_resize_bottom_to_top_cursor_name] = Qt::SizeBDiagCursor;
-    m_cursorNameToShape[mir_diagonal_resize_top_to_bottom_cursor_name] = Qt::SizeFDiagCursor;
-    m_cursorNameToShape[mir_omnidirectional_resize_cursor_name] = Qt::SizeAllCursor;
-    m_cursorNameToShape[mir_disabled_cursor_name] = Qt::BlankCursor;
-    m_cursorNameToShape[mir_vsplit_resize_cursor_name] = Qt::SplitVCursor;
-    m_cursorNameToShape[mir_hsplit_resize_cursor_name] = Qt::SplitHCursor;
-    m_cursorNameToShape[mir_pointing_hand_cursor_name] = Qt::PointingHandCursor;
-    m_cursorNameToShape[mir_open_hand_cursor_name] = Qt::OpenHandCursor;
-    m_cursorNameToShape[mir_closed_hand_cursor_name] = Qt::ClosedHandCursor;
+    // Cursor names are from CSS3: https://www.w3.org/TR/css-ui-3/#propdef-cursor
+    
+    m_cursorNameToShape["default"] = Qt::ArrowCursor;
+    m_cursorNameToShape["crosshair"] = Qt::CrossCursor;
+    m_cursorNameToShape["wait"] =  Qt::WaitCursor;
+    m_cursorNameToShape["text"] = Qt::IBeamCursor;
+    m_cursorNameToShape["ns-resize"] = Qt::SizeVerCursor;
+    m_cursorNameToShape["ew-resize"] = Qt::SizeHorCursor;
+    m_cursorNameToShape["ne-resize"] = Qt::SizeBDiagCursor;
+    m_cursorNameToShape["se-resize"] = Qt::SizeFDiagCursor;
+    m_cursorNameToShape["move"] = Qt::SizeAllCursor;
+    m_cursorNameToShape["none"] = Qt::BlankCursor;
+    m_cursorNameToShape["row-resize"] = Qt::SplitVCursor;
+    m_cursorNameToShape["col-resize"] = Qt::SplitHCursor;
+    m_cursorNameToShape["pointer"] = Qt::PointingHandCursor;
+    m_cursorNameToShape["grab"] = Qt::OpenHandCursor;
+    m_cursorNameToShape["grabbing"] = Qt::ClosedHandCursor;
 
     // xcursor names, used by our cursor themes
 
@@ -1500,7 +1534,8 @@ QPoint MirSurface::convertDisplayToLocalCoords(const QPoint &displayPos) const
     QPoint localPos = displayPos;
 
     if (m_surface->parent()) {
-        auto parentPos = m_surface->parent()->top_left();
+        auto parent    = m_surface->parent();
+        auto parentPos = miroil::Surface(parent).top_left();
         localPos.rx() -= parentPos.x.as_int();
         localPos.ry() -= parentPos.y.as_int();
     }
@@ -1513,7 +1548,9 @@ QPoint MirSurface::convertLocalToDisplayCoords(const QPoint &localPos) const
     QPoint displayPos = localPos;
 
     if (m_surface->parent()) {
-        auto parentPos = m_surface->parent()->top_left();
+        miroil::Surface parent(m_surface->parent());
+        
+        auto parentPos = parent.top_left();
         displayPos.rx() += parentPos.x.as_int();
         displayPos.ry() += parentPos.y.as_int();
     }
@@ -1563,8 +1600,7 @@ void MirSurface::releaseAllPressedKeys()
         auto deltaMs = (ulong)(msecsSinceReference() - pressedKey.msecsSinceReference);
         ulong timestamp = pressedKey.timestamp + deltaMs;
         std::vector<uint8_t> cookie{};
-
-        auto ev = mir::events::make_event(pressedKey.deviceId,
+        auto ev = EventBuilder::instance()->make_key_event(pressedKey.deviceId,
                 uncompressTimestamp<qtmir::Timestamp>(qtmir::Timestamp(timestamp)),
                 cookie, mir_keyboard_action_up, pressedKey.nativeVirtualKey, pressedKey.nativeScanCode,
                 mir_input_event_modifier_none);
diff --git a/src/modules/QtMir/Application/mirsurface.h b/src/modules/QtMir/Application/mirsurface.h
index e7866108..e14dae8b 100644
--- a/src/modules/QtMir/Application/mirsurface.h
+++ b/src/modules/QtMir/Application/mirsurface.h
@@ -38,7 +38,8 @@
 
 // mir
 #include <mir_toolkit/common.h>
-
+#include <mir_toolkit/mir_input_device_types.h>
+#include <miroil/surface.h>
 
 class SurfaceObserver;
 
@@ -130,7 +131,7 @@ public:
     // methods called from the rendering (scene graph) thread:
     QSharedPointer<QSGTexture> texture(qintptr userId) override;
     QSGTexture *weakTexture(qintptr userId) const override;
-    bool updateTexture(qintptr userId) override;
+    std::vector<SubSurfaceTexture> updateTexture(qintptr userId) override;
     unsigned int currentFrameNumber(qintptr userId) const override;
     bool numBuffersReadyForCompositor(qintptr userId) override;
     // end of methods called from the rendering (scene graph) thread
@@ -225,10 +226,12 @@ private:
     void forgetPressedKey(quint32 nativeVirtualKey);
     void releaseAllPressedKeys();
 
-    bool updateTextureLocked(qintptr userId, CompositorTexture* compositorTexture);
+    std::vector<SubSurfaceTexture> updateTextureLocked(qintptr userId, CompositorTexture* compositorTexture);
 
     const miral::Window m_window;
     const std::shared_ptr<ExtraWindowInfo> m_extraInfo;
+    // To manage memory
+    std::vector<SubSurfaceTexture> m_subTextures;
     QString m_name;
     MirWindowType m_type;
     int m_minWidth;
@@ -238,7 +241,7 @@ private:
     int m_incWidth;
     int m_incHeight;
 
-    const std::shared_ptr<mir::scene::Surface> m_surface; // keep copy of the Surface for lifecycle
+    const std::shared_ptr<miroil::Surface> m_surface; // keep copy of the Surface for lifecycle
     QPointer<SessionInterface> m_session;
     WindowControllerInterface *const m_controller;
 
@@ -273,6 +276,7 @@ private:
     bool m_sizePendingChange;
     QSize m_pendingResize;
     QString m_keymap;
+    bool m_ssd;
 
     QCursor m_cursor;
     Mir::State m_state; // FIXME: remove when Mir gains additional window states to match Mir::State
diff --git a/src/modules/QtMir/Application/mirsurfaceinterface.h b/src/modules/QtMir/Application/mirsurfaceinterface.h
index d5fa1dd5..b6384c6b 100644
--- a/src/modules/QtMir/Application/mirsurfaceinterface.h
+++ b/src/modules/QtMir/Application/mirsurfaceinterface.h
@@ -57,7 +57,13 @@ public:
     // methods called from the rendering (scene graph) thread:
     virtual QSharedPointer<QSGTexture> texture(qintptr userId) = 0;
     virtual QSGTexture *weakTexture(qintptr userId) const = 0;
-    virtual bool updateTexture(qintptr userId) = 0;
+    struct SubSurfaceTexture
+    {
+        QRectF extent;
+        QSharedPointer<QSGTexture> texture;
+    };
+    virtual std::vector<SubSurfaceTexture> updateTexture(qintptr userId) = 0;
+
     virtual unsigned int currentFrameNumber(qintptr userId) const = 0;
     virtual bool numBuffersReadyForCompositor(qintptr userId) = 0;
     // end of methods called from the rendering (scene graph) thread
diff --git a/src/modules/QtMir/Application/mirsurfaceitem.cpp b/src/modules/QtMir/Application/mirsurfaceitem.cpp
index 5b509f36..b78ef201 100644
--- a/src/modules/QtMir/Application/mirsurfaceitem.cpp
+++ b/src/modules/QtMir/Application/mirsurfaceitem.cpp
@@ -244,8 +244,9 @@ QSGNode *MirSurfaceItem::updatePaintNode(QSGNode *oldNode, UpdatePaintNodeData *
     ensureTextureProvider();
 
     const qintptr userId = (qintptr)window();
+    auto subtextures = m_surface->updateTexture(userId);
 
-    if (!userId || !m_textureProvider->texture() || !m_surface->updateTexture(userId)) {
+    if (!userId || !m_textureProvider->texture() || subtextures.empty()) {
         delete oldNode;
         return nullptr;
     }
@@ -273,6 +274,64 @@ QSGNode *MirSurfaceItem::updatePaintNode(QSGNode *oldNode, UpdatePaintNodeData *
     auto texture = m_textureProvider->texture();
     node->setTexture(texture);
 
+    // If we have no subtextures at all, drop all other childnodes
+    if (subtextures.size() - 1 <= 0) {
+        if (node->childCount() > 0) {
+            qWarning() << " dropping all childnodes";
+            node->removeAllChildNodes();
+        }
+    } else {
+        // - 1 since first subtexture is main texture
+        bool isEqual = subtextures.size() - 1 == node->childCount();
+        if (!isEqual) {
+            qWarning() << "Not equal, recreating childnodes";
+            if (node->childCount() > 0) {
+                qWarning() << " dropping all childnodes";
+                node->removeAllChildNodes();
+            }   
+        }
+
+        // Meh, this is not great code
+        int first = 0;
+        for (auto sub : subtextures) {
+            first++;
+            // Skip first subtexture as this is the main texture
+            if (first < 2)
+                continue;
+
+            // Atempt at some caching, we only recrate the nodes if the amount of childnodes
+            // does not match subtextures, this could be better
+            QSGDefaultInternalImageNode *subnode;
+            if (isEqual) {
+                subnode = static_cast<QSGDefaultInternalImageNode*>(node->childAtIndex(first - 2));
+                subnode->markDirty(QSGNode::DirtyMaterial);
+            } else {
+        #if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
+                QSGRenderContext *rc = QQuickWindowPrivate::get(window())->context;
+                subnode = new QSGDefaultInternalImageNode(static_cast<QSGDefaultRenderContext *>(rc));
+        #else
+                subnode = new QSGDefaultInternalImageNode;
+        #endif
+                subnode->setMipmapFiltering(QSGTexture::None);
+                subnode->setHorizontalWrapMode(QSGTexture::ClampToEdge);
+                subnode->setVerticalWrapMode(QSGTexture::ClampToEdge);
+            }
+
+            // texture is memory managed by mirsubsufrace's shared buffer
+            subnode->setTexture(sub.texture.data());
+
+            subnode->setSubSourceRect(QRectF(0, 0, 1, 1));
+            subnode->setTargetRect(sub.extent);
+            subnode->setInnerTargetRect(sub.extent);
+            subnode->setFiltering(smooth() ? QSGTexture::Linear : QSGTexture::Nearest);
+            subnode->setAntialiasing(antialiasing());
+            subnode->update();
+
+            if (!isEqual)
+                node->appendChildNode(subnode);
+        }
+    }
+    
     if (m_fillMode == PadOrCrop) {
         const QSize &textureSize = texture->textureSize();
 
@@ -280,6 +339,11 @@ QSGNode *MirSurfaceItem::updatePaintNode(QSGNode *oldNode, UpdatePaintNodeData *
         targetRect.setWidth(qMin(width(), static_cast<qreal>(textureSize.width())));
         targetRect.setHeight(qMin(height(), static_cast<qreal>(textureSize.height())));
 
+        // x/y from extent is offset
+        auto r = subtextures[0].extent;
+        targetRect.setX(r.x());
+        targetRect.setY(r.y());
+
         qreal u = targetRect.width() / textureSize.width();
         qreal v = targetRect.height() / textureSize.height();
         node->setSubSourceRect(QRectF(0, 0, u, v));
@@ -288,9 +352,15 @@ QSGNode *MirSurfaceItem::updatePaintNode(QSGNode *oldNode, UpdatePaintNodeData *
         node->setInnerTargetRect(targetRect);
     } else {
         // Stretch
+        const QSize &textureSize = texture->textureSize();
+        qWarning() << "Streethcing" << height() << textureSize.height();
         node->setSubSourceRect(QRectF(0, 0, 1, 1));
-        node->setTargetRect(QRectF(0, 0, width(), height()));
-        node->setInnerTargetRect(QRectF(0, 0, width(), height()));
+
+        auto r = subtextures[0].extent;
+        auto offset_x = r.x();
+        auto offset_y = r.y();
+        node->setTargetRect(QRectF(offset_x, offset_y, width(), height()));
+        node->setInnerTargetRect(QRectF(offset_x, offset_y, width(), height()));
     }
 
     node->setFiltering(smooth() ? QSGTexture::Linear : QSGTexture::Nearest);
diff --git a/src/modules/QtMir/Application/proc_info.cpp b/src/modules/QtMir/Application/proc_info.cpp
index 3809cece..aab46115 100644
--- a/src/modules/QtMir/Application/proc_info.cpp
+++ b/src/modules/QtMir/Application/proc_info.cpp
@@ -61,6 +61,11 @@ QString ProcInfo::CommandLine::getParameter(const char* name) const
     return QString(regExpMatch.captured(1));
 }
 
+QString ProcInfo::CommandLine::getExec() const
+{
+    return asStringList()[0];
+}
+
 
 std::unique_ptr<ProcInfo::Environment> ProcInfo::environment(pid_t pid)
 {
diff --git a/src/modules/QtMir/Application/proc_info.h b/src/modules/QtMir/Application/proc_info.h
index 2be60b2f..3f589819 100644
--- a/src/modules/QtMir/Application/proc_info.h
+++ b/src/modules/QtMir/Application/proc_info.h
@@ -41,6 +41,7 @@ public:
         bool contains(const char* prefix) const;
         QString getParameter(const char* name) const;
         QStringList asStringList() const;
+        QString getExec() const;
     };
 
     struct Environment {
diff --git a/src/modules/QtMir/Application/session.cpp b/src/modules/QtMir/Application/session.cpp
index c47d1a28..97477c88 100644
--- a/src/modules/QtMir/Application/session.cpp
+++ b/src/modules/QtMir/Application/session.cpp
@@ -64,7 +64,7 @@ const char *sessionStateToString(SessionInterface::State state)
 }
 
 Session::Session(const std::shared_ptr<ms::Session>& session,
-                 const std::shared_ptr<PromptSessionManager>& promptSessionManager,
+                 const std::shared_ptr<miroil::PromptSessionManager>& promptSessionManager,
                  QObject *parent)
     : SessionInterface(parent)
     , m_session(session)
@@ -302,7 +302,7 @@ void Session::suspend()
         m_suspendTimer->start();
 
         foreachPromptSession([this](const qtmir::PromptSession &promptSession) {
-            m_promptSessionManager->suspendPromptSession(promptSession);
+            m_promptSessionManager->suspend_prompt_session(promptSession);
         });
 
         foreachChildSession([](SessionInterface* session) {
@@ -334,7 +334,7 @@ void Session::doResume()
     miral::apply_lifecycle_state_to(session(), mir_lifecycle_state_resumed);
 
     foreachPromptSession([this](const qtmir::PromptSession &promptSession) {
-        m_promptSessionManager->resumePromptSession(promptSession);
+        m_promptSessionManager->resume_prompt_session(promptSession);
     });
 
     foreachChildSession([](SessionInterface* session) {
@@ -494,7 +494,7 @@ void Session::stopPromptSessions()
         qtmir::PromptSession promptSession = it.previous();
         DEBUG_MSG << " - promptSession=" << promptSession.get();
 
-        m_promptSessionManager->stopPromptSession(promptSession);
+        m_promptSessionManager->stop_prompt_session(promptSession);
     }
 }
 
diff --git a/src/modules/QtMir/Application/session.h b/src/modules/QtMir/Application/session.h
index 1d9fa2b2..4bf19cd6 100644
--- a/src/modules/QtMir/Application/session.h
+++ b/src/modules/QtMir/Application/session.h
@@ -23,17 +23,17 @@
 // local
 #include "session_interface.h"
 #include "mirsurfacelistmodel.h"
-#include "promptsessionmanager.h"
 #include "timer.h"
 
+// mir
+#include <miroil/prompt_session_manager.h>
+
 // Qt
 #include <QObject>
 
 
 namespace qtmir {
 
-class PromptSessionManager;
-
 class Application;
 
 class Session : public SessionInterface
@@ -41,7 +41,7 @@ class Session : public SessionInterface
     Q_OBJECT
 public:
     explicit Session(const std::shared_ptr<mir::scene::Session>& session,
-                     const std::shared_ptr<PromptSessionManager>& promptSessionManager,
+                     const std::shared_ptr<miroil::PromptSessionManager>& promptSessionManager,
                      QObject *parent = 0);
     virtual ~Session();
 
@@ -119,7 +119,7 @@ protected:
     bool m_live;
     AbstractTimer* m_suspendTimer{nullptr};
     QVector<PromptSession> m_promptSessions;
-    std::shared_ptr<PromptSessionManager> const m_promptSessionManager;
+    std::shared_ptr<miroil::PromptSessionManager> const m_promptSessionManager;
     QList<MirSurfaceInterface*> m_closingSurfaces;
     bool m_hadSurface{false};
 };
diff --git a/src/modules/QtMir/Application/taskcontroller.cpp b/src/modules/QtMir/Application/taskcontroller.cpp
index a53467a9..7467af93 100644
--- a/src/modules/QtMir/Application/taskcontroller.cpp
+++ b/src/modules/QtMir/Application/taskcontroller.cpp
@@ -51,7 +51,7 @@ TaskController::TaskController(QObject *parent)
     auto appNotifier = static_cast<AppNotifier*>(nativeInterface->nativeResourceForIntegration("AppNotifier"));
     connectToAppNotifier(appNotifier);
 
-    auto promptSessionListener = static_cast<PromptSessionListener*>(nativeInterface->nativeResourceForIntegration("PromptSessionListener"));
+    auto promptSessionListener = static_cast<qtmir::PromptSessionListener*>(nativeInterface->nativeResourceForIntegration("PromptSessionListener"));
     connectToPromptSessionListener(promptSessionListener);
 
     auto sessionAuthorizer = static_cast<SessionAuthorizer*>(nativeInterface->nativeResourceForIntegration("SessionAuthorizer"));
@@ -59,7 +59,7 @@ TaskController::TaskController(QObject *parent)
                      this, &TaskController::authorizationRequestedForSession, Qt::DirectConnection);
 }
 
-TaskController::TaskController(std::shared_ptr<PromptSessionManager> &promptSessionManager, QObject *parent)
+TaskController::TaskController(std::shared_ptr<miroil::PromptSessionManager> &promptSessionManager, QObject *parent)
     : QObject(parent)
     , m_promptSessionManager(promptSessionManager)
 {
@@ -98,7 +98,7 @@ void TaskController::onPromptSessionStarting(const qtmir::PromptSession &promptS
 {
     DEBUG_MSG << " - promptSession=" << promptSession.get();
 
-    std::shared_ptr<mir::scene::Session> appSession = m_promptSessionManager->applicationFor(promptSession);
+    std::shared_ptr<mir::scene::Session> appSession = m_promptSessionManager->application_for(promptSession);
     SessionInterface *qmlAppSession = findSession(appSession.get());
     if (qmlAppSession) {
         m_mirPromptToSessionHash[promptSession.get()] = qmlAppSession;
@@ -170,7 +170,7 @@ void TaskController::connectToAppNotifier(AppNotifier *appNotifier)
                      this, &TaskController::onSessionStopping);
 }
 
-void TaskController::connectToPromptSessionListener(PromptSessionListener *listener)
+void TaskController::connectToPromptSessionListener(qtmir::PromptSessionListener *listener)
 {
     QObject::connect(listener, &PromptSessionListener::promptSessionStarting,
                      this, &TaskController::onPromptSessionStarting);
diff --git a/src/modules/QtMir/Application/taskcontroller.h b/src/modules/QtMir/Application/taskcontroller.h
index f709aa48..4f0729f5 100644
--- a/src/modules/QtMir/Application/taskcontroller.h
+++ b/src/modules/QtMir/Application/taskcontroller.h
@@ -29,7 +29,7 @@
 #include <miral/application_info.h>
 
 // mirserver
-#include "promptsessionmanager.h"
+#include <miroil/prompt_session_manager.h>
 
 namespace mir {
     namespace scene {
@@ -46,13 +46,13 @@ namespace lomiri {
     }
 }
 
-class PromptSessionListener;
-
 namespace qtmir
 {
 
 class AppNotifier;
 class ApplicationInfo;
+class PromptSession;
+class PromptSessionListener;
 class SessionInterface;
 
 class TaskController : public QObject
@@ -107,13 +107,13 @@ public Q_SLOTS:
 
 protected:
     TaskController(QObject *parent = nullptr);
-    TaskController(std::shared_ptr<PromptSessionManager>&, QObject *parent = nullptr);
+    TaskController(std::shared_ptr<miroil::PromptSessionManager>&, QObject *parent = nullptr);
 
 private:
     void connectToAppNotifier(AppNotifier *);
     void connectToPromptSessionListener(PromptSessionListener *);
 
-    std::shared_ptr<PromptSessionManager> m_promptSessionManager;
+    std::shared_ptr<miroil::PromptSessionManager> m_promptSessionManager;
 
     QHash<const mir::scene::PromptSession *, SessionInterface *> m_mirPromptToSessionHash;
     QList<SessionInterface*> m_sessionList;
diff --git a/src/platforms/mirserver/CMakeLists.txt b/src/platforms/mirserver/CMakeLists.txt
index 8f676ce5..d1a63e69 100644
--- a/src/platforms/mirserver/CMakeLists.txt
+++ b/src/platforms/mirserver/CMakeLists.txt
@@ -6,7 +6,14 @@ include(UseLttngGenTp)
 
 set(QTMIRSERVER_ABI 1)
 
-add_subdirectory(miral)
+set(qtmir_include ${CMAKE_SOURCE_DIR}/include)
+
+if(NOT WITH_MIR2)
+  set(MIROIL_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/miroil/include)
+  add_subdirectory(miroil)
+endif()
+
+add_subdirectory(wayland-generated)
 
 # Hacks for the QPA privates monster.
 pkg_check_modules(FONTCONFIG fontconfig REQUIRED)
@@ -41,6 +48,9 @@ include_directories(
     ${CMAKE_CURRENT_BINARY_DIR} # for tracepoints.h
 )
 
+set(MIRCOMMON_INCLUDE_DIRS /usr/include/mircommon/)
+set(MIRCOMMON_LDFLAGS "-lmircommon")
+
 include_directories(
     SYSTEM
     ${MIRAL_INCLUDE_DIRS}
@@ -48,6 +58,8 @@ include_directories(
     ${MIRSERVER_INCLUDE_DIRS}
     ${MIRRENDERERGLDEV_INCLUDE_DIRS}
     ${MIRSERVER_INCLUDE_DIRS}
+    ${MIROIL_INCLUDE_DIRS}
+    ${MIRWAYLAND_INCLUDE_DIRS}
 
     ${URL_DISPATCHER_INCLUDE_DIRS}
     ${EGL_INCLUDE_DIRS}
@@ -98,6 +110,7 @@ add_library(qtmirserver-nomirserver OBJECT
     displayconfigurationstorage.cpp
     nativeinterface.cpp
     services.cpp
+    urlbuilderdispatcher.cpp
     windowcontroller.cpp
     workspacecontroller.cpp
     tracepoints.c
@@ -114,17 +127,14 @@ include_directories(SYSTEM ${MIRSERVER_INCLUDE_DIRS})
 
 # These files will only compile with mirserver-dev
 add_library(qtmirserver-mirserver OBJECT
-    openglcontextfactory.cpp openglcontextfactory.h
-    mircursorimages.cpp
     screenscontroller.cpp
     qtcompositor.cpp
     displayconfigurationpolicy.cpp
     wrappedwindowmanagementpolicy.cpp
-    mirdisplayconfigurationobserver.cpp
-    mirserverhooks.cpp mirserverhooks.h
-    setqtcompositor.cpp setqtcompositor.h
-    eventdispatch.cpp eventdispatch.h
-    promptsessionmanager.cpp promptsessionmanager.h promptsession.h
+ #   mirdisplayconfigurationobserver.cpp
+    wayland-generated/qt-windowmanager_wrapper.cpp
+    wayland-generated/xdg-decoration-unstable-v1_wrapper.cpp
+    wayland-generated/server-decoration_wrapper.cpp
 )
 add_dependencies(qtmirserver-mirserver MirServer_LTTNG)
 
@@ -133,6 +143,7 @@ set(QMIRSERVER_PLUGIN_SRC
     ${CMAKE_SOURCE_DIR}/src/common/debughelpers.cpp
     cursor.cpp
     eventbuilder.cpp
+    qtwindowmanager.cpp
     qteventfeeder.cpp
     qmirserver.cpp
     qmirserver_p.cpp
@@ -145,6 +156,9 @@ set(QMIRSERVER_PLUGIN_SRC
     mirserverapplication.cpp
     windowmodelnotifier.cpp
 
+    wayland/xdgdecorationV1.cpp
+    wayland/kwinserverdecoration.cpp
+
 # We need to run moc on these headers
     ${APPLICATION_API_INCLUDEDIR}/lomiri/shell/application/MirMousePointerInterface.h
     ${APPLICATION_API_INCLUDEDIR}/lomiri/shell/application/Mir.h
@@ -165,16 +179,22 @@ set(QMIRSERVER_PLUGIN_SRC
     ${CMAKE_SOURCE_DIR}/src/common/appnotifier.h
 )
 
+if(NOT WITH_MIR2)
+  set(MIROIL_OBJ $<TARGET_OBJECTS:miroil>)
+endif()
+
 add_library(qtmirserver SHARED
     ${QMIRSERVER_PLUGIN_SRC}
     $<TARGET_OBJECTS:qtmirserver-nomirserver>
     $<TARGET_OBJECTS:qtmirserver-mirserver>
-    $<TARGET_OBJECTS:miral-prototypes>
+    ${MIROIL_OBJ}
 )
 
 target_link_libraries(qtmirserver
     PUBLIC
         ${MIRAL_LDFLAGS}
+        ${MIROIL_LDFLAGS}
+        ${MIROIL_LIBRARIES}
         ${MIRSERVER_LDFLAGS}
         Qt5::Core
         Qt5::Gui
@@ -188,6 +208,11 @@ target_link_libraries(qtmirserver
         ${FONTCONFIG_LDFLAGS}
         ${XKBCOMMON_LIBRARIES}
 
+        ${MIRCOMMON_LDFLAGS}
+        ${MIRWAYLAND_LDFLAGS}
+        ${WAYLAND_CLIENT_LIBRARIES}
+        ${WAYLAND_SERVER_LDFLAGS}
+
         ${CONTENT_HUB_LIBRARIES}
 
         Qt5::DBus
@@ -225,6 +250,15 @@ install(
   DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig
 )
 
+if(NOT WITH_MIR2)
+  # To avoid conflicts, we install to qtmir include
+  # and since do -I/some/thing/qtmir in the .pc we can
+  # include miroil as <miroil/blah>
+  install(
+    DIRECTORY ${CMAKE_SOURCE_DIR}/include/miroil
+    DESTINATION "include/qtmir"
+  )
+endif()
 
 add_library(qpa-mirserver SHARED
     mirserverintegration.cpp
diff --git a/src/platforms/mirserver/eventbuilder.cpp b/src/platforms/mirserver/eventbuilder.cpp
index eca408e1..9cd54cb1 100644
--- a/src/platforms/mirserver/eventbuilder.cpp
+++ b/src/platforms/mirserver/eventbuilder.cpp
@@ -21,9 +21,6 @@
 // common
 #include <timestamp.h>
 
-#include <mir_toolkit/event.h>
-#include <mir_toolkit/mir_cookie.h>
-
 #include <QDebug>
 
 namespace {
@@ -96,7 +93,6 @@ EventBuilder *EventBuilder::instance()
 }
 
 EventBuilder::EventBuilder()
-    : m_eventInfoVector(10)
 {
 }
 
@@ -105,18 +101,6 @@ EventBuilder::~EventBuilder()
     m_instance = nullptr;
 }
 
-void EventBuilder::store(const MirInputEvent *mirInputEvent, ulong qtTimestamp)
-{
-    EventInfo &eventInfo = m_eventInfoVector[m_nextIndex];
-    eventInfo.store(mirInputEvent, qtTimestamp);
-
-    m_nextIndex = (m_nextIndex + 1) % m_eventInfoVector.size();
-
-    if (m_count < m_eventInfoVector.size()) {
-        ++m_count;
-    }
-}
-
 mir::EventUPtr EventBuilder::reconstructMirEvent(QMouseEvent *qtEvent)
 {
     auto buttons = getMirButtonsFromQt(qtEvent->buttons());
@@ -143,19 +127,19 @@ mir::EventUPtr EventBuilder::makeMirEvent(QInputEvent *qtEvent, int x, int y, Mi
     // Timestamp will be zero in case of synthetic events. Particularly synthetic QHoverEvents caused
     // by item movement under a stationary mouse pointer.
     if (qtEvent->timestamp() != 0) {
-        auto eventInfo = findInfo(qtEvent->timestamp());
+        auto eventInfo = find_info(qtEvent->timestamp());
         if (eventInfo) {
-            relativeX = eventInfo->relativeX;
-            relativeY = eventInfo->relativeY;
-            deviceId = eventInfo->deviceId;
+            relativeX = eventInfo->relative_x;
+            relativeY = eventInfo->relative_y;
+            deviceId = eventInfo->device_id;
             cookie = eventInfo->cookie;
         } else {
             qCWarning(QTMIR_MIR_INPUT) << "EventBuilder::makeMirEvent didn't find EventInfo with timestamp" << qtEvent->timestamp();
         }
     }
 
-    return mir::events::make_event(deviceId, timestamp, cookie, modifiers, action,
-                                   buttons, x, y, 0 /*hscroll*/, 0 /*vscroll*/, relativeX, relativeY);
+    return make_pointer_event(deviceId, timestamp, cookie, modifiers, action,
+                      buttons, x, y, 0 /*hscroll*/, 0 /*vscroll*/, relativeX, relativeY);
 }
 
 mir::EventUPtr EventBuilder::makeMirEvent(QWheelEvent *qtEvent)
@@ -172,19 +156,19 @@ mir::EventUPtr EventBuilder::makeMirEvent(QWheelEvent *qtEvent)
     mirScroll /= 120.0f;
 
     if (qtEvent->timestamp() != 0) {
-        auto eventInfo = findInfo(qtEvent->timestamp());
+        auto eventInfo = find_info(qtEvent->timestamp());
         if (eventInfo) {
-            deviceId = eventInfo->deviceId;
+            deviceId = eventInfo->device_id;
             cookie = eventInfo->cookie;
         } else {
             qCWarning(QTMIR_MIR_INPUT) << "EventBuilder::makeMirEvent didn't find EventInfo with timestamp" << qtEvent->timestamp();
         }
     }
 
-    return mir::events::make_event(deviceId, timestamp, cookie, modifiers, mir_pointer_action_motion,
-                                   buttons, qtEvent->x(), qtEvent->y(),
-                                   mirScroll.x(), mirScroll.y(),
-                                   0, 0);
+    return make_pointer_event(deviceId, timestamp, cookie, modifiers, mir_pointer_action_motion,
+                      buttons, qtEvent->x(), qtEvent->y(),
+                      mirScroll.x(), mirScroll.y(),
+                      0, 0);
 }
 
 mir::EventUPtr EventBuilder::makeMirEvent(QKeyEvent *qtEvent)
@@ -207,19 +191,19 @@ mir::EventUPtr EventBuilder::makeMirEvent(QKeyEvent *qtEvent)
     std::vector<uint8_t> cookie{};
 
     if (qtEvent->timestamp() != 0) {
-        auto eventInfo = findInfo(qtEvent->timestamp());
+        auto eventInfo = find_info(qtEvent->timestamp());
         if (eventInfo) {
-            deviceId = eventInfo->deviceId;
+            deviceId = eventInfo->device_id;
             cookie = eventInfo->cookie;
         } else {
             qCWarning(QTMIR_MIR_INPUT) << "EventBuilder::makeMirEvent didn't find EventInfo with timestamp" << qtEvent->timestamp();
         }
     }
 
-    return mir::events::make_event(deviceId, uncompressTimestamp<qtmir::Timestamp>(qtmir::Timestamp(qtEvent->timestamp())),
-                           cookie, action, qtEvent->nativeVirtualKey(),
-                           qtEvent->nativeScanCode(),
-                           qtEvent->nativeModifiers());
+    return make_key_event(deviceId, uncompressTimestamp<qtmir::Timestamp>(qtmir::Timestamp(qtEvent->timestamp())),
+                          cookie, action, qtEvent->nativeVirtualKey(),
+                          qtEvent->nativeScanCode(),
+                          qtEvent->nativeModifiers());
 }
 
 mir::EventUPtr EventBuilder::makeMirEvent(Qt::KeyboardModifiers qmods,
@@ -231,9 +215,9 @@ mir::EventUPtr EventBuilder::makeMirEvent(Qt::KeyboardModifiers qmods,
     std::vector<uint8_t> cookie{};
 
     if (qtTimestamp != 0) {
-        auto eventInfo = findInfo(qtTimestamp);
+        auto eventInfo = find_info(qtTimestamp);
         if (eventInfo) {
-            deviceId = eventInfo->deviceId;
+            deviceId = eventInfo->device_id;
             cookie = eventInfo->cookie;
         } else {
             qCWarning(QTMIR_MIR_INPUT) << "EventBuilder::makeMirEvent didn't find EventInfo with timestamp" << qtTimestamp;
@@ -241,8 +225,8 @@ mir::EventUPtr EventBuilder::makeMirEvent(Qt::KeyboardModifiers qmods,
     }
 
     auto modifiers = getMirModifiersFromQt(qmods);
-    auto ev = mir::events::make_event(deviceId, uncompressTimestamp<qtmir::Timestamp>(qtmir::Timestamp(qtTimestamp)),
-                                      cookie, modifiers);
+    auto ev = make_touch_event(deviceId, uncompressTimestamp<qtmir::Timestamp>(qtmir::Timestamp(qtTimestamp)),
+                               cookie, modifiers);
 
     for (int i = 0; i < qtTouchPoints.count(); ++i) {
         auto touchPoint = qtTouchPoints.at(i);
@@ -262,44 +246,13 @@ mir::EventUPtr EventBuilder::makeMirEvent(Qt::KeyboardModifiers qmods,
         if (touchPoint.flags() & QTouchEvent::TouchPoint::Pen)
             tooltype = mir_touch_tooltype_stylus;
 
-        mir::events::add_touch(*ev, id, action, tooltype,
-                               touchPoint.pos().x(), touchPoint.pos().y(),
-                               touchPoint.pressure(),
-                               touchPoint.rect().width(),
-                               touchPoint.rect().height(),
-                               0 /* size */);
+        add_touch(*ev, id, action, tooltype,
+                  touchPoint.pos().x(), touchPoint.pos().y(),
+                  touchPoint.pressure(),
+                  touchPoint.rect().width(),
+                  touchPoint.rect().height(),
+                  0 /* size */);
     }
 
     return ev;
 }
-
-EventBuilder::EventInfo *EventBuilder::findInfo(ulong qtTimestamp)
-{
-    for (int i = 0; i < m_count; ++i) {
-        if (m_eventInfoVector[i].qtTimestamp == qtTimestamp) {
-            return &m_eventInfoVector[i];
-        }
-    }
-    return nullptr;
-}
-
-void EventBuilder::EventInfo::store(const MirInputEvent *iev, ulong qtTimestamp)
-{
-    this->qtTimestamp = qtTimestamp;
-    deviceId = mir_input_event_get_device_id(iev);
-    if (mir_input_event_has_cookie(iev))
-    {
-        auto cookie_ptr = mir_input_event_get_cookie(iev);
-        cookie.resize(mir_cookie_buffer_size(cookie_ptr));
-        mir_cookie_to_buffer(cookie_ptr, cookie.data(), cookie.size());
-        mir_cookie_release(cookie_ptr);
-    } else {
-        cookie.resize(0);
-    }
-    if (mir_input_event_type_pointer == mir_input_event_get_type(iev))
-    {
-        auto pev = mir_input_event_get_pointer_event(iev);
-        relativeX = mir_pointer_event_axis_value(pev, mir_pointer_axis_relative_x);
-        relativeY = mir_pointer_event_axis_value(pev, mir_pointer_axis_relative_y);
-    }
-}
diff --git a/src/platforms/mirserver/eventbuilder.h b/src/platforms/mirserver/eventbuilder.h
index 708ffd62..aeb462c5 100644
--- a/src/platforms/mirserver/eventbuilder.h
+++ b/src/platforms/mirserver/eventbuilder.h
@@ -16,6 +16,7 @@
 
 #ifndef QTMIR_EVENT_REGISTRY_H
 #define QTMIR_EVENT_REGISTRY_H
+#include <miroil/event_builder.h>
 
 #include <QtGlobal>
 #include <QHoverEvent>
@@ -25,10 +26,6 @@
 #include <QTouchEvent>
 #include <QVector>
 
-#include <mir/events/event_builders.h>
-
-class MirPointerEvent;
-
 namespace qtmir {
 
 /*
@@ -37,17 +34,13 @@ namespace qtmir {
     One important feature is that it's able to match a QInputEvent with the MirInputEvent that originated it, so
     it can make a MirInputEvent version of a QInputEvent containing also information that the latter does not carry,
     such as relative axis movement for pointer devices.
- */
-class EventBuilder {
+*/
+class EventBuilder : public miroil::EventBuilder {
 public:
     static EventBuilder *instance();
     EventBuilder();
     virtual ~EventBuilder();
 
-    /* Stores information that cannot be carried by QInputEvents so that it can be fully
-       reconstructed later given the same qtTimestamp */
-    void store(const MirInputEvent *mirInputEvent, ulong qtTimestamp);
-
     /*
         Builds a MirEvent version of the given QInputEvent using also extra data from the
         MirPointerEvent that caused it.
@@ -69,37 +62,10 @@ public:
                                 const QList<QTouchEvent::TouchPoint> &qtTouchPoints,
                                 Qt::TouchPointStates /* qtTouchPointStates */,
                                 ulong qtTimestamp);
-    class EventInfo {
-    public:
-        void store(const MirInputEvent *mirInputEvent, ulong qtTimestamp);
-        ulong qtTimestamp;
-        MirInputDeviceId deviceId;
-        std::vector<uint8_t> cookie;
-        float relativeX{0};
-        float relativeY{0};
-    };
-
-    EventInfo *findInfo(ulong qtTimestamp);
 
 private:
     mir::EventUPtr makeMirEvent(QInputEvent *qtEvent, int x, int y, MirPointerButtons buttons);
 
-
-    /*
-      Ring buffer that stores information on recent MirInputEvents that cannot be carried by QInputEvents.
-
-      When MirInputEvents are dispatched through a QML scene, not all of its information can be carried
-      by QInputEvents. Some information is lost. Thus further on, if we want to transform a QInputEvent back into
-      its original MirInputEvent so that it can be consumed by a mir::scene::Surface and properly handled by mir clients
-      we have to reach out to this EventRegistry to get the missing bits.
-
-      Given the objective of this EventRegistry (MirInputEvent reconstruction after having gone through QQuickWindow input dispatch
-      as a QInputEvent), it stores information only about the most recent MirInputEvents.
-     */
-    QVector<EventInfo> m_eventInfoVector;
-    int m_nextIndex{0};
-    int m_count{0};
-
     static EventBuilder *m_instance;
 };
 
diff --git a/src/platforms/mirserver/inputdeviceobserver.cpp b/src/platforms/mirserver/inputdeviceobserver.cpp
index 60e59c09..3a61e20c 100644
--- a/src/platforms/mirserver/inputdeviceobserver.cpp
+++ b/src/platforms/mirserver/inputdeviceobserver.cpp
@@ -14,9 +14,6 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-#include <mir/input/device.h>
-#include <mir/input/mir_keyboard_config.h>
-
 #include <Qt>
 #include <QTimer>
 
@@ -49,12 +46,12 @@ void MirInputDeviceObserver::setKeymap(const QString &keymap)
 
 void MirInputDeviceObserver::applyKeymap()
 {
-    Q_FOREACH(const auto &device, m_devices) {
+    Q_FOREACH(auto &device, m_devices) {
         applyKeymap(device);
     }
 }
 
-void MirInputDeviceObserver::applyKeymap(const std::shared_ptr<mi::Device> &device)
+void MirInputDeviceObserver::applyKeymap(miroil::InputDevice device)
 {
     if (!m_keymap.isEmpty()) {
         const QStringList stringList = m_keymap.split('+', QString::SkipEmptyParts);
@@ -66,20 +63,11 @@ void MirInputDeviceObserver::applyKeymap(const std::shared_ptr<mi::Device> &devi
             variant = stringList.at(1);
         }
 
-        qCDebug(QTMIR_MIR_KEYMAP) << "Applying keymap" <<  layout << variant << "on" << device->id() << QString::fromStdString(device->name());
-        MirKeyboardConfig oldConfig;
-        mi::Keymap keymap;
-        if (device->keyboard_configuration().is_set()) { // preserve the model and options
-            oldConfig = device->keyboard_configuration().value();
-            keymap.model = oldConfig.device_keymap().model;
-            keymap.options = oldConfig.device_keymap().options;
-        }
-        keymap.layout = layout.toStdString();
-        keymap.variant = variant.toStdString();
+        qCDebug(QTMIR_MIR_KEYMAP) << "Applying keymap" <<  layout << variant << "on" << device.get_device_id() << QString::fromStdString(device.get_device_name());
 
         try
         {
-            device->apply_keyboard_configuration(std::move(keymap));
+            device.apply_keymap(layout.toStdString(), variant.toStdString());
             qCDebug(QTMIR_MIR_KEYMAP) << "Keymap applied";
         }
         catch(std::exception const& e)
@@ -88,3 +76,25 @@ void MirInputDeviceObserver::applyKeymap(const std::shared_ptr<mi::Device> &devi
         }
     }
 }
+
+void MirInputDeviceObserver::device_added(miroil::InputDevice device)
+{
+    QMutexLocker locker(&m_mutex);  // lock so that Qt and Mir don't apply the keymap at the same time
+    
+    if (device.is_keyboard() && device.is_alpha_numeric()) {
+        qCDebug(QTMIR_MIR_KEYMAP) << "Device added" << device.get_device_id();
+        m_devices.append(device);
+        applyKeymap(device);
+    }
+}
+
+void MirInputDeviceObserver::device_removed(miroil::InputDevice device)
+{
+    QMutexLocker locker(&m_mutex);  // lock so that Qt and Mir don't apply the keymap at the same time
+
+    auto i = m_devices.indexOf(device);
+    if (i >= 0) {
+        qCDebug(QTMIR_MIR_KEYMAP) << "Device removed" << device.get_device_id();
+        m_devices.remove(i);
+    }
+}
diff --git a/src/platforms/mirserver/inputdeviceobserver.h b/src/platforms/mirserver/inputdeviceobserver.h
index 1fb56243..c0199389 100644
--- a/src/platforms/mirserver/inputdeviceobserver.h
+++ b/src/platforms/mirserver/inputdeviceobserver.h
@@ -14,8 +14,8 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-#ifndef INPUTDEVICEOBSERVER_H
-#define INPUTDEVICEOBSERVER_H
+#ifndef QTMIR_MIR_INPUT_DEVICE_OBSERVER_H
+#define QTMIR_MIR_INPUT_DEVICE_OBSERVER_H
 
 #include <QObject>
 #include <QString>
@@ -23,11 +23,13 @@
 #include <QMutex>
 #include <memory>
 
+#include "miroil/input_device_observer.h"
+
 namespace mir { namespace input { class Device; }}
 
 namespace qtmir {
 
-class MirInputDeviceObserver: public QObject
+class MirInputDeviceObserver: public QObject, public miroil::InputDeviceObserver
 {
     Q_OBJECT
 public:
@@ -39,10 +41,12 @@ private Q_SLOTS:
 
 protected:
     void applyKeymap();
-    void applyKeymap(const std::shared_ptr<mir::input::Device> &device);
+    void applyKeymap(miroil::InputDevice device);
+    void device_added(miroil::InputDevice device);
+    void device_removed(miroil::InputDevice device);
 
     QString m_keymap;
-    QVector<std::shared_ptr<mir::input::Device>> m_devices;
+    QVector<miroil::InputDevice> m_devices;
     QMutex m_mutex;
 };
 
diff --git a/src/platforms/mirserver/logging.cpp b/src/platforms/mirserver/logging.cpp
index af12e7d5..1bed03d1 100644
--- a/src/platforms/mirserver/logging.cpp
+++ b/src/platforms/mirserver/logging.cpp
@@ -26,3 +26,4 @@ Q_LOGGING_CATEGORY(QTMIR_CLIPBOARD, "qtmir.clipboard")
 Q_LOGGING_CATEGORY(QTMIR_SENSOR_MESSAGES, "qtmir.sensor")
 Q_LOGGING_CATEGORY(QTMIR_SCREENS, "qtmir.screens")
 Q_LOGGING_CATEGORY(QTMIR_DBUS, "qtmir.dbus", QtWarningMsg)
+Q_LOGGING_CATEGORY(QTMIR_URLBUILDER, "qtmir.urlbuilder", QtInfoMsg)
diff --git a/src/platforms/mirserver/logging.h b/src/platforms/mirserver/logging.h
index 43d5d50f..4f93fe0d 100644
--- a/src/platforms/mirserver/logging.h
+++ b/src/platforms/mirserver/logging.h
@@ -28,5 +28,6 @@ Q_DECLARE_LOGGING_CATEGORY(QTMIR_MIR_KEYMAP)
 Q_DECLARE_LOGGING_CATEGORY(QTMIR_CLIPBOARD)
 Q_DECLARE_LOGGING_CATEGORY(QTMIR_SCREENS)
 Q_DECLARE_LOGGING_CATEGORY(QTMIR_DBUS)
+Q_DECLARE_LOGGING_CATEGORY(QTMIR_URLBUILDER)
 
 #endif // UBUNTU_APPLICATION_PLUGIN_LOGGING_H
diff --git a/src/platforms/mirserver/miral/CMakeLists.txt b/src/platforms/mirserver/miral/CMakeLists.txt
deleted file mode 100644
index 9f254c98..00000000
--- a/src/platforms/mirserver/miral/CMakeLists.txt
+++ /dev/null
@@ -1,14 +0,0 @@
-include_directories(SYSTEM ${MIRSERVER_INCLUDE_DIRS} ${MIRRENDERERGLDEV_INCLUDE_DIRS})
-
-include_directories(
-    ${CMAKE_SOURCE_DIR}/include
-)
-
-add_library(miral-prototypes OBJECT
-    persist_display_config.cpp persist_display_config.h
-    mirbuffer.cpp mirbuffer.h
-    ${CMAKE_SOURCE_DIR}/include/qtmir/miral/display_configuration_storage.h
-    edid.cpp ${CMAKE_SOURCE_DIR}/include/qtmir/miral/display_id.h
-    edid.cpp ${CMAKE_SOURCE_DIR}/include/qtmir/miral/edid.h
-    display_configuration_policy.cpp ${CMAKE_SOURCE_DIR}/include/qtmir/miral/display_configuration_policy.h
-)
diff --git a/src/platforms/mirserver/miroil/CMakeLists.txt b/src/platforms/mirserver/miroil/CMakeLists.txt
new file mode 100644
index 00000000..febd4f0a
--- /dev/null
+++ b/src/platforms/mirserver/miroil/CMakeLists.txt
@@ -0,0 +1 @@
+add_subdirectory(src)
diff --git a/src/platforms/mirserver/miroil/include/miroil/compositor.h b/src/platforms/mirserver/miroil/include/miroil/compositor.h
new file mode 100644
index 00000000..2edf40e2
--- /dev/null
+++ b/src/platforms/mirserver/miroil/include/miroil/compositor.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright © 2021 Canonical Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef MIROIL_COMPOSITOR_H
+#define MIROIL_COMPOSITOR_H
+
+namespace miroil
+{
+
+class Compositor
+{
+    public:
+    virtual ~Compositor();
+
+    Compositor& operator=(Compositor const&) = delete;
+
+    virtual void start() = 0;
+    virtual void stop()  = 0;
+
+protected:
+    Compositor() = default;
+    Compositor(Compositor const&) = delete;
+};
+
+}
+
+#endif // MIROIL_COMPOSITOR_H
diff --git a/src/platforms/mirserver/miroil/include/miroil/display_configuration_controller_wrapper.h b/src/platforms/mirserver/miroil/include/miroil/display_configuration_controller_wrapper.h
new file mode 100644
index 00000000..6b4f227a
--- /dev/null
+++ b/src/platforms/mirserver/miroil/include/miroil/display_configuration_controller_wrapper.h
@@ -0,0 +1,51 @@
+/*
+ * Copyright (C) 2021 Canonical, Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef MIROIL_DISPLAY_CONFIGURATION_CONTROLLER_WRAPPER_H_
+#define MIROIL_DISPLAY_CONFIGURATION_CONTROLLER_WRAPPER_H_
+
+#include <memory>
+
+namespace mir { namespace shell { class DisplayConfigurationController; } }
+namespace mir { namespace graphics { class DisplayConfiguration; } }
+
+namespace miroil
+{
+    
+class DisplayConfigurationControllerWrapper
+{
+public:
+    DisplayConfigurationControllerWrapper(std::shared_ptr<mir::shell::DisplayConfigurationController> const & wrapped);
+    ~DisplayConfigurationControllerWrapper() = default;
+
+    /**
+     * Set the base display configuration.
+     *
+     * This is the display configuration that is used by default, but will be
+     * overridden by a client's requested configuration if that client is focused.
+     *
+     * \param [in]  conf    The new display configuration to set
+     */
+    void set_base_configuration(std::shared_ptr<mir::graphics::DisplayConfiguration> const& conf);
+    
+private:
+    std::shared_ptr<mir::shell::DisplayConfigurationController> const & wrapped;
+};
+
+}
+
+#endif //MIROIL_DISPLAY_CONFIGURATION_CONTROLLER_WRAPPER_H_
+
diff --git a/src/platforms/mirserver/miroil/include/miroil/display_listener_wrapper.h b/src/platforms/mirserver/miroil/include/miroil/display_listener_wrapper.h
new file mode 100644
index 00000000..7c4ced19
--- /dev/null
+++ b/src/platforms/mirserver/miroil/include/miroil/display_listener_wrapper.h
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2021 Canonical, Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef MIROIL_DISPLAY_LISTENER_WRAPPER_H
+#define MIROIL_DISPLAY_LISTENER_WRAPPER_H
+#include <memory>
+
+namespace mir { 
+    namespace geometry { struct Rectangle; } 
+    namespace compositor { class DisplayListener; }
+}
+
+namespace miroil
+{
+    
+class DisplayListenerWrapper
+{
+public:
+    DisplayListenerWrapper(std::shared_ptr<mir::compositor::DisplayListener> const& display_listener);
+    ~DisplayListenerWrapper();
+
+    virtual void add_display(mir::geometry::Rectangle const& area);
+    virtual void remove_display(mir::geometry::Rectangle const& area);
+
+private:
+    std::shared_ptr<mir::compositor::DisplayListener> const& display_listener;     
+};
+
+}
+
+#endif /* MIROIL_DISPLAY_LISTENER_WRAPPER_H */
diff --git a/src/platforms/mirserver/miroil/include/miroil/event_builder.h b/src/platforms/mirserver/miroil/include/miroil/event_builder.h
new file mode 100644
index 00000000..184552b3
--- /dev/null
+++ b/src/platforms/mirserver/miroil/include/miroil/event_builder.h
@@ -0,0 +1,117 @@
+/*
+ * Copyright (C) 2016-2021 Canonical, Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef MIROIL_EVENT_BUILDER_H
+#define MIROIL_EVENT_BUILDER_H
+
+#include <mir_toolkit/mir_input_device_types.h>
+#include <miral/version.h>
+#if MIRAL_VERSION >= MIR_VERSION_NUMBER(3, 0, 0)
+#include <miral/toolkit_event.h>
+#else
+#include <mir_toolkit/event.h>
+#endif
+
+#include <chrono>
+#include <memory>
+#include <sys/types.h>
+#include <vector>
+
+struct MirEvent;
+struct MirInputEvent;
+
+namespace mir { typedef std::unique_ptr<MirEvent, void(*)(MirEvent*)> EventUPtr; }
+
+namespace miroil
+{
+    
+/*
+    Creates Mir input events out of Qt input events
+    
+    The class is splitt into miroil::EventBuilder which does the internal mir stuff, 
+    and qtmir::EventBuilder which handles the qt stuff. 
+
+    One important feature is that it's able to match a QInputEvent with the MirInputEvent that originated it, so
+    it can make a MirInputEvent version of a QInputEvent containing also information that the latter does not carry,
+    such as relative axis movement for pointer devices.
+*/
+    
+class EventBuilder {
+    
+public:
+    class EventInfo {
+    public:
+        void store(const MirInputEvent *mirInputEvent, ulong qtTimestamp);
+        
+        ulong timestamp;
+        MirInputDeviceId device_id;
+        std::vector<uint8_t> cookie;
+        float relative_x{0};
+        float relative_y{0};
+    };
+    
+public:
+    EventBuilder();
+    virtual ~EventBuilder();
+    
+    // add Touch event
+    void add_touch(MirEvent &event, MirTouchId touch_id, MirTouchAction action,
+        MirTouchTooltype tooltype, float x_axis_value, float y_axis_value,
+        float pressure_value, float touch_major_value, float touch_minor_value, float size_value);
+    
+    // Key event
+    mir::EventUPtr make_key_event(MirInputDeviceId device_id, std::chrono::nanoseconds timestamp,
+        std::vector<uint8_t> const& cookie, MirKeyboardAction action, xkb_keysym_t key_code,
+        int scan_code, MirInputEventModifiers modifiers);
+
+    // Touch event
+    mir::EventUPtr make_touch_event(MirInputDeviceId device_id, std::chrono::nanoseconds timestamp,
+        std::vector<uint8_t> const& mac, MirInputEventModifiers modifiers);
+
+    // Pointer event
+    mir::EventUPtr make_pointer_event(MirInputDeviceId device_id, std::chrono::nanoseconds timestamp,
+        std::vector<uint8_t> const& mac, MirInputEventModifiers modifiers, MirPointerAction action,
+        MirPointerButtons buttons_pressed,
+        float x_axis_value, float y_axis_value,
+        float hscroll_value, float vscroll_value,
+        float relative_x_value, float relative_y_value);
+    
+    EventInfo * find_info(ulong qtTimestamp);    
+        
+    /* Stores information that cannot be carried by QInputEvents so that it can be fully
+       reconstructed later given the same qtTimestamp */
+    void store(const MirInputEvent *mirInputEvent, ulong qtTimestamp);
+
+private:
+    /*
+      Ring buffer that stores information on recent MirInputEvents that cannot be carried by QInputEvents.
+
+      When MirInputEvents are dispatched through a QML scene, not all of its information can be carried
+      by QInputEvents. Some information is lost. Thus further on, if we want to transform a QInputEvent back into
+      its original MirInputEvent so that it can be consumed by a mir::scene::Surface and properly handled by mir clients
+      we have to reach out to this EventRegistry to get the missing bits.
+
+      Given the objective of this EventRegistry (MirInputEvent reconstruction after having gone through QQuickWindow input dispatch
+      as a QInputEvent), it stores information only about the most recent MirInputEvents.
+     */
+    std::vector<EventInfo> event_info_vector;
+    size_t next_index{0};
+    size_t event_info_count{0};
+};
+
+}
+
+#endif // MIROIL_EVENT_BUILDER_H
diff --git a/src/platforms/mirserver/eventdispatch.h b/src/platforms/mirserver/miroil/include/miroil/eventdispatch.h
similarity index 75%
rename from src/platforms/mirserver/eventdispatch.h
rename to src/platforms/mirserver/miroil/include/miroil/eventdispatch.h
index 5a829c34..16a75e3d 100644
--- a/src/platforms/mirserver/eventdispatch.h
+++ b/src/platforms/mirserver/miroil/include/miroil/eventdispatch.h
@@ -14,16 +14,16 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-#ifndef QTMIR_EVENTDISPATCH_H
-#define QTMIR_EVENTDISPATCH_H
-
-#include <mir_toolkit/event.h>
+#ifndef MIROIL_EVENTDISPATCH_H
+#define MIROIL_EVENTDISPATCH_H
 
 namespace miral { class Window; }
 
-namespace qtmir
+struct MirInputEvent;
+
+namespace miroil
 {
-void dispatchInputEvent(const miral::Window& window, const MirInputEvent* event);
+void dispatch_input_event(const miral::Window& window, const MirInputEvent* event);
 }
 
-#endif //QTMIR_EVENTDISPATCH_H
+#endif //MIROIL_EVENTDISPATCH_H
diff --git a/src/platforms/mirserver/miroil/include/miroil/input_device.h b/src/platforms/mirserver/miroil/include/miroil/input_device.h
new file mode 100644
index 00000000..509956ae
--- /dev/null
+++ b/src/platforms/mirserver/miroil/include/miroil/input_device.h
@@ -0,0 +1,52 @@
+/*
+ * Copyright (C) 2016-2021 Canonical, Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+#ifndef MIROIL_INPUT_DEVICE_H
+#define MIROIL_INPUT_DEVICE_H
+#include <mir_toolkit/mir_input_device_types.h>
+#include <memory>
+#include <string>
+
+namespace mir { namespace input { class Device; } }
+
+namespace miroil
+{
+class InputDevice
+{
+public:
+    InputDevice(std::shared_ptr<mir::input::Device> const& device);
+    InputDevice(InputDevice const& src);
+    InputDevice(InputDevice&& src);
+    InputDevice();
+    ~InputDevice();
+
+    auto operator=(InputDevice const& src) -> InputDevice&;
+    auto operator=(InputDevice&& src) -> InputDevice&;
+
+    bool operator==(InputDevice const& other);
+
+    void apply_keymap(std::string const& layout, std::string const& variant);
+    auto get_device_id() -> MirInputDeviceId;
+    auto get_device_name() -> std::string;
+    auto is_keyboard() -> bool;
+    auto is_alpha_numeric() -> bool;
+
+private:
+    std::shared_ptr<mir::input::Device> device;
+};
+    
+}
+
+#endif //MIROIL_INPUT_DEVICE_H
diff --git a/src/platforms/mirserver/miroil/include/miroil/input_device_observer.h b/src/platforms/mirserver/miroil/include/miroil/input_device_observer.h
new file mode 100644
index 00000000..1dd92d1c
--- /dev/null
+++ b/src/platforms/mirserver/miroil/include/miroil/input_device_observer.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2016-2021 Canonical, Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+#ifndef MIROIL_INPUT_DEVICE_OBSERVER_H
+#define MIROIL_INPUT_DEVICE_OBSERVER_H
+
+#include <miroil/input_device.h>
+
+#include <memory>
+#include <string>
+
+namespace miroil
+{
+class InputDeviceObserver
+{
+public:
+    InputDeviceObserver() = default;
+    InputDeviceObserver(InputDeviceObserver const&) = delete;
+    InputDeviceObserver& operator=(InputDeviceObserver const&) = delete;    
+    virtual ~InputDeviceObserver();
+    
+    virtual void device_added(miroil::InputDevice device) = 0;
+    virtual void device_removed(miroil::InputDevice device) = 0;
+};
+    
+}
+
+#endif //MIROIL_INPUT_DEVICE_OBSERVER_H
diff --git a/src/platforms/mirserver/miroil/include/miroil/mir_prompt_session.h b/src/platforms/mirserver/miroil/include/miroil/mir_prompt_session.h
new file mode 100644
index 00000000..971bdddc
--- /dev/null
+++ b/src/platforms/mirserver/miroil/include/miroil/mir_prompt_session.h
@@ -0,0 +1,48 @@
+/*
+ * Copyright © 2021 Canonical Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License version 2 or 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef MIROIL_MIR_PROMPT_SESSION_H_
+#define MIROIL_MIR_PROMPT_SESSION_H_
+#include <memory>
+#include <functional>
+
+typedef struct MirPromptSession MirPromptSession;
+typedef void (*MirClientFdCallback)(MirPromptSession *prompt_session, size_t count, int const* fds, void* context);
+
+namespace miroil 
+{
+    
+class MirPromptSession
+{
+public:    
+    MirPromptSession(::MirPromptSession * promptSession);
+    MirPromptSession(MirPromptSession const& src);
+    MirPromptSession(MirPromptSession && src);
+    ~MirPromptSession();
+
+    auto operator=(MirPromptSession const& src) -> MirPromptSession&;
+    auto operator=(MirPromptSession&& src) -> MirPromptSession&;
+
+    bool operator==(MirPromptSession const& other);
+    
+    bool new_fds_for_prompt_providers(unsigned int no_of_fds, MirClientFdCallback callback, void * context);
+    
+    ::MirPromptSession * prompt_session;    
+};
+
+}
+
+#endif /* MIROIL_MIR_PROMPT_SESSION_H_ */
diff --git a/src/platforms/mirserver/miroil/include/miroil/mir_server_hooks.h b/src/platforms/mirserver/miroil/include/miroil/mir_server_hooks.h
new file mode 100644
index 00000000..847ec9de
--- /dev/null
+++ b/src/platforms/mirserver/miroil/include/miroil/mir_server_hooks.h
@@ -0,0 +1,57 @@
+/*
+ * Copyright © 2016 Canonical Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * Authored by: Alan Griffiths <alan@octopull.co.uk>
+ */
+
+#ifndef MIROIL_MIRSERVERHOOKS_H
+#define MIROIL_MIRSERVERHOOKS_H
+#include <miroil/input_device_observer.h>
+#include <miroil/prompt_session_listener.h>
+#include <mir/graphics/cursor_image.h>
+#include <functional>
+#include <memory>
+
+namespace mir { class Server; }
+namespace mir { namespace scene { class PromptSessionManager; }}
+namespace mir { namespace graphics { class Display; }}
+namespace mir { namespace shell { class DisplayConfigurationController; } }
+
+namespace miroil
+{
+using CreateNamedCursor = std::function<std::shared_ptr< mir::graphics::CursorImage>(std::string const& name)>;        
+    
+class MirServerHooks
+{
+public:
+    MirServerHooks();
+
+    void operator()(mir::Server& server);
+
+    auto the_prompt_session_listener() const -> PromptSessionListener*;
+    auto the_prompt_session_manager() const -> std::shared_ptr<mir::scene::PromptSessionManager>;
+    auto the_mir_display() const -> std::shared_ptr<mir::graphics::Display>;
+    auto the_display_configuration_controller() const -> std::shared_ptr<mir::shell::DisplayConfigurationController>;
+    void create_named_cursor(CreateNamedCursor func);
+    void create_input_device_observer(std::shared_ptr<InputDeviceObserver> & observer);
+    void create_prompt_session_listener(std::shared_ptr<PromptSessionListener> listener);
+
+private:
+    struct Self;
+    std::shared_ptr<Self> self;
+};
+}
+
+#endif //MIROIL_MIRSERVERHOOKS_H
diff --git a/src/platforms/mirserver/miral/mirbuffer.h b/src/platforms/mirserver/miroil/include/miroil/mirbuffer.h
similarity index 94%
rename from src/platforms/mirserver/miral/mirbuffer.h
rename to src/platforms/mirserver/miroil/include/miroil/mirbuffer.h
index 21656292..c5fab09a 100644
--- a/src/platforms/mirserver/miral/mirbuffer.h
+++ b/src/platforms/mirserver/miroil/include/miroil/mirbuffer.h
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2017 Canonical Ltd.
+ * Copyright © 2017-2020 Canonical Ltd.
  *
  * This program is free software: you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 3,
@@ -14,8 +14,8 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-#ifndef MIRAL_GLBUFFER_H
-#define MIRAL_GLBUFFER_H
+#ifndef MIROIL_GLBUFFER_H
+#define MIROIL_GLBUFFER_H
 
 #include <mir/geometry/size.h>
 
@@ -93,4 +93,4 @@ public:
 
 }
 
-#endif //MIRAL_GLBUFFER_H
+#endif //MIROIL_GLBUFFER_H
diff --git a/src/platforms/mirserver/openglcontextfactory.h b/src/platforms/mirserver/miroil/include/miroil/open_gl_context.h
similarity index 67%
rename from src/platforms/mirserver/openglcontextfactory.h
rename to src/platforms/mirserver/miroil/include/miroil/open_gl_context.h
index 56753005..f05edd6e 100644
--- a/src/platforms/mirserver/openglcontextfactory.h
+++ b/src/platforms/mirserver/miroil/include/miroil/open_gl_context.h
@@ -16,27 +16,23 @@
  * Authored by: Alan Griffiths <alan@octopull.co.uk>
  */
 
-#ifndef MIRAL_OPENGLCONTEXTFACTORY_H
-#define MIRAL_OPENGLCONTEXTFACTORY_H
-
+#ifndef MIROIL_OPEN_GL_CONTEXT_H
+#define MIROIL_OPEN_GL_CONTEXT_H
+#include <mir/graphics/gl_config.h>
 #include <memory>
+#include <functional>
 
-namespace mir { namespace graphics { class Display; }}
 namespace mir { class Server; }
 
-class QPlatformOpenGLContext;
-class QSurfaceFormat;
-
-namespace qtmir
+namespace miroil
 {
-class OpenGLContextFactory
+class OpenGLContext
 {
 public:
-    OpenGLContextFactory();
+    OpenGLContext(mir::graphics::GLConfig* gl_config);
 
     void operator()(mir::Server& server);
-
-    QPlatformOpenGLContext *createPlatformOpenGLContext(QSurfaceFormat format, mir::graphics::Display &mirDisplay) const;
+    auto the_open_gl_config() const -> std::shared_ptr<mir::graphics::GLConfig>;
 
 private:
     struct Self;
@@ -44,4 +40,4 @@ private:
 };
 }
 
-#endif //MIRAL_OPENGLCONTEXTFACTORY_H
+#endif //MIROIL_OPEN_GL_CONTEXT_H
diff --git a/src/platforms/mirserver/miral/persist_display_config.h b/src/platforms/mirserver/miroil/include/miroil/persist_display_config.h
similarity index 78%
rename from src/platforms/mirserver/miral/persist_display_config.h
rename to src/platforms/mirserver/miroil/include/miroil/persist_display_config.h
index 45705a04..83a25264 100644
--- a/src/platforms/mirserver/miral/persist_display_config.h
+++ b/src/platforms/mirserver/miroil/include/miroil/persist_display_config.h
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2016 Canonical Ltd.
+ * Copyright © 2016-2020 Canonical Ltd.
  *
  * This program is free software: you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 3,
@@ -16,16 +16,15 @@
  * Authored by: Alan Griffiths <alan@octopull.co.uk>
  */
 
-#ifndef MIRAL_PERSIST_DISPLAY_CONFIG_H
-#define MIRAL_PERSIST_DISPLAY_CONFIG_H
+#ifndef MIROIL_PERSIST_DISPLAY_CONFIG_H
+#define MIROIL_PERSIST_DISPLAY_CONFIG_H
 
 #include <functional>
 #include <memory>
 
-namespace mir { class Server; }
+namespace mir { class Server; namespace graphics { class DisplayConfigurationPolicy; }}
 
-// Prototyping namespace for later incorporation in MirAL
-namespace miral
+namespace miroil
 {
 class DisplayConfigurationPolicy;
 class DisplayConfigurationStorage;
@@ -39,7 +38,7 @@ public:
     auto operator=(PersistDisplayConfig const&) -> PersistDisplayConfig&;
 
     // TODO factor this out better
-    using DisplayConfigurationPolicyWrapper = std::function<std::shared_ptr<DisplayConfigurationPolicy>()>;
+    using DisplayConfigurationPolicyWrapper = std::function<std::shared_ptr<DisplayConfigurationPolicy>(std::shared_ptr<mir::graphics::DisplayConfigurationPolicy> const& wrapped)>;
 
     PersistDisplayConfig(std::shared_ptr<DisplayConfigurationStorage> const& storage,
                          DisplayConfigurationPolicyWrapper const& custom_wrapper);
@@ -50,7 +49,6 @@ private:
     struct Self;
     std::shared_ptr<Self> self;
 };
-
 }
 
-#endif //MIRAL_PERSIST_DISPLAY_CONFIG_H
+#endif //MIROIL_PERSIST_DISPLAY_CONFIG_H
diff --git a/src/platforms/mirserver/miroil/include/miroil/prompt_session_listener.h b/src/platforms/mirserver/miroil/include/miroil/prompt_session_listener.h
new file mode 100644
index 00000000..5049a11e
--- /dev/null
+++ b/src/platforms/mirserver/miroil/include/miroil/prompt_session_listener.h
@@ -0,0 +1,49 @@
+/*
+ * Copyright © 2016-2021 Canonical Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef MIROIL_PROMPT_SESSION_LISTENER_H
+#define MIROIL_PROMPT_SESSION_LISTENER_H
+#include <memory>
+
+namespace mir { namespace scene { class PromptSession; } }
+namespace mir { namespace scene { class Session; } }
+
+namespace miroil {
+    
+class PromptSessionListener
+{
+public:
+    virtual ~PromptSessionListener();
+    
+    PromptSessionListener& operator=(PromptSessionListener const&) = delete;    
+
+    virtual void starting(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) = 0;
+    virtual void stopping(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) = 0;
+    virtual void suspending(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) = 0;
+    virtual void resuming(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) = 0;
+    virtual void prompt_provider_added(mir::scene::PromptSession const& prompt_session,
+                               std::shared_ptr<mir::scene::Session> const& prompt_provider) = 0;
+    virtual void prompt_provider_removed(mir::scene::PromptSession const& prompt_session,
+                                 std::shared_ptr<mir::scene::Session> const& prompt_provider) = 0;
+                                 
+protected:
+    PromptSessionListener() = default;
+    PromptSessionListener(PromptSessionListener const&) = delete;
+};
+
+}
+
+#endif // MIROIL_PROMPT_SESSION_LISTENER_H
diff --git a/src/platforms/mirserver/miroil/include/miroil/prompt_session_manager.h b/src/platforms/mirserver/miroil/include/miroil/prompt_session_manager.h
new file mode 100644
index 00000000..2e1a5385
--- /dev/null
+++ b/src/platforms/mirserver/miroil/include/miroil/prompt_session_manager.h
@@ -0,0 +1,51 @@
+/*
+ * Copyright © 2016-2021 Canonical Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef MIROIL_PROMPT_SESSION_MANAGER_H
+#define MIROIL_PROMPT_SESSION_MANAGER_H
+
+#include <miral/application.h>
+
+#include <memory>
+
+namespace mir { namespace scene { class PromptSessionManager; class PromptSession;} }
+
+namespace miroil {
+    
+class PromptSessionManager
+{
+public:
+    PromptSessionManager(std::shared_ptr<mir::scene::PromptSessionManager> const& prompt_session_manager);
+    PromptSessionManager(PromptSessionManager const& src);
+    PromptSessionManager(PromptSessionManager&& src);
+    ~PromptSessionManager();
+
+    auto operator=(PromptSessionManager const& src) -> PromptSessionManager&;
+    auto operator=(PromptSessionManager&& src) -> PromptSessionManager&;
+
+    bool operator==(PromptSessionManager const& other);
+
+    auto application_for(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) const -> miral::Application;
+    void resume_prompt_session(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) const;
+    void stop_prompt_session(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) const;
+    void suspend_prompt_session(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) const;    
+
+private:
+    std::shared_ptr<mir::scene::PromptSessionManager> prompt_session_manager;
+};
+}
+
+#endif //MIROIL_PROMPT_SESSION_MANAGER_H
diff --git a/src/platforms/mirserver/miroil/include/miroil/set_compositor.h b/src/platforms/mirserver/miroil/include/miroil/set_compositor.h
new file mode 100644
index 00000000..10179601
--- /dev/null
+++ b/src/platforms/mirserver/miroil/include/miroil/set_compositor.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright © 2021 Canonical Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef MIROIL_SET_COMPOSITOR_H
+#define MIROIL_SET_COMPOSITOR_H
+#include <memory>
+#include <functional>
+
+namespace mir { class Server; }
+namespace mir { namespace graphics { class Display; } }
+namespace mir { namespace compositor { class DisplayListener; } } 
+
+namespace miroil
+{
+    class Compositor;
+       
+// Configure the server for using the Qt compositor
+class SetCompositor
+{
+    using InitFunction = std::function<void(const std::shared_ptr<mir::graphics::Display>& display,
+                       const std::shared_ptr<Compositor> & compositor,
+                       const std::shared_ptr<mir::compositor::DisplayListener>& displayListener)>;
+                       
+    using ConstructorFunction = std::function<std::shared_ptr<Compositor>()>;    
+    
+public:
+    SetCompositor(ConstructorFunction constructor, InitFunction init);
+    
+    void operator()(mir::Server& server);
+
+private:
+    struct CompositorImpl;
+    
+    std::weak_ptr<CompositorImpl> compositor_impl;
+    ConstructorFunction           constructor_function;    
+    InitFunction                  init_function;    
+};
+
+}
+
+#endif //MIROIL_SET_COMPOSITOR_H
diff --git a/src/platforms/mirserver/miroil/include/miroil/surface.h b/src/platforms/mirserver/miroil/include/miroil/surface.h
new file mode 100644
index 00000000..1b0dc2db
--- /dev/null
+++ b/src/platforms/mirserver/miroil/include/miroil/surface.h
@@ -0,0 +1,77 @@
+/*
+ * Copyright (C) 2021 Canonical, Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+#ifndef MIROIL_SURFACE_H
+#define MIROIL_SURFACE_H
+#include <memory>
+#include <unordered_map>
+#include <mir_toolkit/mir_input_device_types.h>
+#include <mir_toolkit/common.h>
+#include <mir/graphics/renderable.h>
+
+namespace mir { 
+    namespace scene { class Surface; } 
+    namespace shell { class InputTargeter; }
+    namespace geometry { struct Rectangle; }
+    namespace graphics { class CursorImage; }
+    namespace compositor { class BufferStream; }
+}
+
+namespace miroil {
+    
+class SurfaceObserver;
+class SurfaceObserverImpl;
+
+using CompositorID = void const*;
+    
+class Surface
+{
+public:
+    Surface(std::shared_ptr<mir::scene::Surface> wrapped);
+    ~Surface() = default;
+    
+    mir::scene::Surface *get_wrapped() const;
+    void add_observer(std::shared_ptr<miroil::SurfaceObserver> const& observer);    
+    void remove_observer(std::shared_ptr<miroil::SurfaceObserver> const& observer);
+    
+    int  buffers_ready_for_compositor(void const* compositor_id) const;
+    mir::graphics::RenderableList generate_renderables(miroil::CompositorID id) const; 
+
+    
+    bool is_confined_to_window();
+    void set_orientation(MirOrientation orientation);
+
+    void set_confine_pointer_state(MirPointerConfinementState state);                        
+    std::shared_ptr<mir::scene::Surface> parent() const;
+    /// Top-left corner (of the window frame if present)
+    mir::geometry::Point top_left() const;
+    bool visible() const;
+
+    // TODO a legacy of old interactions and needs removing
+    int configure(MirWindowAttrib attrib, int value);
+    // TODO a legacy of old interactions and needs removing
+    int query(MirWindowAttrib attrib) const;
+    // TODO a legacy of old interactions and needs removing
+    void set_keymap(MirInputDeviceId id, std::string const& model, std::string const& layout,
+                            std::string const& variant, std::string const& options);
+
+private:
+    std::shared_ptr<mir::scene::Surface> wrapped;
+    std::unordered_map<std::shared_ptr<miroil::SurfaceObserver>, std::shared_ptr<miroil::SurfaceObserverImpl>> observers;
+};
+
+}
+
+#endif
diff --git a/src/platforms/mirserver/miroil/include/miroil/surface_observer.h b/src/platforms/mirserver/miroil/include/miroil/surface_observer.h
new file mode 100644
index 00000000..97fc1a03
--- /dev/null
+++ b/src/platforms/mirserver/miroil/include/miroil/surface_observer.h
@@ -0,0 +1,63 @@
+/*
+ * Copyright © 2021 Canonical Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+#include <mir_toolkit/common.h>
+#include <mir/geometry/size.h>
+#include <mir/geometry/rectangle.h>
+#include <mir/graphics/cursor_image.h>
+#include <glm/glm.hpp>
+#include <mir_toolkit/mir_input_device_types.h>
+#include <vector>
+
+namespace mir { namespace scene { class SurfaceObserver; } }
+namespace mir { namespace scene { class Surface; } }
+
+struct MirEvent;
+struct MirInputEvent;
+
+namespace miroil 
+{
+    
+class SurfaceObserver
+{
+public:
+    SurfaceObserver() = default;
+    SurfaceObserver(SurfaceObserver const&) = delete;
+    SurfaceObserver& operator=(SurfaceObserver const&) = delete;    
+    virtual ~SurfaceObserver() = default;
+    
+    virtual void attrib_changed(mir::scene::Surface const* surf, MirWindowAttrib attrib, int value) = 0;
+    virtual void window_resized_to(mir::scene::Surface const* surf, mir::geometry::Size const& window_size) = 0;
+    virtual void content_resized_to(mir::scene::Surface const* surf, mir::geometry::Size const& content_size) = 0;
+    virtual void moved_to(mir::scene::Surface const* surf, mir::geometry::Point const& top_left) = 0;
+    virtual void hidden_set_to(mir::scene::Surface const* surf, bool hide) = 0;
+    virtual void frame_posted(mir::scene::Surface const* surf, int frames_available, mir::geometry::Size const& size) = 0;
+    virtual void alpha_set_to(mir::scene::Surface const* surf, float alpha) = 0;
+    virtual void orientation_set_to(mir::scene::Surface const* surf, MirOrientation orientation) = 0;
+    virtual void transformation_set_to(mir::scene::Surface const* surf, glm::mat4 const& t) = 0;
+    virtual void cursor_image_set_to(mir::scene::Surface const* surf, mir::graphics::CursorImage const& image) = 0;
+    virtual void client_surface_close_requested(mir::scene::Surface const* surf) = 0;
+    virtual void keymap_changed(mir::scene::Surface const* surf, MirInputDeviceId id, std::string const& model,
+                                std::string const& layout, std::string const& variant, std::string const& options) = 0;
+    virtual void renamed(mir::scene::Surface const* surf, char const* name) = 0;
+    virtual void cursor_image_removed(mir::scene::Surface const* surf) = 0;
+    virtual void placed_relative(mir::scene::Surface const* surf, mir::geometry::Rectangle const& placement) = 0;
+    virtual void input_consumed(mir::scene::Surface const* surf, MirEvent const* event) = 0;
+    virtual void start_drag_and_drop(mir::scene::Surface const* surf, std::vector<uint8_t> const& handle) = 0;
+    virtual void depth_layer_set_to(mir::scene::Surface const* surf, MirDepthLayer depth_layer) = 0;
+    virtual void application_id_set_to(mir::scene::Surface const* surf, std::string const& application_id) = 0;
+};
+
+}
diff --git a/src/platforms/mirserver/miroil/src/CMakeLists.txt b/src/platforms/mirserver/miroil/src/CMakeLists.txt
new file mode 100644
index 00000000..32d7d4ed
--- /dev/null
+++ b/src/platforms/mirserver/miroil/src/CMakeLists.txt
@@ -0,0 +1,39 @@
+add_library(miroil OBJECT
+    compositor.cpp ${MIROIL_INCLUDE_DIRS}/miroil/compositor.h
+    edid.cpp ${qtmir_include}/miroil/edid.h
+    mirbuffer.cpp ${MIROIL_INCLUDE_DIRS}/miroil/mirbuffer.h
+    persist_display_config.cpp ${MIROIL_INCLUDE_DIRS}/miroil/persist_display_config.h
+    display_configuration_policy.cpp ${qtmir_include}/miroil/display_configuration_policy.h
+    display_configuration_controller_wrapper.cpp ${MIROIL_INCLUDE_DIRS}/miroil/display_configuration_controller_wrapper.h
+    display_listener_wrapper.cpp ${MIROIL_INCLUDE_DIRS}/miroil/display_listener_wrapper.h
+    eventdispatch.cpp ${MIROIL_INCLUDE_DIRS}/miroil/eventdispatch.h
+    event_builder.cpp ${MIROIL_INCLUDE_DIRS}/miroil/event_builder.h
+    input_device.cpp ${MIROIL_INCLUDE_DIRS}/miroil/input_device.h
+    input_device_observer.cpp ${MIROIL_INCLUDE_DIRS}/miroil/input_device_observer.h
+    mir_server_hooks.cpp ${MIROIL_INCLUDE_DIRS}/miroil/mir_server_hooks.h
+    mir_prompt_session.cpp ${MIROIL_INCLUDE_DIRS}/miroil/mir_prompt_session.h
+    open_gl_context.cpp ${MIROIL_INCLUDE_DIRS}/miroil/open_gl_context.h
+    prompt_session_listener.cpp ${MIROIL_INCLUDE_DIRS}/miroil/prompt_session_listener.h
+    prompt_session_manager.cpp ${MIROIL_INCLUDE_DIRS}/miroil/prompt_session_manager.h
+    set_compositor.cpp ${MIROIL_INCLUDE_DIRS}/miroil/set_compositor.h
+    surface.cpp ${MIROIL_INCLUDE_DIRS}/miroil/surface.h
+    ${qtmir_include}/miroil/display_configuration_storage.h
+    ${qtmir_include}/miroil/display_id.h
+)
+
+target_include_directories(miroil
+    PUBLIC  "${MIROIL_INCLUDE_DIRS}" "${qtmir_include}" "${qtmir_include}/qtmir"
+    PRIVATE ${MIRAL_INCLUDE_DIRS}
+    ${MIRCOMMON_INCLUDE_DIRS}
+    ${MIRSERVER_INCLUDE_DIRS}
+    ${MIRRENDERERGLDEV_INCLUDE_DIRS}
+    ${MIRSERVER_INCLUDE_DIRS}
+)
+
+target_link_libraries(miroil
+    PRIVATE
+    ${MIRAL_LDFLAGS}
+    ${MIRSERVER_LDFLAGS}
+
+    ${EGL_LDFLAGS}
+)
diff --git a/src/platforms/mirserver/miroil/src/compositor.cpp b/src/platforms/mirserver/miroil/src/compositor.cpp
new file mode 100644
index 00000000..eb50aa65
--- /dev/null
+++ b/src/platforms/mirserver/miroil/src/compositor.cpp
@@ -0,0 +1,20 @@
+/*
+ * Copyright (C) 2016-2021 Canonical, Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <miroil/compositor.h>
+
+miroil::Compositor::~Compositor() = default;
+
diff --git a/src/platforms/mirserver/miroil/src/display_configuration_controller_wrapper.cpp b/src/platforms/mirserver/miroil/src/display_configuration_controller_wrapper.cpp
new file mode 100644
index 00000000..9ca49428
--- /dev/null
+++ b/src/platforms/mirserver/miroil/src/display_configuration_controller_wrapper.cpp
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2021 Canonical, Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <miroil/display_configuration_controller_wrapper.h>
+#include "mir/shell/display_configuration_controller.h"
+
+namespace miroil {
+
+void DisplayConfigurationControllerWrapper::set_base_configuration(std::shared_ptr<mir::graphics::DisplayConfiguration> const& conf)
+{
+    wrapped->set_base_configuration(conf);
+}
+
+DisplayConfigurationControllerWrapper::DisplayConfigurationControllerWrapper(std::shared_ptr<mir::shell::DisplayConfigurationController> const & wrapped)
+    : wrapped(wrapped)
+{
+}
+
+}
diff --git a/src/platforms/mirserver/miral/display_configuration_policy.cpp b/src/platforms/mirserver/miroil/src/display_configuration_policy.cpp
similarity index 73%
rename from src/platforms/mirserver/miral/display_configuration_policy.cpp
rename to src/platforms/mirserver/miroil/src/display_configuration_policy.cpp
index c4f5281d..ad746310 100644
--- a/src/platforms/mirserver/miral/display_configuration_policy.cpp
+++ b/src/platforms/mirserver/miroil/src/display_configuration_policy.cpp
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2016 Canonical Ltd.
+ * Copyright © 2016-2020 Canonical Ltd.
  *
  * This program is free software: you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 3,
@@ -16,6 +16,7 @@
  * Authored by: Nick Dedekind <nick.dedekind@canonical.com>
  */
 
-#include "qtmir/miral/display_configuration_policy.h"
+#include "miroil/display_configuration_policy.h"
 
-miral::DisplayConfigurationPolicy::DisplayConfigurationPolicy() = default;
+miroil::DisplayConfigurationPolicy::DisplayConfigurationPolicy() = default;
+miroil::DisplayConfigurationPolicy::~DisplayConfigurationPolicy() = default;
diff --git a/src/platforms/mirserver/miroil/src/display_listener_wrapper.cpp b/src/platforms/mirserver/miroil/src/display_listener_wrapper.cpp
new file mode 100644
index 00000000..125cc20b
--- /dev/null
+++ b/src/platforms/mirserver/miroil/src/display_listener_wrapper.cpp
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2021 Canonical, Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+#include "miroil/display_listener_wrapper.h"
+#include "mir/compositor/display_listener.h"
+
+namespace miroil
+{
+    
+DisplayListenerWrapper::DisplayListenerWrapper(std::shared_ptr<mir::compositor::DisplayListener> const & display_listener)
+ : display_listener(display_listener)
+{
+}
+
+DisplayListenerWrapper::~DisplayListenerWrapper()
+{
+}
+
+void DisplayListenerWrapper::add_display(mir::geometry::Rectangle const& area)
+{
+    display_listener->add_display(area);
+}
+
+void DisplayListenerWrapper::remove_display(mir::geometry::Rectangle const& area)
+{
+    display_listener->remove_display(area);
+}
+
+}
diff --git a/src/platforms/mirserver/miral/edid.cpp b/src/platforms/mirserver/miroil/src/edid.cpp
similarity index 91%
rename from src/platforms/mirserver/miral/edid.cpp
rename to src/platforms/mirserver/miroil/src/edid.cpp
index 0f8f80dc..094cbc8c 100644
--- a/src/platforms/mirserver/miral/edid.cpp
+++ b/src/platforms/mirserver/miroil/src/edid.cpp
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2016 Canonical Ltd.
+ * Copyright © 2016-2020 Canonical Ltd.
  *
  * This program is free software: you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 3,
@@ -16,16 +16,16 @@
  * Authored by: Nick Dedekind <nick.dedekind@canonical.com>
  */
 
-#include "qtmir/miral/edid.h"
+#include "miroil/edid.h"
 
 #include <cstring>
 #include <numeric>
 #include <stdexcept>
 
-miral::Edid& miral::Edid::parse_data(std::vector<uint8_t> const& data)
+miroil::Edid& miroil::Edid::parse_data(std::vector<uint8_t> const& data)
 {
     if (data.size() != 128 && data.size() != 256) {
-        throw std::runtime_error(std::string("Incorrect EDID structure size:") + std::to_string(data.size()));
+        throw std::runtime_error("Incorrect EDID structure size");
     }
 
     // check the checksum
@@ -97,7 +97,7 @@ miral::Edid& miral::Edid::parse_data(std::vector<uint8_t> const& data)
     return *this;
 }
 
-std::string miral::Edid::Descriptor::string_value() const
+std::string miroil::Edid::Descriptor::string_value() const
 {
     switch(type) {
     case Type::monitor_name:
diff --git a/src/platforms/mirserver/miroil/src/event_builder.cpp b/src/platforms/mirserver/miroil/src/event_builder.cpp
new file mode 100644
index 00000000..33d963ce
--- /dev/null
+++ b/src/platforms/mirserver/miroil/src/event_builder.cpp
@@ -0,0 +1,116 @@
+/*
+ * Copyright (C) 2016-2021 Canonical, Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "miroil/event_builder.h"
+#include "mir_toolkit/events/input/input_event.h"
+#include "mir_toolkit/mir_cookie.h"
+#include "mir/events/event_builders.h"
+
+namespace miroil {
+    
+EventBuilder::EventBuilder()
+: event_info_vector(10)    
+{
+}
+
+EventBuilder::~EventBuilder() = default;
+    
+void EventBuilder::add_touch(MirEvent &event, MirTouchId touch_id, MirTouchAction action,
+    MirTouchTooltype tooltype, float x_axis_value, float y_axis_value,
+    float pressure_value, float touch_major_value, float touch_minor_value, float size_value)
+{
+    mir::events::add_touch(event, touch_id, action, tooltype, x_axis_value, y_axis_value,
+                           pressure_value, touch_major_value, touch_minor_value, size_value);
+}
+
+// Key event
+mir::EventUPtr EventBuilder::make_key_event(MirInputDeviceId device_id, std::chrono::nanoseconds timestamp,
+    std::vector<uint8_t> const& cookie, MirKeyboardAction action, xkb_keysym_t key_code,
+    int scan_code, MirInputEventModifiers modifiers)
+{
+    return mir::events::make_event(device_id, timestamp,
+                                   cookie, action, key_code,
+                                   scan_code, modifiers);
+}
+
+// Touch event
+mir::EventUPtr EventBuilder::make_touch_event(MirInputDeviceId device_id, std::chrono::nanoseconds timestamp,
+    std::vector<uint8_t> const& mac, MirInputEventModifiers modifiers)
+{
+    return mir::events::make_event(device_id, timestamp,
+                                   mac, modifiers);
+}
+
+// Pointer event
+mir::EventUPtr EventBuilder::make_pointer_event(MirInputDeviceId device_id, std::chrono::nanoseconds timestamp,
+    std::vector<uint8_t> const& mac, MirInputEventModifiers modifiers, MirPointerAction action,
+    MirPointerButtons buttons_pressed,
+    float x_axis_value, float y_axis_value,
+    float hscroll_value, float vscroll_value,
+    float relative_x_value, float relative_y_value)
+{
+    return mir::events::make_event(device_id, timestamp,
+                                   mac, modifiers, action,
+                                   buttons_pressed,
+                                   x_axis_value, y_axis_value,
+                                   hscroll_value, vscroll_value,
+                                   relative_x_value, relative_y_value);
+}
+
+EventBuilder::EventInfo *EventBuilder::find_info(ulong qtTimestamp)
+{
+    for (size_t i = 0; i < event_info_count; ++i) {
+        if (event_info_vector[i].timestamp == qtTimestamp) {
+            return &event_info_vector[i];
+        }
+    }
+    return nullptr;
+}
+
+void EventBuilder::store(const MirInputEvent *mirInputEvent, ulong qtTimestamp)
+{
+    EventInfo &eventInfo = event_info_vector[next_index];
+    eventInfo.store(mirInputEvent, qtTimestamp);
+
+    next_index = (next_index + 1) % event_info_vector.size();
+
+    if (event_info_count < event_info_vector.size()) {
+        ++event_info_count;
+    }
+}
+
+void EventBuilder::EventInfo::store(const MirInputEvent *iev, ulong qtTimestamp)
+{
+    this->timestamp = qtTimestamp;
+    device_id = mir_input_event_get_device_id(iev);
+    if (mir_input_event_has_cookie(iev))
+    {
+        auto cookie_ptr = mir_input_event_get_cookie(iev);
+        cookie.resize(mir_cookie_buffer_size(cookie_ptr));
+        mir_cookie_to_buffer(cookie_ptr, cookie.data(), cookie.size());
+        mir_cookie_release(cookie_ptr);
+    } else {
+        cookie.resize(0);
+    }
+    if (mir_input_event_type_pointer == mir_input_event_get_type(iev))
+    {
+        auto pev = mir_input_event_get_pointer_event(iev);
+        relative_x = mir_pointer_event_axis_value(pev, mir_pointer_axis_relative_x);
+        relative_y = mir_pointer_event_axis_value(pev, mir_pointer_axis_relative_y);
+    }
+}
+
+}
diff --git a/src/platforms/mirserver/eventdispatch.cpp b/src/platforms/mirserver/miroil/src/eventdispatch.cpp
similarity index 87%
rename from src/platforms/mirserver/eventdispatch.cpp
rename to src/platforms/mirserver/miroil/src/eventdispatch.cpp
index fa2e36bb..64420575 100644
--- a/src/platforms/mirserver/eventdispatch.cpp
+++ b/src/platforms/mirserver/miroil/src/eventdispatch.cpp
@@ -16,12 +16,11 @@
  * Authored by: Alan Griffiths <alan@octopull.co.uk>
  */
 
-#include "eventdispatch.h"
-
+#include "miroil/eventdispatch.h"
 #include <miral/window.h>
 #include <mir/scene/surface.h>
 
-void qtmir::dispatchInputEvent(const miral::Window& window, const MirInputEvent* event)
+void miroil::dispatch_input_event(const miral::Window& window, const MirInputEvent* event)
 {
     auto e = reinterpret_cast<MirEvent const*>(event); // naughty
 
diff --git a/src/platforms/mirserver/miroil/src/input_device.cpp b/src/platforms/mirserver/miroil/src/input_device.cpp
new file mode 100644
index 00000000..4850ee16
--- /dev/null
+++ b/src/platforms/mirserver/miroil/src/input_device.cpp
@@ -0,0 +1,80 @@
+/*
+ * Copyright © 2016-2021 Canonical Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <miroil/input_device.h>
+
+#include "mir/flags.h"
+#include "mir/input/device.h"
+#include "mir/input/mir_keyboard_config.h"
+
+miroil::InputDevice::InputDevice(std::shared_ptr<mir::input::Device> const& device)
+: device(device)
+{
+}
+
+miroil::InputDevice::InputDevice(InputDevice const& ) = default;
+
+miroil::InputDevice::InputDevice() = default;
+
+miroil::InputDevice::~InputDevice() = default;
+
+bool miroil::InputDevice::operator==(InputDevice const& other)
+{
+    return device == other.device;
+}
+        
+void miroil::InputDevice::apply_keymap(std::string const& layout, std::string const& variant)
+{
+    MirKeyboardConfig oldConfig;
+    
+    mir::input::Keymap keymap;
+    if (device->keyboard_configuration().is_set()) { // preserve the model and options
+        oldConfig = device->keyboard_configuration().value();
+        keymap.model = oldConfig.device_keymap().model;
+        keymap.options = oldConfig.device_keymap().options;
+    }
+    keymap.layout  = layout;
+    keymap.variant = variant;
+
+    device->apply_keyboard_configuration(std::move(keymap));
+}
+    
+
+MirInputDeviceId miroil::InputDevice::get_device_id()
+{
+    return device->id();
+}
+
+std::string miroil::InputDevice::get_device_name()
+{
+    return device->name();
+}
+    
+bool miroil::InputDevice::is_keyboard()
+{
+    return mir::contains(device->capabilities(), mir::input::DeviceCapability::keyboard);
+}
+        
+bool miroil::InputDevice::is_alpha_numeric()
+{
+    return mir::contains(device->capabilities(), mir::input::DeviceCapability::alpha_numeric);
+}
+
+miroil::InputDevice::InputDevice(InputDevice&& ) = default;
+
+auto miroil::InputDevice::operator=(InputDevice const& src) -> InputDevice& = default;
+
+auto miroil::InputDevice::operator=(InputDevice&& src) -> InputDevice& = default;
diff --git a/src/platforms/mirserver/miroil/src/input_device_observer.cpp b/src/platforms/mirserver/miroil/src/input_device_observer.cpp
new file mode 100644
index 00000000..35c04645
--- /dev/null
+++ b/src/platforms/mirserver/miroil/src/input_device_observer.cpp
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2016-2021 Canonical, Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <miroil/input_device_observer.h>
+
+miroil::InputDeviceObserver::~InputDeviceObserver() = default;
diff --git a/src/platforms/mirserver/miroil/src/mir_prompt_session.cpp b/src/platforms/mirserver/miroil/src/mir_prompt_session.cpp
new file mode 100644
index 00000000..607cac45
--- /dev/null
+++ b/src/platforms/mirserver/miroil/src/mir_prompt_session.cpp
@@ -0,0 +1,34 @@
+#include <miroil/mir_prompt_session.h>
+#include <mir/uncaught.h>
+
+miroil::MirPromptSession::MirPromptSession(::MirPromptSession * prompt_session)
+{
+    this->prompt_session = prompt_session;
+}
+
+miroil::MirPromptSession::MirPromptSession(MirPromptSession const& src) = default;
+miroil::MirPromptSession::MirPromptSession(MirPromptSession && src) = default;
+miroil::MirPromptSession::~MirPromptSession() = default;
+
+auto miroil::MirPromptSession::operator=(MirPromptSession const& src) -> MirPromptSession&
+{
+    prompt_session = src.prompt_session;
+    return *this;    
+}
+
+auto miroil::MirPromptSession::operator=(MirPromptSession&& src) -> MirPromptSession&
+{
+    prompt_session = src.prompt_session;
+    return *this;    
+}
+
+bool miroil::MirPromptSession::operator==(MirPromptSession const& other)
+{
+    return prompt_session == other.prompt_session;
+}
+
+bool miroil::MirPromptSession::new_fds_for_prompt_providers(unsigned int /*no_of_fds*/, MirClientFdCallback /*callback*/, void * /*context*/)
+{
+//    return mir_prompt_session_new_fds_for_prompt_providers(prompt_session, no_of_fds, callback, context);
+    return false;
+}
diff --git a/src/platforms/mirserver/miroil/src/mir_server_hooks.cpp b/src/platforms/mirserver/miroil/src/mir_server_hooks.cpp
new file mode 100644
index 00000000..3ece6f67
--- /dev/null
+++ b/src/platforms/mirserver/miroil/src/mir_server_hooks.cpp
@@ -0,0 +1,252 @@
+/*
+ * Copyright © 2016 Canonical Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * Authored by: Alan Griffiths <alan@octopull.co.uk>
+ */
+
+#include <miroil/mir_server_hooks.h>
+
+// mir
+#include <mir/server.h>
+#include <mir/graphics/cursor.h>
+#include <mir/scene/prompt_session_listener.h>
+#include <mir/input/input_device_hub.h>
+#include <mir/input/input_device_observer.h>
+#include <mir/input/cursor_images.h>
+#include <mir/version.h>
+
+#include <stdexcept>
+
+namespace mg = mir::graphics;
+namespace ms = mir::scene;
+
+namespace
+{
+struct PromptSessionListenerImpl : mir::scene::PromptSessionListener
+{
+    PromptSessionListenerImpl(std::shared_ptr<miroil::PromptSessionListener> const& listener) : listener(listener) {};
+    ~PromptSessionListenerImpl();
+
+    void starting(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) override;
+    void stopping(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) override;
+    void suspending(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) override;
+    void resuming(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) override;
+
+    void prompt_provider_added(mir::scene::PromptSession const& prompt_session,
+                               std::shared_ptr<mir::scene::Session> const& prompt_provider) override;
+    void prompt_provider_removed(mir::scene::PromptSession const& prompt_session,
+                                 std::shared_ptr<mir::scene::Session> const& prompt_provider) override;
+
+private:   
+    std::shared_ptr<miroil::PromptSessionListener> const listener;
+};
+
+struct MirInputDeviceObserverImpl : mir::input::InputDeviceObserver
+{
+public:    
+    MirInputDeviceObserverImpl(std::shared_ptr<miroil::InputDeviceObserver> & observer) : observer(observer) {};
+    
+    void device_added(std::shared_ptr<mir::input::Device> const& device) override;
+    void device_changed(std::shared_ptr<mir::input::Device> const& /*device*/) override {}
+    void device_removed(std::shared_ptr<mir::input::Device> const& device) override;
+    void changes_complete() override {}
+    
+private:    
+    std::shared_ptr<miroil::InputDeviceObserver> observer;
+};
+
+struct HiddenCursorWrapper : mg::Cursor
+{
+    HiddenCursorWrapper(std::shared_ptr<mg::Cursor> const& wrapped) :
+        wrapped{wrapped} { wrapped->hide(); }
+#if MIR_SERVER_VERSION < MIR_VERSION_NUMBER(2, 3, 0)
+    void show() override { }
+#endif
+    void show(mg::CursorImage const&) override { }
+    void hide() override { wrapped->hide(); }
+
+    void move_to(mir::geometry::Point position) override { wrapped->move_to(position); }
+
+private:
+    std::shared_ptr<mg::Cursor> const wrapped;
+};
+}
+
+class MirCursorImages : public mir::input::CursorImages
+{
+public:
+    MirCursorImages(miroil::CreateNamedCursor func);
+
+    std::shared_ptr<mir::graphics::CursorImage> image(const std::string &cursor_name,
+            const mir::geometry::Size &size) override;
+
+private:
+    miroil::CreateNamedCursor create_func;
+};
+
+MirCursorImages::MirCursorImages(miroil::CreateNamedCursor func)
+{
+    create_func = func;
+}
+
+auto MirCursorImages::image(const std::string &cursor_name, const mir::geometry::Size &)
+-> std::shared_ptr<mir::graphics::CursorImage>
+{
+    return create_func(cursor_name);
+}
+
+struct miroil::MirServerHooks::Self
+{
+    std::shared_ptr<miroil::PromptSessionListener> prompt_session_listener;
+    std::weak_ptr<PromptSessionListenerImpl> prompt_session_listener_impl;
+    std::weak_ptr<mir::graphics::Display> mir_display;
+    std::weak_ptr<mir::shell::DisplayConfigurationController> mir_display_configuration_controller;
+    std::weak_ptr<mir::scene::PromptSessionManager> mir_prompt_session_manager;
+    std::weak_ptr<mir::input::InputDeviceHub> input_device_hub;
+    CreateNamedCursor create_cursor;    
+};
+
+miroil::MirServerHooks::MirServerHooks() :
+    self{std::make_shared<Self>()}
+{
+}
+
+void miroil::MirServerHooks::operator()(mir::Server& server)
+{
+    if (self->create_cursor) {
+        server.override_the_cursor_images([this]
+            { return std::make_shared<MirCursorImages>(self->create_cursor); });
+    }
+
+    server.wrap_cursor([&](std::shared_ptr<mg::Cursor> const& wrapped)
+        { return std::make_shared<HiddenCursorWrapper>(wrapped); });
+
+    if (self->prompt_session_listener) {
+        server.override_the_prompt_session_listener([this]
+        {
+            auto const result = std::make_shared<PromptSessionListenerImpl>(self->prompt_session_listener);
+            self->prompt_session_listener_impl = result;
+            return result;
+        });
+    }
+
+    server.add_init_callback([this, &server]
+        {
+            self->mir_display = server.the_display();
+            self->mir_display_configuration_controller = server.the_display_configuration_controller();
+            self->mir_prompt_session_manager = server.the_prompt_session_manager();
+            self->input_device_hub = server.the_input_device_hub();
+        });
+}
+
+auto miroil::MirServerHooks::the_prompt_session_listener() const
+-> miroil::PromptSessionListener*
+{
+    return self->prompt_session_listener.get();
+}
+
+auto miroil::MirServerHooks::the_prompt_session_manager() const
+-> std::shared_ptr<mir::scene::PromptSessionManager>
+{
+    if (auto result = self->mir_prompt_session_manager.lock())
+        return result;
+
+    throw std::logic_error("No prompt session manager available. Server not running?");
+}
+
+auto miroil::MirServerHooks::the_mir_display() const
+-> std::shared_ptr<mir::graphics::Display>
+{
+    if (auto result = self->mir_display.lock())
+        return result;
+
+    throw std::logic_error("No display available. Server not running?");
+}
+
+auto miroil::MirServerHooks::the_display_configuration_controller() const
+-> std::shared_ptr<mir::shell::DisplayConfigurationController>
+{
+    if (auto result = self->mir_display_configuration_controller.lock())
+        return result;
+
+    throw std::logic_error("No input device hub available. Server not running?");
+}
+
+void miroil::MirServerHooks::create_named_cursor(CreateNamedCursor func)
+{
+    self->create_cursor = func;
+}
+
+void miroil::MirServerHooks::create_input_device_observer(std::shared_ptr<miroil::InputDeviceObserver> & observer)
+{
+    if (auto result = self->input_device_hub.lock()) {
+        result->add_observer(std::make_shared<MirInputDeviceObserverImpl>(observer));
+	return;
+    }
+
+    throw std::logic_error("No input device hub available. Server not running?");
+}
+
+void miroil::MirServerHooks::create_prompt_session_listener(std::shared_ptr<miroil::PromptSessionListener> listener)
+{
+    self->prompt_session_listener = listener;
+}
+
+PromptSessionListenerImpl::~PromptSessionListenerImpl() = default;
+
+void PromptSessionListenerImpl::starting(std::shared_ptr<ms::PromptSession> const& prompt_session)
+{
+    listener->starting(prompt_session);
+}
+
+void PromptSessionListenerImpl::stopping(std::shared_ptr<ms::PromptSession> const& prompt_session)
+{
+    listener->stopping(prompt_session);
+}
+
+void PromptSessionListenerImpl::suspending(std::shared_ptr<ms::PromptSession> const& prompt_session)
+{
+    listener->suspending(prompt_session);
+}
+
+void PromptSessionListenerImpl::resuming(std::shared_ptr<ms::PromptSession> const& prompt_session)
+{
+    listener->resuming(prompt_session);
+}
+
+void PromptSessionListenerImpl::prompt_provider_added(ms::PromptSession const& prompt_session,
+                                                      std::shared_ptr<ms::Session> const& prompt_provider)
+{
+    listener->prompt_provider_added(prompt_session, prompt_provider);
+}
+
+void PromptSessionListenerImpl::prompt_provider_removed(ms::PromptSession const& prompt_session,
+                                                        std::shared_ptr<ms::Session> const& prompt_provider)
+{
+    listener->prompt_provider_removed(prompt_session, prompt_provider);
+}
+
+void MirInputDeviceObserverImpl::device_added(const std::shared_ptr<mir::input::Device> &device)
+{
+    observer->device_added(miroil::InputDevice(device));
+}
+
+void MirInputDeviceObserverImpl::device_removed(const std::shared_ptr<mir::input::Device> &device)
+{
+    if (device) {
+        observer->device_removed(miroil::InputDevice(device));
+    }
+}
+
diff --git a/src/platforms/mirserver/miral/mirbuffer.cpp b/src/platforms/mirserver/miroil/src/mirbuffer.cpp
similarity index 97%
rename from src/platforms/mirserver/miral/mirbuffer.cpp
rename to src/platforms/mirserver/miroil/src/mirbuffer.cpp
index 8a6790c4..9710365b 100644
--- a/src/platforms/mirserver/miral/mirbuffer.cpp
+++ b/src/platforms/mirserver/miroil/src/mirbuffer.cpp
@@ -1,6 +1,6 @@
 /*
  * Copyright 2021 UBports Foundation.
- * Copyright © 2017 Canonical Ltd.
+ * Copyright © 2017-2020 Canonical Ltd.
  *
  * This program is free software: you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 3,
@@ -15,10 +15,10 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-#include "mirbuffer.h"
+#include "miroil/mirbuffer.h"
 
 #include <mir/graphics/buffer.h>
-#include "mir/graphics/texture.h"
+#include <mir/graphics/texture.h>
 #include <mir/renderer/gl/texture_source.h>
 
 #include <stdexcept>
diff --git a/src/platforms/mirserver/openglcontextfactory.cpp b/src/platforms/mirserver/miroil/src/open_gl_context.cpp
similarity index 51%
rename from src/platforms/mirserver/openglcontextfactory.cpp
rename to src/platforms/mirserver/miroil/src/open_gl_context.cpp
index 1e77ab7a..271d9cc8 100644
--- a/src/platforms/mirserver/openglcontextfactory.cpp
+++ b/src/platforms/mirserver/miroil/src/open_gl_context.cpp
@@ -16,36 +16,37 @@
  * Authored by: Alan Griffiths <alan@octopull.co.uk>
  */
 
-#include "openglcontextfactory.h"
-
-// local
-#include "mirglconfig.h"
-#include "miropenglcontext.h"
+#include "miroil/open_gl_context.h"
+#include <stdexcept>
 
 // mir
 #include <mir/server.h>
-
-struct qtmir::OpenGLContextFactory::Self
+   
+struct miroil::OpenGLContext::Self
 {
-    std::shared_ptr<MirGLConfig> m_glConfig;
+    Self(mir::graphics::GLConfig* gl_config)
+    : gl_config(gl_config)
+    {        
+    }
+    
+    std::shared_ptr<mir::graphics::GLConfig> const gl_config;
 };
 
-qtmir::OpenGLContextFactory::OpenGLContextFactory() :
-    self{std::make_shared<Self>()}
-{
+miroil::OpenGLContext::OpenGLContext(mir::graphics::GLConfig* gl_config)
+:    self{std::make_shared<Self>(gl_config)}
+{    
 }
 
-void qtmir::OpenGLContextFactory::operator()(mir::Server& server)
+void miroil::OpenGLContext::operator()(mir::Server& server)
 {
     server.override_the_gl_config([this]
-        { return self->m_glConfig = std::make_shared<MirGLConfig>(); });
+        { return self->gl_config; }
+    );
 }
 
-QPlatformOpenGLContext *qtmir::OpenGLContextFactory::createPlatformOpenGLContext(
-    QSurfaceFormat format, mir::graphics::Display &mirDisplay) const
+auto miroil::OpenGLContext::the_open_gl_config() const
+-> std::shared_ptr<mir::graphics::GLConfig>
 {
-    if (!self->m_glConfig)
-        throw std::logic_error("No gl config available. Server not running?");
-
-    return new MirOpenGLContext(mirDisplay, *self->m_glConfig, format);
+    return self->gl_config;
 }
+
diff --git a/src/platforms/mirserver/miral/persist_display_config.cpp b/src/platforms/mirserver/miroil/src/persist_display_config.cpp
similarity index 74%
rename from src/platforms/mirserver/miral/persist_display_config.cpp
rename to src/platforms/mirserver/miroil/src/persist_display_config.cpp
index 2bfb98cc..bf23bbb2 100644
--- a/src/platforms/mirserver/miral/persist_display_config.cpp
+++ b/src/platforms/mirserver/miroil/src/persist_display_config.cpp
@@ -1,5 +1,5 @@
 /*
- * Copyright © 2016 Canonical Ltd.
+ * Copyright © 2016-2020 Canonical Ltd.
  *
  * This program is free software: you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 3,
@@ -16,45 +16,42 @@
  * Authored by: Alan Griffiths <alan@octopull.co.uk>
  */
 
-#include "persist_display_config.h"
-#include "qtmir/miral/display_configuration_policy.h"
-#include "qtmir/miral/display_configuration_storage.h"
-#include "qtmir/miral/edid.h"
+#include "miroil/persist_display_config.h"
+#include "miroil/display_configuration_policy.h"
+#include "miroil/display_configuration_storage.h"
 
-#include <mir/graphics/display_configuration_policy.h>
 #include <mir/graphics/display_configuration.h>
 #include <mir/graphics/display_configuration_observer.h>
+#include <mir/graphics/display_configuration_policy.h>
 #include <mir/observer_registrar.h>
 #include <mir/server.h>
-#include <mir/version.h>
+#include <mir/log.h>
 
-#include <stdexcept>
+#include <boost/throw_exception.hpp>
 
-// shouldn't really import this
-#include <qglobal.h>
+#include <stdexcept>
 
 namespace mg = mir::graphics;
 
 namespace
 {
-
 struct PersistDisplayConfigPolicy
 {
-    PersistDisplayConfigPolicy(std::shared_ptr<miral::DisplayConfigurationStorage> const& storage) :
+    PersistDisplayConfigPolicy(std::shared_ptr<miroil::DisplayConfigurationStorage> const& storage) :
         storage(storage) {}
     virtual ~PersistDisplayConfigPolicy() = default;
     PersistDisplayConfigPolicy(PersistDisplayConfigPolicy const&) = delete;
     auto operator=(PersistDisplayConfigPolicy const&) -> PersistDisplayConfigPolicy& = delete;
 
     void apply_to(mg::DisplayConfiguration& conf,
-                  miral::DisplayConfigurationPolicy& wrapped_policy,
-                  miral::DisplayConfigurationPolicy& custom_policy);
+                  miroil::DisplayConfigurationPolicy& wrapped_policy,
+                  miroil::DisplayConfigurationPolicy& custom_policy);
     void save_config(mg::DisplayConfiguration const& base_conf);
 
-    std::shared_ptr<miral::DisplayConfigurationStorage> storage;
+    std::shared_ptr<miroil::DisplayConfigurationStorage> storage;
 };
 
-struct MiralWrappedMirDisplayConfigurationPolicy : miral::DisplayConfigurationPolicy
+struct MiralWrappedMirDisplayConfigurationPolicy : miroil::DisplayConfigurationPolicy
 {
     MiralWrappedMirDisplayConfigurationPolicy(std::shared_ptr<mg::DisplayConfigurationPolicy> const& self) :
         self{self}
@@ -72,8 +69,8 @@ struct DisplayConfigurationPolicyAdapter : mg::DisplayConfigurationPolicy
 {
     DisplayConfigurationPolicyAdapter(
         std::shared_ptr<PersistDisplayConfigPolicy> const& self,
-            std::shared_ptr<miral::DisplayConfigurationPolicy> const& wrapped_policy,
-            std::shared_ptr<miral::DisplayConfigurationPolicy> const& custom_policy) :
+            std::shared_ptr<miroil::DisplayConfigurationPolicy> const& wrapped_policy,
+            std::shared_ptr<miroil::DisplayConfigurationPolicy> const& custom_policy) :
         self{self}, wrapped_policy{wrapped_policy}, custom_policy{custom_policy}
     {}
 
@@ -83,8 +80,8 @@ struct DisplayConfigurationPolicyAdapter : mg::DisplayConfigurationPolicy
     }
 
     std::shared_ptr<PersistDisplayConfigPolicy> const self;
-    std::shared_ptr<miral::DisplayConfigurationPolicy> const wrapped_policy;
-    std::shared_ptr<miral::DisplayConfigurationPolicy> const custom_policy;
+    std::shared_ptr<miroil::DisplayConfigurationPolicy> const wrapped_policy;
+    std::shared_ptr<miroil::DisplayConfigurationPolicy> const custom_policy;
 };
 
 struct DisplayConfigurationObserver : mg::DisplayConfigurationObserver
@@ -101,16 +98,14 @@ struct DisplayConfigurationObserver : mg::DisplayConfigurationObserver
         std::shared_ptr<mg::DisplayConfiguration const> const& /*failed_fallback*/,
         std::exception const& /*error*/) override {}
 
-#if MIR_SERVER_VERSION >= MIR_VERSION_NUMBER(1, 5, 0)
     void configuration_updated_for_session(
         std::shared_ptr<mir::scene::Session> const&,
         std::shared_ptr<mg::DisplayConfiguration const> const&) override {}
-#endif
 };
 
-miral::DisplayConfigurationOptions::DisplayMode current_mode_of(mg::DisplayConfigurationOutput const& output)
+miroil::DisplayConfigurationOptions::DisplayMode current_mode_of(mg::DisplayConfigurationOutput const& output)
 {
-    miral::DisplayConfigurationOptions::DisplayMode mode;
+    miroil::DisplayConfigurationOptions::DisplayMode mode;
     if (output.current_mode_index >= output.modes.size()) return mode;
 
     auto const& current_mode = output.modes[output.current_mode_index];
@@ -118,9 +113,15 @@ miral::DisplayConfigurationOptions::DisplayMode current_mode_of(mg::DisplayConfi
     mode.refresh_rate = current_mode.vrefresh_hz;
     return mode;
 }
+
+// From Qt
+inline bool qFuzzyCompare(double p1, double p2)
+{
+    return (std::abs(p1 - p2) * 1000000000000. <= std::min(std::abs(p1), std::abs(p2)));
+}
 }
 
-struct miral::PersistDisplayConfig::Self : PersistDisplayConfigPolicy, DisplayConfigurationObserver
+struct miroil::PersistDisplayConfig::Self : PersistDisplayConfigPolicy, DisplayConfigurationObserver
 {
     Self(std::shared_ptr<DisplayConfigurationStorage> const& storage,
          DisplayConfigurationPolicyWrapper const& custom_wrapper) :
@@ -133,36 +134,34 @@ struct miral::PersistDisplayConfig::Self : PersistDisplayConfigPolicy, DisplayCo
     {
         save_config(*base_config);
     }
-#if MIR_SERVER_VERSION >= MIR_VERSION_NUMBER(1, 5, 0)
+
     void session_configuration_applied(std::shared_ptr<mir::scene::Session> const&,
-                                       std::shared_ptr<mg::DisplayConfiguration> const&){}
-    void session_configuration_removed(std::shared_ptr<mir::scene::Session> const&)  {}
-#else
-    void session_configuration_applied(std::shared_ptr<mir::frontend::Session> const&,
-                                       std::shared_ptr<mg::DisplayConfiguration> const&){}
-    void session_configuration_removed(std::shared_ptr<mir::frontend::Session> const&)  {}
-#endif
+                                       std::shared_ptr<mg::DisplayConfiguration> const&) override {}
+    void session_configuration_removed(std::shared_ptr<mir::scene::Session> const&) override {}
+    void configuration_updated_for_session(
+        std::shared_ptr<mir::scene::Session> const&,
+        std::shared_ptr<mg::DisplayConfiguration const> const&) override {}
 };
 
-miral::PersistDisplayConfig::PersistDisplayConfig(std::shared_ptr<DisplayConfigurationStorage> const& storage,
+miroil::PersistDisplayConfig::PersistDisplayConfig(std::shared_ptr<DisplayConfigurationStorage> const& storage,
                                                   DisplayConfigurationPolicyWrapper const& custom_wrapper) :
     self{std::make_shared<Self>(storage, custom_wrapper)}
 {
 }
 
-miral::PersistDisplayConfig::~PersistDisplayConfig() = default;
+miroil::PersistDisplayConfig::~PersistDisplayConfig() = default;
 
-miral::PersistDisplayConfig::PersistDisplayConfig(PersistDisplayConfig const&) = default;
+miroil::PersistDisplayConfig::PersistDisplayConfig(PersistDisplayConfig const&) = default;
 
-auto miral::PersistDisplayConfig::operator=(PersistDisplayConfig const&) -> PersistDisplayConfig& = default;
+auto miroil::PersistDisplayConfig::operator=(PersistDisplayConfig const&) -> PersistDisplayConfig& = default;
 
-void miral::PersistDisplayConfig::operator()(mir::Server& server)
+void miroil::PersistDisplayConfig::operator()(mir::Server& server)
 {
     server.wrap_display_configuration_policy(
         [this](std::shared_ptr<mg::DisplayConfigurationPolicy> const& wrapped)
         -> std::shared_ptr<mg::DisplayConfigurationPolicy>
         {
-            auto custom_wrapper = self->custom_wrapper();
+            auto custom_wrapper = self->custom_wrapper(wrapped);
             return std::make_shared<DisplayConfigurationPolicyAdapter>(self,
                                                                        std::make_shared<MiralWrappedMirDisplayConfigurationPolicy>(wrapped),
                                                                        custom_wrapper);
@@ -174,8 +173,8 @@ void miral::PersistDisplayConfig::operator()(mir::Server& server)
 
 void PersistDisplayConfigPolicy::apply_to(
     mg::DisplayConfiguration& conf,
-    miral::DisplayConfigurationPolicy& wrapped_policy,
-    miral::DisplayConfigurationPolicy& custom_policy)
+    miroil::DisplayConfigurationPolicy& wrapped_policy,
+    miroil::DisplayConfigurationPolicy& custom_policy)
 {
     // first apply the policy we wrapped by setting a custom policy
     wrapped_policy.apply_to(conf);
@@ -183,14 +182,14 @@ void PersistDisplayConfigPolicy::apply_to(
     custom_policy.apply_to(conf);
 
     if (!storage) {
-        throw std::runtime_error("No display configuration storage supplied.");
+        BOOST_THROW_EXCEPTION(std::runtime_error("No display configuration storage supplied."));
     }
 
     conf.for_each_output([this, &conf](mg::UserDisplayConfigurationOutput& output) {
         if (!output.connected) return;
 
         try {
-            miral::DisplayId display_id;
+            miroil::DisplayId display_id;
             // FIXME - output.edid should be std::vector<uint8_t>, not std::vector<uint8_t const>
             display_id.edid.parse_data(reinterpret_cast<std::vector<uint8_t> const&>(output.edid));
             display_id.output_id = output.id;
@@ -198,7 +197,7 @@ void PersistDisplayConfigPolicy::apply_to(
             // TODO if the h/w profile (by some definition) has changed, then apply corresponding saved config (if any).
             // TODO Otherwise...
 
-            miral::DisplayConfigurationOptions config;
+            miroil::DisplayConfigurationOptions config;
             if (storage->load(display_id, config)) {
 
                 if (config.mode.is_set()) {
@@ -217,7 +216,7 @@ void PersistDisplayConfigPolicy::apply_to(
                 }
 
                 uint output_index = 0;
-                conf.for_each_output([this, &output, config, &output_index](mg::DisplayConfigurationOutput const& find_output) {
+                conf.for_each_output([&output, config, &output_index](mg::DisplayConfigurationOutput const& find_output) {
                     if (output_index == config.clone_output_index.value()) {
                         output.top_left = find_output.top_left;
                     }
@@ -243,15 +242,15 @@ void PersistDisplayConfigPolicy::save_config(mg::DisplayConfiguration const& con
         if (!output.connected) return;
 
         try {
-            miral::DisplayId display_id;
+            miroil::DisplayId display_id;
             // FIXME - output.edid should be std::vector<uint8_t>, not std::vector<uint8_t const>
             display_id.edid.parse_data(reinterpret_cast<std::vector<uint8_t> const&>(output.edid));
             display_id.output_id = output.id;
 
-            miral::DisplayConfigurationOptions config;
+            miroil::DisplayConfigurationOptions config;
 
             uint output_index = 0;
-            conf.for_each_output([this, output, &config, &output_index](mg::DisplayConfigurationOutput const& find_output) {
+            conf.for_each_output([output, &config, &output_index](mg::DisplayConfigurationOutput const& find_output) {
                 if (!config.clone_output_index.is_set() && output.top_left == find_output.top_left) {
                     config.clone_output_index = output_index;
                 }
diff --git a/src/platforms/mirserver/miroil/src/prompt_session_listener.cpp b/src/platforms/mirserver/miroil/src/prompt_session_listener.cpp
new file mode 100644
index 00000000..46c6e0f0
--- /dev/null
+++ b/src/platforms/mirserver/miroil/src/prompt_session_listener.cpp
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2016-2021 Canonical, Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <miroil/prompt_session_listener.h>
+
+miroil::PromptSessionListener::~PromptSessionListener() = default;
diff --git a/src/platforms/mirserver/miroil/src/prompt_session_manager.cpp b/src/platforms/mirserver/miroil/src/prompt_session_manager.cpp
new file mode 100644
index 00000000..7dd86f82
--- /dev/null
+++ b/src/platforms/mirserver/miroil/src/prompt_session_manager.cpp
@@ -0,0 +1,54 @@
+/*
+ * Copyright © 2021 Canonical Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "miroil/prompt_session_manager.h"
+#include "mir/scene/prompt_session_manager.h"
+
+miroil::PromptSessionManager::PromptSessionManager(std::shared_ptr<mir::scene::PromptSessionManager> const& prompt_session_manager) 
+:    prompt_session_manager{prompt_session_manager}
+{
+}
+
+miroil::PromptSessionManager::PromptSessionManager(PromptSessionManager&& /*src*/) = default;
+
+miroil::PromptSessionManager::PromptSessionManager(PromptSessionManager const& /*src*/) = default;
+
+miroil::PromptSessionManager::~PromptSessionManager() = default;
+
+bool miroil::PromptSessionManager::operator==(PromptSessionManager const& other)
+{
+    return prompt_session_manager == other.prompt_session_manager;
+}
+
+miral::Application miroil::PromptSessionManager::application_for(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) const
+{
+    return prompt_session_manager->application_for(prompt_session);
+}
+
+void miroil::PromptSessionManager::stop_prompt_session(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) const
+{
+    prompt_session_manager->stop_prompt_session(prompt_session);
+}
+
+void miroil::PromptSessionManager::suspend_prompt_session(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) const
+{
+    prompt_session_manager->suspend_prompt_session(prompt_session);
+}
+
+void miroil::PromptSessionManager::resume_prompt_session(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) const
+{
+    prompt_session_manager->resume_prompt_session(prompt_session);
+}
diff --git a/src/platforms/mirserver/miroil/src/set_compositor.cpp b/src/platforms/mirserver/miroil/src/set_compositor.cpp
new file mode 100644
index 00000000..a9f524c2
--- /dev/null
+++ b/src/platforms/mirserver/miroil/src/set_compositor.cpp
@@ -0,0 +1,88 @@
+/*
+ * Copyright © 2021 Canonical Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "miroil/set_compositor.h"
+#include "miroil/compositor.h"
+#include <stdexcept>
+
+// mir
+#include <mir/server.h>
+#include <mir/shell/shell.h>
+#include <mir/compositor/compositor.h>
+
+namespace miroil {
+
+struct SetCompositor::CompositorImpl : public mir::compositor::Compositor
+{
+    CompositorImpl(const std::shared_ptr<miroil::Compositor> & compositor);
+    
+    auto get_wrapped() -> std::shared_ptr<miroil::Compositor>;    
+    void start();
+    void stop();
+    
+    std::shared_ptr<miroil::Compositor> custom_compositor;
+};
+
+SetCompositor::CompositorImpl::CompositorImpl(const std::shared_ptr<miroil::Compositor> & compositor) 
+: custom_compositor(compositor)
+{
+}
+    
+auto SetCompositor::CompositorImpl::get_wrapped() 
+-> std::shared_ptr<miroil::Compositor>
+{ 
+    return custom_compositor;     
+}
+
+
+void SetCompositor::CompositorImpl::start()
+{
+    return custom_compositor->start();
+}
+
+void SetCompositor::CompositorImpl::stop()
+{
+    return custom_compositor->stop();
+}
+
+SetCompositor::SetCompositor(ConstructorFunction constr, InitFunction init)
+    : constructor_function(constr), init_function(init)
+{
+}
+
+void SetCompositor::operator()(mir::Server& server)
+{
+    server.override_the_compositor([this]
+    {
+        auto result = std::make_shared<CompositorImpl>(constructor_function());
+        compositor_impl = result;
+        return result;
+    });
+
+    server.add_init_callback([&, this]
+        {
+            if (auto const comp = compositor_impl.lock())
+            {
+                init_function(server.the_display(), comp->get_wrapped(), server.the_shell());
+            }
+            else
+            {
+                throw std::logic_error("No m_compositor available. Server not running?");
+            }
+        });
+}
+
+}
diff --git a/src/platforms/mirserver/miroil/src/surface.cpp b/src/platforms/mirserver/miroil/src/surface.cpp
new file mode 100644
index 00000000..bdc87f51
--- /dev/null
+++ b/src/platforms/mirserver/miroil/src/surface.cpp
@@ -0,0 +1,267 @@
+/*
+ * Copyright (C) 2021 Canonical, Ltd.
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+#include <miroil/surface.h>
+#include <miroil/surface_observer.h>
+#include "mir/scene/surface.h"
+#include "mir/scene/surface_observer.h"
+#include "mir/log.h"
+#include "mir/version.h"
+
+class miroil::SurfaceObserverImpl : public mir::scene::SurfaceObserver
+{
+public:
+  SurfaceObserverImpl(std::shared_ptr<miroil::SurfaceObserver> const &wrapped);
+  virtual ~SurfaceObserverImpl();
+
+  void alpha_set_to(mir::scene::Surface const *surf, float alpha) override;
+  void application_id_set_to(mir::scene::Surface const *surf,
+                             std::string const &application_id) override;
+  void attrib_changed(mir::scene::Surface const *surf, MirWindowAttrib attrib,
+                      int value) override;
+  void client_surface_close_requested(mir::scene::Surface const *surf) override;
+  void content_resized_to(mir::scene::Surface const *surf,
+                          mir::geometry::Size const &content_size) override;
+  void cursor_image_removed(mir::scene::Surface const *surf) override;
+  void cursor_image_set_to(mir::scene::Surface const *surf,
+                           mir::graphics::CursorImage const &image) override;
+  void depth_layer_set_to(mir::scene::Surface const *surf,
+                          MirDepthLayer depth_layer) override;
+  void frame_posted(mir::scene::Surface const *surf, int frames_available,
+                    mir::geometry::Size const &size) override;
+  void hidden_set_to(mir::scene::Surface const *surf, bool hide) override;
+  void input_consumed(mir::scene::Surface const *surf,
+                      MirEvent const *event) override;
+#if MIR_SERVER_VERSION < MIR_VERSION_NUMBER(2, 6, 0)
+  void keymap_changed(mir::scene::Surface const* surf, MirInputDeviceId id, std::string const& model,
+                      std::string const& layout, std::string const& variant, std::string const& options) override;
+#endif
+  void moved_to(mir::scene::Surface const *surf,
+                mir::geometry::Point const &top_left) override;
+  void orientation_set_to(mir::scene::Surface const *surf,
+                          MirOrientation orientation) override;
+  void placed_relative(mir::scene::Surface const *surf,
+                       mir::geometry::Rectangle const &placement) override;
+  void
+  reception_mode_set_to(mir::scene::Surface const * /*surf*/,
+                        mir::input::InputReceptionMode /*mode*/) override{};
+  void renamed(mir::scene::Surface const *surf, char const *name) override;
+  void start_drag_and_drop(mir::scene::Surface const *surf,
+                           std::vector<uint8_t> const &handle) override;
+  void transformation_set_to(mir::scene::Surface const *surf,
+                             glm::mat4 const &t) override;
+  void window_resized_to(mir::scene::Surface const *surf,
+                         mir::geometry::Size const &window_size) override;
+
+private:
+  std::shared_ptr<miroil::SurfaceObserver> listener;
+};
+
+miroil::SurfaceObserverImpl::SurfaceObserverImpl(std::shared_ptr<miroil::SurfaceObserver> const & wrapped)
+: listener(wrapped)
+{
+}
+
+miroil::SurfaceObserverImpl::~SurfaceObserverImpl() = default;
+
+void miroil::SurfaceObserverImpl::alpha_set_to(mir::scene::Surface const* surf, float alpha)
+{
+    listener->alpha_set_to(surf, alpha);
+}
+
+void miroil::SurfaceObserverImpl::application_id_set_to(mir::scene::Surface const* surf, std::string const& application_id)
+{
+    listener->application_id_set_to(surf, application_id);
+}
+
+void miroil::SurfaceObserverImpl::attrib_changed(mir::scene::Surface const* surf, MirWindowAttrib attrib, int value)
+{
+    listener->attrib_changed(surf, attrib, value);
+}
+
+void miroil::SurfaceObserverImpl::client_surface_close_requested(mir::scene::Surface const* surf)
+{
+    listener->client_surface_close_requested(surf);
+}
+
+void miroil::SurfaceObserverImpl::content_resized_to(mir::scene::Surface const* surf, mir::geometry::Size const& content_size)
+{
+    listener->content_resized_to(surf, content_size);
+}
+
+void miroil::SurfaceObserverImpl::cursor_image_removed(mir::scene::Surface const* surf)
+{
+    listener->cursor_image_removed(surf);
+}
+
+void miroil::SurfaceObserverImpl::cursor_image_set_to(mir::scene::Surface const* surf, mir::graphics::CursorImage const& image)
+{
+    listener->cursor_image_set_to(surf, image);
+}
+
+void miroil::SurfaceObserverImpl::depth_layer_set_to(mir::scene::Surface const* surf, MirDepthLayer depth_layer)
+{
+    listener->depth_layer_set_to(surf, depth_layer);
+}
+
+void miroil::SurfaceObserverImpl::frame_posted(mir::scene::Surface const* surf, int frames_available, mir::geometry::Size const& size)
+{
+    listener->frame_posted(surf, frames_available, size);
+}
+
+void miroil::SurfaceObserverImpl::hidden_set_to(mir::scene::Surface const* surf, bool hide)
+{
+    listener->hidden_set_to(surf, hide);
+}
+
+void miroil::SurfaceObserverImpl::input_consumed(mir::scene::Surface const* surf, MirEvent const* event)
+{
+    listener->input_consumed(surf, event);
+}
+
+#if MIR_SERVER_VERSION < MIR_VERSION_NUMBER(2, 6, 0)
+void miroil::SurfaceObserverImpl::keymap_changed(mir::scene::Surface const* surf, MirInputDeviceId id, std::string const& model,
+                            std::string const& layout, std::string const& variant, std::string const& options)
+{
+    listener->keymap_changed(surf, id, model, layout, variant, options);
+}
+#endif
+
+void miroil::SurfaceObserverImpl::moved_to(mir::scene::Surface const* surf, mir::geometry::Point const& top_left)
+{
+    listener->moved_to(surf, top_left);
+}
+
+void miroil::SurfaceObserverImpl::orientation_set_to(mir::scene::Surface const* surf, MirOrientation orientation)
+{
+    listener->orientation_set_to(surf, orientation);
+}
+
+void miroil::SurfaceObserverImpl::placed_relative(mir::scene::Surface const* surf, mir::geometry::Rectangle const& placement)
+{
+    listener->placed_relative(surf, placement);
+}
+
+void miroil::SurfaceObserverImpl::renamed(mir::scene::Surface const* surf, char const* name)
+{
+    listener->renamed(surf, name);
+}
+
+void miroil::SurfaceObserverImpl::start_drag_and_drop(mir::scene::Surface const* surf, std::vector<uint8_t> const& handle)
+{
+    listener->start_drag_and_drop(surf, handle);
+}
+
+void miroil::SurfaceObserverImpl::transformation_set_to(mir::scene::Surface const* surf, glm::mat4 const& t)
+{
+    listener->transformation_set_to(surf, t);
+}
+
+void miroil::SurfaceObserverImpl::window_resized_to(mir::scene::Surface const* surf, mir::geometry::Size const& window_size)
+{
+    listener->window_resized_to(surf, window_size);
+}
+
+miroil::Surface::Surface(std::shared_ptr<mir::scene::Surface> wrapped) :
+     wrapped(wrapped)
+{    
+}
+
+void miroil::Surface::add_observer(std::shared_ptr<SurfaceObserver> const& observer)
+{
+    auto it = observers.find(observer);
+    if (it == observers.end()) {
+        std::shared_ptr<SurfaceObserverImpl> impl = std::make_shared<SurfaceObserverImpl>(observer);
+        
+        wrapped->add_observer(impl);
+        observers.insert({observer, impl});
+    }
+}
+
+bool miroil::Surface::is_confined_to_window()
+{
+#if MIR_SERVER_VERSION >= MIR_VERSION_NUMBER(2, 6, 0)
+    return (wrapped->confine_pointer_state() == mir_pointer_confined_oneshot ||
+            wrapped->confine_pointer_state() == mir_pointer_confined_persistent);
+#else
+    return false;
+#endif
+}
+
+void miroil::Surface::remove_observer(std::shared_ptr<miroil::SurfaceObserver> const& observer)
+{
+    auto it = observers.find(observer);
+    if (it != observers.end()) {        
+        wrapped->remove_observer(it->second);
+        observers.erase(it);        
+    }
+}
+
+auto miroil::Surface::get_wrapped() const -> mir::scene::Surface*
+{
+    return wrapped.get();
+}
+
+int miroil::Surface::buffers_ready_for_compositor(void const* compositor_id) const
+{
+    return wrapped->buffers_ready_for_compositor(compositor_id);
+}
+
+mir::graphics::RenderableList miroil::Surface::generate_renderables(miroil::CompositorID id) const
+{
+    return wrapped->generate_renderables(id);
+}
+
+void miroil::Surface::set_orientation(MirOrientation orientation)
+{
+    wrapped->set_orientation(orientation);
+}
+
+void miroil::Surface::set_confine_pointer_state(MirPointerConfinementState state)
+{
+    wrapped->set_confine_pointer_state(state);
+}
+
+std::shared_ptr<mir::scene::Surface> miroil::Surface::parent() const
+{
+    return wrapped->parent();
+}
+
+mir::geometry::Point miroil::Surface::top_left() const
+{
+    return wrapped->top_left();
+}
+
+bool miroil::Surface::visible() const
+{
+    return wrapped->visible();
+}
+
+int miroil::Surface::configure(MirWindowAttrib attrib, int value)
+{
+    return wrapped->configure(attrib, value);
+}
+
+int miroil::Surface::query(MirWindowAttrib attrib) const
+{
+    return wrapped->query(attrib);
+}
+
+void miroil::Surface::set_keymap(MirInputDeviceId /*id*/, const std::string& /*model*/,
+                         const std::string& /*layout*/, const std::string& /*variant*/,
+                         const std::string& /*options*/)
+{
+    fprintf(stderr, "Stubbed function miroil::Surface::set_keymap() called - per-surface keymaps no longer supported");
+}
diff --git a/src/platforms/mirserver/miropenglcontext.cpp b/src/platforms/mirserver/miropenglcontext.cpp
index 5e658824..1e24755d 100644
--- a/src/platforms/mirserver/miropenglcontext.cpp
+++ b/src/platforms/mirserver/miropenglcontext.cpp
@@ -49,7 +49,7 @@ MirOpenGLContext::MirOpenGLContext(
 {
     // create a temporary GL context to fetch the EGL display and config, so Qt can determine the surface format
     std::unique_ptr<mir::renderer::gl::Context> mirContext = dynamic_cast<mir::renderer::gl::ContextSource*>(
-                                                                display.native_display())->create_gl_context();
+                                                                &display)->create_gl_context();
     mirContext->make_current();
 
     EGLDisplay eglDisplay = eglGetCurrentDisplay();
diff --git a/src/platforms/mirserver/mirserverhooks.cpp b/src/platforms/mirserver/mirserverhooks.cpp
deleted file mode 100644
index b6f6eb98..00000000
--- a/src/platforms/mirserver/mirserverhooks.cpp
+++ /dev/null
@@ -1,229 +0,0 @@
-/*
- * Copyright © 2016 Canonical Ltd.
- *
- * This program is free software: you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- *
- * Authored by: Alan Griffiths <alan@octopull.co.uk>
- */
-
-#include "mirserverhooks.h"
-
-#include "mircursorimages.h"
-#include "promptsessionlistener.h"
-#include "screenscontroller.h"
-#include "logging.h"
-#include "inputdeviceobserver.h"
-
-// mir
-#include <mir/server.h>
-#include <mir/graphics/cursor.h>
-#include <mir/scene/prompt_session_listener.h>
-#include <mir/input/device.h>
-#include <mir/input/input_device_hub.h>
-#include <mir/input/input_device_observer.h>
-
-namespace mg = mir::graphics;
-namespace ms = mir::scene;
-
-namespace
-{
-struct PromptSessionListenerImpl : PromptSessionListener, mir::scene::PromptSessionListener
-{
-    ~PromptSessionListenerImpl();
-
-    void starting(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) override;
-    void stopping(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) override;
-    void suspending(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) override;
-    void resuming(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) override;
-
-    void prompt_provider_added(mir::scene::PromptSession const& prompt_session,
-                               std::shared_ptr<mir::scene::Session> const& prompt_provider) override;
-    void prompt_provider_removed(mir::scene::PromptSession const& prompt_session,
-                                 std::shared_ptr<mir::scene::Session> const& prompt_provider) override;
-
-private:
-    QHash<const mir::scene::PromptSession *, qtmir::PromptSession> m_mirPromptToSessionHash;
-};
-
-struct MirInputDeviceObserverImpl : qtmir::MirInputDeviceObserver, mir::input::InputDeviceObserver
-{
-    void device_added(std::shared_ptr<mir::input::Device> const& device) override;
-    void device_changed(std::shared_ptr<mir::input::Device> const& /*device*/) override {}
-    void device_removed(std::shared_ptr<mir::input::Device> const& device) override;
-    void changes_complete() override {}
-};
-
-struct HiddenCursorWrapper : mg::Cursor
-{
-    HiddenCursorWrapper(std::shared_ptr<mg::Cursor> const& wrapped) :
-        wrapped{wrapped} { wrapped->hide(); }
-    void show() override { }
-    void show(mg::CursorImage const&) override { }
-    void hide() override { wrapped->hide(); }
-
-    void move_to(mir::geometry::Point position) override { wrapped->move_to(position); }
-
-private:
-    std::shared_ptr<mg::Cursor> const wrapped;
-};
-}
-
-struct qtmir::MirServerHooks::Self
-{
-    std::weak_ptr<PromptSessionListener> m_promptSessionListener;
-    std::weak_ptr<mir::graphics::Display> m_mirDisplay;
-    std::weak_ptr<mir::shell::DisplayConfigurationController> m_mirDisplayConfigurationController;
-    std::weak_ptr<mir::scene::PromptSessionManager> m_mirPromptSessionManager;
-    std::weak_ptr<mir::input::InputDeviceHub> m_inputDeviceHub;
-};
-
-qtmir::MirServerHooks::MirServerHooks() :
-    self{std::make_shared<Self>()}
-{
-}
-
-void qtmir::MirServerHooks::operator()(mir::Server& server)
-{
-    server.override_the_cursor_images([]
-        { return std::make_shared<qtmir::MirCursorImages>(); });
-
-    server.wrap_cursor([&](std::shared_ptr<mg::Cursor> const& wrapped)
-        { return std::make_shared<HiddenCursorWrapper>(wrapped); });
-
-    server.override_the_prompt_session_listener([this]
-        {
-            auto const result = std::make_shared<PromptSessionListenerImpl>();
-            self->m_promptSessionListener = result;
-            return result;
-        });
-
-    server.add_init_callback([this, &server]
-        {
-            self->m_mirDisplay = server.the_display();
-            self->m_mirDisplayConfigurationController = server.the_display_configuration_controller();
-            self->m_mirPromptSessionManager = server.the_prompt_session_manager();
-            self->m_inputDeviceHub = server.the_input_device_hub();
-        });
-}
-
-PromptSessionListener *qtmir::MirServerHooks::promptSessionListener() const
-{
-    if (auto result = self->m_promptSessionListener.lock())
-        return result.get();
-
-    throw std::logic_error("No prompt session listener available. Server not running?");
-}
-
-std::shared_ptr<mir::scene::PromptSessionManager> qtmir::MirServerHooks::thePromptSessionManager() const
-{
-    if (auto result = self->m_mirPromptSessionManager.lock())
-        return result;
-
-    throw std::logic_error("No prompt session manager available. Server not running?");
-}
-
-std::shared_ptr<mir::graphics::Display> qtmir::MirServerHooks::theMirDisplay() const
-{
-    if (auto result = self->m_mirDisplay.lock())
-        return result;
-
-    throw std::logic_error("No display available. Server not running?");
-}
-
-std::shared_ptr<mir::input::InputDeviceHub> qtmir::MirServerHooks::theInputDeviceHub() const
-{
-    if (auto result = self->m_inputDeviceHub.lock())
-        return result;
-
-    throw std::logic_error("No input device hub available. Server not running?");
-}
-
-QSharedPointer<ScreensController> qtmir::MirServerHooks::createScreensController(std::shared_ptr<ScreensModel> const &screensModel) const
-{
-    return QSharedPointer<ScreensController>(
-        new ScreensController(screensModel, theMirDisplay(), self->m_mirDisplayConfigurationController.lock()));
-}
-
-void qtmir::MirServerHooks::createInputDeviceObserver()
-{
-    theInputDeviceHub()->add_observer(std::make_shared<MirInputDeviceObserverImpl>());
-}
-
-PromptSessionListenerImpl::~PromptSessionListenerImpl() = default;
-
-void PromptSessionListenerImpl::starting(std::shared_ptr<ms::PromptSession> const& prompt_session)
-{
-    qCDebug(QTMIR_MIR_MESSAGES) << "PromptSessionListener::starting - this=" << this << "prompt_session=" << prompt_session.get();
-    m_mirPromptToSessionHash.insert(prompt_session.get(), prompt_session);
-    Q_EMIT promptSessionStarting(prompt_session);
-}
-
-void PromptSessionListenerImpl::stopping(std::shared_ptr<ms::PromptSession> const& prompt_session)
-{
-    qCDebug(QTMIR_MIR_MESSAGES) << "PromptSessionListener::stopping - this=" << this << "prompt_session=" << prompt_session.get();
-    Q_EMIT promptSessionStopping(prompt_session);
-    m_mirPromptToSessionHash.remove(prompt_session.get());
-}
-
-void PromptSessionListenerImpl::suspending(std::shared_ptr<ms::PromptSession> const& prompt_session)
-{
-    qCDebug(QTMIR_MIR_MESSAGES) << "PromptSessionListener::suspending - this=" << this << "prompt_session=" << prompt_session.get();
-    Q_EMIT promptSessionSuspending(prompt_session);
-}
-
-void PromptSessionListenerImpl::resuming(std::shared_ptr<ms::PromptSession> const& prompt_session)
-{
-    qCDebug(QTMIR_MIR_MESSAGES) << "PromptSessionListener::resuming - this=" << this << "prompt_session=" << prompt_session.get();
-    Q_EMIT promptSessionResuming(prompt_session);
-}
-
-void PromptSessionListenerImpl::prompt_provider_added(ms::PromptSession const& prompt_session,
-                                                      std::shared_ptr<ms::Session> const& prompt_provider)
-{
-    qCDebug(QTMIR_MIR_MESSAGES) << "PromptSessionListener::prompt_provider_added - this=" << this
-                                << "prompt_session=" << &prompt_session
-                                << "prompt_provider=" << prompt_provider.get();
-    Q_EMIT promptProviderAdded(m_mirPromptToSessionHash[&prompt_session], prompt_provider);
-}
-
-void PromptSessionListenerImpl::prompt_provider_removed(ms::PromptSession const& prompt_session,
-                                                        std::shared_ptr<ms::Session> const& prompt_provider)
-{
-    qCDebug(QTMIR_MIR_MESSAGES) << "PromptSessionListener::prompt_provider_removed - this=" << this
-                                << "prompt_session=" << &prompt_session
-                                << "prompt_provider=" << prompt_provider.get();
-    Q_EMIT promptProviderRemoved(m_mirPromptToSessionHash[&prompt_session], prompt_provider);
-}
-
-void MirInputDeviceObserverImpl::device_added(const std::shared_ptr<mir::input::Device> &device)
-{
-    QMutexLocker locker(&m_mutex);  // lock so that Qt and Mir don't apply the keymap at the same time
-
-    if (mir::contains(device->capabilities(), mir::input::DeviceCapability::keyboard) &&
-        mir::contains(device->capabilities(), mir::input::DeviceCapability::alpha_numeric)) {
-        qCDebug(QTMIR_MIR_KEYMAP) << "Device added" << device->id();
-        m_devices.append(device);
-        applyKeymap(device);
-    }
-}
-
-void MirInputDeviceObserverImpl::device_removed(const std::shared_ptr<mir::input::Device> &device)
-{
-    QMutexLocker locker(&m_mutex);  // lock so that Qt and Mir don't apply the keymap at the same time
-
-    if (device && m_devices.contains(device)) {
-        qCDebug(QTMIR_MIR_KEYMAP) << "Device removed" << device->id();
-        m_devices.removeAll(device);
-    }
-}
-
diff --git a/src/platforms/mirserver/mirserverhooks.h b/src/platforms/mirserver/mirserverhooks.h
deleted file mode 100644
index 6866b2fb..00000000
--- a/src/platforms/mirserver/mirserverhooks.h
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Copyright © 2016 Canonical Ltd.
- *
- * This program is free software: you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- *
- * Authored by: Alan Griffiths <alan@octopull.co.uk>
- */
-
-#ifndef MIRAL_MIRSERVERHOOKS_H
-#define MIRAL_MIRSERVERHOOKS_H
-
-#include <memory>
-#include <QSharedPointer>
-
-namespace mir { class Server; }
-namespace mir { namespace scene { class PromptSessionManager; }}
-namespace mir { namespace graphics { class Display; }}
-namespace mir { namespace input { class InputDeviceHub; } }
-
-class PromptSessionListener;
-class ScreensController;
-class ScreensModel;
-
-namespace qtmir
-{
-class MirServerHooks
-{
-public:
-    MirServerHooks();
-
-    void operator()(mir::Server& server);
-
-    PromptSessionListener *promptSessionListener() const;
-    std::shared_ptr<mir::scene::PromptSessionManager> thePromptSessionManager() const;
-    std::shared_ptr<mir::graphics::Display> theMirDisplay() const;
-    std::shared_ptr<mir::input::InputDeviceHub> theInputDeviceHub() const;
-
-    QSharedPointer<ScreensController> createScreensController(std::shared_ptr<ScreensModel> const &screensModel) const;
-    void createInputDeviceObserver();
-
-private:
-    struct Self;
-    std::shared_ptr<Self> self;
-};
-}
-
-#endif //MIRAL_MIRSERVERHOOKS_H
diff --git a/src/platforms/mirserver/nativeinterface.cpp b/src/platforms/mirserver/nativeinterface.cpp
index 48a776c5..69484ec7 100644
--- a/src/platforms/mirserver/nativeinterface.cpp
+++ b/src/platforms/mirserver/nativeinterface.cpp
@@ -86,7 +86,7 @@ void NativeInterface::setWindowProperty(QPlatformWindow */*window*/, const QStri
     }
 }
 
-std::shared_ptr<qtmir::PromptSessionManager> NativeInterface::thePromptSessionManager() const
+std::shared_ptr<miroil::PromptSessionManager> NativeInterface::thePromptSessionManager() const
 {
     return m_qMirServer->thePromptSessionManager();
 }
diff --git a/src/platforms/mirserver/nativeinterface.h b/src/platforms/mirserver/nativeinterface.h
index 4cf37e9c..0dae656f 100644
--- a/src/platforms/mirserver/nativeinterface.h
+++ b/src/platforms/mirserver/nativeinterface.h
@@ -27,7 +27,8 @@
 class QMirServer;
 
 // mir
-namespace qtmir { class PromptSessionManager; class Seats; }
+namespace qtmir { class Seats; }
+namespace miroil { class PromptSessionManager; }
 namespace mir { namespace shell { class PersistentSurfaceStore; }}
 
 class NativeInterface : public QPlatformNativeInterface
@@ -41,7 +42,7 @@ public:
 
     void setWindowProperty(QPlatformWindow *, const QString &name, const QVariant &value) override;
 
-    std::shared_ptr<qtmir::PromptSessionManager> thePromptSessionManager() const;
+    std::shared_ptr<miroil::PromptSessionManager> thePromptSessionManager() const;
     std::shared_ptr<mir::shell::PersistentSurfaceStore> thePersistentSurfaceStore() const;
     std::shared_ptr<qtmir::Seats> theSeats() const;
 
diff --git a/src/platforms/mirserver/platformscreen.h b/src/platforms/mirserver/platformscreen.h
index 404f9c9e..4ee6d11c 100644
--- a/src/platforms/mirserver/platformscreen.h
+++ b/src/platforms/mirserver/platformscreen.h
@@ -27,9 +27,11 @@
 // Mir
 #include <mir_toolkit/common.h>
 
+// Miroil
+#include <miroil/display_configuration_storage.h>
+
 // local
 #include "qtmir/types.h"
-#include "qtmir/miral/display_configuration_storage.h"
 #include "cursor.h"
 #include "screenplatformwindow.h"
 
@@ -68,7 +70,7 @@ public:
     float* scaleRef() { return &m_scale; }
     qtmir::FormFactor formFactor() const { return m_formFactor; }
     MirPowerMode powerMode() const { return m_powerMode; }
-    miral::DisplayId displayId() const { return m_displayId; }
+    miroil::DisplayId displayId() const { return m_displayId; }
     qtmir::OutputTypes outputType() const { return m_type; }
     uint32_t currentModeIndex() const { return m_currentModeIndex; }
     bool isActive() const { return m_isActive; }
@@ -140,7 +142,7 @@ private:
 
     mir::renderer::gl::RenderTarget *m_renderTarget;
     mir::graphics::DisplaySyncGroup *m_displayGroup;
-    miral::DisplayId m_displayId;
+    miroil::DisplayId m_displayId;
     qtmir::OutputTypes m_type;
     MirPowerMode m_powerMode;
 
diff --git a/src/platforms/mirserver/promptsessionlistener.cpp b/src/platforms/mirserver/promptsessionlistener.cpp
index e30d0eb9..7ab7569e 100644
--- a/src/platforms/mirserver/promptsessionlistener.cpp
+++ b/src/platforms/mirserver/promptsessionlistener.cpp
@@ -19,6 +19,8 @@
 
 namespace ms = mir::scene;
 
+namespace qtmir {
+
 PromptSessionListener::PromptSessionListener(QObject *parent) :
     QObject(parent)
 {
@@ -31,3 +33,50 @@ PromptSessionListener::~PromptSessionListener()
 {
     qCDebug(QTMIR_MIR_MESSAGES) << "PromptSessionListener::~PromptSessionListener - this=" << this;
 }
+
+void PromptSessionListener::starting(std::shared_ptr<ms::PromptSession> const& prompt_session)
+{
+    qCDebug(QTMIR_MIR_MESSAGES) << "PromptSessionListener::starting - this=" << this << "prompt_session=" << prompt_session.get();
+    m_mirPromptToSessionHash.insert(prompt_session.get(), prompt_session);
+    Q_EMIT promptSessionStarting(prompt_session);
+}
+
+void PromptSessionListener::stopping(std::shared_ptr<ms::PromptSession> const& prompt_session)
+{
+    qCDebug(QTMIR_MIR_MESSAGES) << "PromptSessionListener::stopping - this=" << this << "prompt_session=" << prompt_session.get();
+    Q_EMIT promptSessionStopping(prompt_session);
+    m_mirPromptToSessionHash.remove(prompt_session.get());
+}
+
+void PromptSessionListener::suspending(std::shared_ptr<ms::PromptSession> const& prompt_session)
+{
+    qCDebug(QTMIR_MIR_MESSAGES) << "PromptSessionListener::suspending - this=" << this << "prompt_session=" << prompt_session.get();
+    Q_EMIT promptSessionSuspending(prompt_session);
+}
+
+void PromptSessionListener::resuming(std::shared_ptr<ms::PromptSession> const& prompt_session)
+{
+    qCDebug(QTMIR_MIR_MESSAGES) << "PromptSessionListener::resuming - this=" << this << "prompt_session=" << prompt_session.get();
+    Q_EMIT promptSessionResuming(prompt_session);
+}
+
+void PromptSessionListener::prompt_provider_added(ms::PromptSession const& prompt_session,
+                                                      std::shared_ptr<ms::Session> const& prompt_provider)
+{
+    qCDebug(QTMIR_MIR_MESSAGES) << "PromptSessionListener::prompt_provider_added - this=" << this
+                                << "prompt_session=" << &prompt_session
+                                << "prompt_provider=" << prompt_provider.get();
+    Q_EMIT promptProviderAdded(m_mirPromptToSessionHash[&prompt_session], prompt_provider);
+}
+
+void PromptSessionListener::prompt_provider_removed(ms::PromptSession const& prompt_session,
+                                                        std::shared_ptr<ms::Session> const& prompt_provider)
+{
+    qCDebug(QTMIR_MIR_MESSAGES) << "PromptSessionListener::prompt_provider_removed - this=" << this
+                                << "prompt_session=" << &prompt_session
+                                << "prompt_provider=" << prompt_provider.get();
+    Q_EMIT promptProviderRemoved(m_mirPromptToSessionHash[&prompt_session], prompt_provider);
+}
+
+}
+
diff --git a/src/platforms/mirserver/promptsessionlistener.h b/src/platforms/mirserver/promptsessionlistener.h
index 73f0e606..ed635832 100644
--- a/src/platforms/mirserver/promptsessionlistener.h
+++ b/src/platforms/mirserver/promptsessionlistener.h
@@ -14,25 +14,37 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-#ifndef PROMPTSESSIONLISTENER_H
-#define PROMPTSESSIONLISTENER_H
+#ifndef QTMIR_PROMPTSESSIONLISTENER_H
+#define QTMIR_PROMPTSESSIONLISTENER_H
+#include <memory>
 
 // Qt
 #include <QHash>
 #include <QObject>
 
 #include "promptsession.h"
-
+#include <miroil/prompt_session_listener.h>
 #include <miral/application.h>
 
-class PromptSessionListener : public QObject
+namespace qtmir {
+
+class PromptSessionListener : public QObject, public miroil::PromptSessionListener
 {
 Q_OBJECT
-protected:
+public:
     explicit PromptSessionListener(QObject *parent = 0);
     ~PromptSessionListener();
 
-public:
+    // PromptSessionListener functions    
+    void starting(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) override;
+    void stopping(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) override;
+    void suspending(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) override;
+    void resuming(std::shared_ptr<mir::scene::PromptSession> const& prompt_session) override;
+    void prompt_provider_added(mir::scene::PromptSession const& prompt_session,
+                               std::shared_ptr<mir::scene::Session> const& prompt_provider) override;
+    void prompt_provider_removed(mir::scene::PromptSession const& prompt_session,
+                                 std::shared_ptr<mir::scene::Session> const& prompt_provider) override;
+
 Q_SIGNALS:
     void promptSessionStarting(qtmir::PromptSession const &session);
     void promptSessionStopping(qtmir::PromptSession const &session);
@@ -41,9 +53,14 @@ Q_SIGNALS:
 
     void promptProviderAdded(qtmir::PromptSession const&, miral::Application const&);
     void promptProviderRemoved(qtmir::PromptSession const&, miral::Application const&);
+    
+private:
+    QHash<const mir::scene::PromptSession *, qtmir::PromptSession> m_mirPromptToSessionHash;
 };
 
+}
+
 Q_DECLARE_METATYPE(qtmir::PromptSession)
 Q_DECLARE_METATYPE(miral::Application)
 
-#endif // SESSIONLISTENER_H
+#endif // QTMIR_PROMPTSESSIONLISTENER_H
diff --git a/src/platforms/mirserver/promptsessionmanager.cpp b/src/platforms/mirserver/promptsessionmanager.cpp
deleted file mode 100644
index 138b691d..00000000
--- a/src/platforms/mirserver/promptsessionmanager.cpp
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * Copyright © 2016 Canonical Ltd.
- *
- * This program is free software: you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include "promptsessionmanager.h"
-#include "promptsession.h"
-
-#include <mir/scene/prompt_session_manager.h>
-
-qtmir::PromptSessionManager::PromptSessionManager(std::shared_ptr<mir::scene::PromptSessionManager> const &promptSessionManager) :
-    m_promptSessionManager{promptSessionManager}
-{
-}
-
-qtmir::PromptSessionManager::~PromptSessionManager() = default;
-
-miral::Application qtmir::PromptSessionManager::applicationFor(const PromptSession &promptSession) const
-{
-    return m_promptSessionManager->application_for(promptSession);
-}
-
-void qtmir::PromptSessionManager::stopPromptSession(const PromptSession &promptSession) const
-{
-    m_promptSessionManager->stop_prompt_session(promptSession);
-}
-
-void qtmir::PromptSessionManager::suspendPromptSession(const PromptSession &promptSession) const
-{
-    m_promptSessionManager->suspend_prompt_session(promptSession);
-}
-
-void qtmir::PromptSessionManager::resumePromptSession(const PromptSession &promptSession) const
-{
-    m_promptSessionManager->resume_prompt_session(promptSession);
-}
diff --git a/src/platforms/mirserver/promptsessionmanager.h b/src/platforms/mirserver/promptsessionmanager.h
deleted file mode 100644
index ebc207cb..00000000
--- a/src/platforms/mirserver/promptsessionmanager.h
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * Copyright © 2016 Canonical Ltd.
- *
- * This program is free software: you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef QTMIR_PROMPTSESSIONMANAGER_H
-#define QTMIR_PROMPTSESSIONMANAGER_H
-
-#include <miral/application.h>
-
-#include <memory>
-
-namespace mir {
-namespace scene {
-class PromptSessionManager;
-}
-}
-
-namespace qtmir {
-class PromptSession;
-class PromptSessionManager
-{
-public:
-    explicit PromptSessionManager(const std::shared_ptr<mir::scene::PromptSessionManager> &promptSessionManager);
-    virtual ~PromptSessionManager();
-
-    miral::Application applicationFor(qtmir::PromptSession const &promptSession) const;
-
-    void stopPromptSession(qtmir::PromptSession const &promptSession) const;
-    void suspendPromptSession(qtmir::PromptSession const &promptSession) const;
-    void resumePromptSession(qtmir::PromptSession const &promptSession) const;
-
-private:
-    std::shared_ptr<mir::scene::PromptSessionManager> const m_promptSessionManager;
-};
-}
-
-#endif //QTMIR_PROMPTSESSIONMANAGER_H
diff --git a/src/platforms/mirserver/qmirserver.cpp b/src/platforms/mirserver/qmirserver.cpp
index 6c0160e7..fe1b1a31 100644
--- a/src/platforms/mirserver/qmirserver.cpp
+++ b/src/platforms/mirserver/qmirserver.cpp
@@ -26,7 +26,6 @@
 #include "qmirserver.h"
 #include "qmirserver_p.h"
 
-
 QMirServer::QMirServer(QObject *parent)
     : QObject(parent)
     , d_ptr(new QMirServerPrivate)
@@ -134,7 +133,7 @@ void *QMirServer::nativeResourceForIntegration(const QByteArray &resource) const
     return result;
 }
 
-std::shared_ptr<qtmir::PromptSessionManager> QMirServer::thePromptSessionManager() const
+std::shared_ptr<miroil::PromptSessionManager> QMirServer::thePromptSessionManager() const
 {
     Q_D(const QMirServer);
     return d->promptSessionManager();
diff --git a/src/platforms/mirserver/qmirserver.h b/src/platforms/mirserver/qmirserver.h
index 74d81c6b..d0dc2c5b 100644
--- a/src/platforms/mirserver/qmirserver.h
+++ b/src/platforms/mirserver/qmirserver.h
@@ -29,14 +29,17 @@
 #include "qtmir/displayconfigurationpolicy.h"
 #include "qtmir/displayconfigurationstorage.h"
 
+// miroil
+#include <miroil/prompt_session_manager.h>
+
 // qtmir
 namespace qtmir {
-    class PromptSessionManager;
     class WindowModelNotifier;
     class AppNotifier;
 }
 namespace mir { class Server; }
 
+// qtmir
 class QMirServerPrivate;
 class ScreensController;
 class ScreensModel;
@@ -59,7 +62,7 @@ public:
     std::shared_ptr<ScreensModel> screensModel() const;
     QPlatformOpenGLContext *createPlatformOpenGLContext(QOpenGLContext *context) const;
     void *nativeResourceForIntegration(const QByteArray &resource) const;
-    std::shared_ptr<qtmir::PromptSessionManager> thePromptSessionManager() const;
+    std::shared_ptr<miroil::PromptSessionManager> thePromptSessionManager() const;
 
     qtmir::WindowModelNotifier *windowModelNotifier() const;
     qtmir::AppNotifier *appNotifier() const;
diff --git a/src/platforms/mirserver/qmirserver_p.cpp b/src/platforms/mirserver/qmirserver_p.cpp
index c11acc97..e5858a53 100644
--- a/src/platforms/mirserver/qmirserver_p.cpp
+++ b/src/platforms/mirserver/qmirserver_p.cpp
@@ -15,23 +15,34 @@
  */
 
 #include "qmirserver_p.h"
-#include "qtmir/miral/display_configuration_storage.h"
 
 // local
 #include "logging.h"
 #include "wrappedwindowmanagementpolicy.h"
-#include "promptsessionmanager.h"
-#include "setqtcompositor.h"
+#include "inputdeviceobserver.h"
 #include "qteventfeeder.h"
 #include "qtmir/sessionauthorizer.h"
-
-// prototyping for later incorporation in miral
-#include <miral/persist_display_config.h>
+#include "miropenglcontext.h"
+#include "mirglconfig.h"
+#include "screenscontroller.h"
+#include "qtcompositor.h"
+#include "namedcursor.h"
+#include "promptsessionlistener.h"
+#include "qtwindowmanager.h"
+#include "wayland/xdgdecorationV1.h"
+#include "wayland/kwinserverdecoration.h"
+
+#include <miroil/prompt_session_manager.h>
+#include <miroil/persist_display_config.h>
+#include <miroil/set_compositor.h>
+#include <miroil/display_listener_wrapper.h>
 
 // miral
 #include <miral/add_init_callback.h>
 #include <miral/set_terminator.h>
 #include <miral/x11_support.h>
+#include <miral/keymap.h>
+#include <miral/wayland_extensions.h>
 
 // Qt
 #include <QCoreApplication>
@@ -54,19 +65,14 @@ public:
     {}
 };
 
-struct DefaultDisplayConfigurationStorage : miral::DisplayConfigurationStorage
+struct DefaultDisplayConfigurationStorage : miroil::DisplayConfigurationStorage
 {
-    void save(const miral::DisplayId&, const miral::DisplayConfigurationOptions&) override {}
+    void save(const miroil::DisplayId&, const miroil::DisplayConfigurationOptions&) override {}
 
-    bool load(const miral::DisplayId&, miral::DisplayConfigurationOptions&) const override { return false; }
+    bool load(const miroil::DisplayId&, miroil::DisplayConfigurationOptions&) const override { return false; }
 };
 
-std::shared_ptr<miral::DisplayConfigurationPolicy> buildDisplayConfigurationPolicy()
-{
-    return std::make_shared<qtmir::DisplayConfigurationPolicy>();
-}
-
-std::shared_ptr<miral::DisplayConfigurationStorage> buildDisplayConfigurationStorage()
+std::shared_ptr<miroil::DisplayConfigurationStorage> buildDisplayConfigurationStorage()
 {
     return std::make_shared<DefaultDisplayConfigurationStorage>();
 }
@@ -113,12 +119,19 @@ bool MirServerThread::waitForMirStartup()
 
 QPlatformOpenGLContext *QMirServerPrivate::createPlatformOpenGLContext(QOpenGLContext *context) const
 {
-    return m_openGLContextFactory.createPlatformOpenGLContext(context->format(), *m_mirServerHooks.theMirDisplay());
+    QSurfaceFormat            format     = context->format();
+    mir::graphics::Display  * mirDisplay = m_mirServerHooks.the_mir_display().get();
+    mir::graphics::GLConfig * gl_config  = m_openGLContext.the_open_gl_config().get();
+    
+    if (!gl_config)
+        throw std::logic_error("No gl config available. Server not running?");
+    
+    return new MirOpenGLContext(*mirDisplay, *gl_config, format);
 }
 
-std::shared_ptr<qtmir::PromptSessionManager> QMirServerPrivate::promptSessionManager() const
+std::shared_ptr<miroil::PromptSessionManager> QMirServerPrivate::promptSessionManager() const
 {
-    return std::make_shared<qtmir::PromptSessionManager>(m_mirServerHooks.thePromptSessionManager());
+    return std::make_shared<miroil::PromptSessionManager>(m_mirServerHooks.the_prompt_session_manager());
 }
 
 std::shared_ptr<qtmir::SessionAuthorizer> QMirServerPrivate::theApplicationAuthorizer() const
@@ -128,21 +141,31 @@ std::shared_ptr<qtmir::SessionAuthorizer> QMirServerPrivate::theApplicationAutho
 }
 
 QMirServerPrivate::QMirServerPrivate()
-    : m_displayConfigurationPolicy(buildDisplayConfigurationPolicy)
+    : m_displayConfigurationPolicy{[](auto) { return std::make_shared<qtmir::DisplayConfigurationPolicy>(); }}
     , m_windowManagementPolicy(buildWindowManagementPolicy)
     , m_displayConfigurationStorage(buildDisplayConfigurationStorage)
     , m_wrappedSessionAuthorizer(buildSessionAuthorizer)
+    , m_openGLContext(new MirGLConfig())
     , runner(qtmirArgc, qtmirArgv)
 {
 }
 
-PromptSessionListener *QMirServerPrivate::promptSessionListener() const
+qtmir::PromptSessionListener *QMirServerPrivate::promptSessionListener() const
 {
-    return m_mirServerHooks.promptSessionListener();
+    return dynamic_cast<qtmir::PromptSessionListener*>(m_mirServerHooks.the_prompt_session_listener());
 }
 
 void QMirServerPrivate::run(const std::function<void()> &startCallback)
 {
+    m_mirServerHooks.create_prompt_session_listener(std::dynamic_pointer_cast<miroil::PromptSessionListener>(std::make_shared<qtmir::PromptSessionListener>()));
+    m_mirServerHooks.create_named_cursor([](std::string const & name)
+        {
+            // We are not responsible for loading cursors. This is left for shell to do as it's drawing its own QML cursor.
+            // So here we work around Mir API by storing just the cursor name in the CursorImage.
+            return std::make_shared<qtmir::NamedCursor>(name.c_str());
+        }
+    );
+    
 
     miral::AddInitCallback addInitCallback{[&, this]
     {
@@ -156,6 +179,11 @@ void QMirServerPrivate::run(const std::function<void()> &startCallback)
         QCoreApplication::quit();
     }};
 
+    miral::WaylandExtensions waylandExtensions{};
+    waylandExtensions.add_extension(qtmir::qtWindowmanagerExtension());
+    waylandExtensions.add_extension(qtmir::qtXdgDecorationManagerV1Extension());
+    waylandExtensions.add_extension(qtmir::qtKwinServerDecorationManagerExtension(m_windowModelNotifier));
+
     runner.set_exception_handler([this]
     {
         try {
@@ -168,8 +196,9 @@ void QMirServerPrivate::run(const std::function<void()> &startCallback)
 
     runner.add_start_callback([&]
     {
-        screensController = m_mirServerHooks.createScreensController(screensModel);
-        m_mirServerHooks.createInputDeviceObserver();
+        screensController = QSharedPointer<ScreensController>(new ScreensController(screensModel, m_mirServerHooks.the_mir_display(), m_mirServerHooks.the_display_configuration_controller()));
+        std::shared_ptr<miroil::InputDeviceObserver> ptr = std::make_shared<qtmir::MirInputDeviceObserver>();
+        m_mirServerHooks.create_input_device_observer(ptr);
         if (auto const x11_display = runner.x11_display())
         {
             setenv("DISPLAY", x11_display.value().c_str(), 1);
@@ -186,12 +215,22 @@ void QMirServerPrivate::run(const std::function<void()> &startCallback)
 
     auto displayStorageBuilder = m_displayConfigurationStorage.builder();
 
+    miral::Keymap config_keymap;
+
     runner.run_with(
         {
             miral::X11Support{},
             m_wrappedSessionAuthorizer,
-            m_openGLContextFactory,
+            m_openGLContext,
             m_mirServerHooks,
+        waylandExtensions
+            .enable(miral::WaylandExtensions::zwlr_layer_shell_v1)
+            .enable(miral::WaylandExtensions::zwlr_foreign_toplevel_manager_v1)
+            .enable(miral::WaylandExtensions::zxdg_output_manager_v1)
+            .enable(miral::WaylandExtensions::zwp_virtual_keyboard_manager_v1)
+            .enable(miral::WaylandExtensions::zwlr_virtual_pointer_manager_v1)
+            .enable(miral::WaylandExtensions::zwp_input_method_manager_v2)
+            .enable(miral::WaylandExtensions::zwlr_screencopy_manager_v1),
             miral::set_window_management_policy<WrappedWindowManagementPolicy>(m_windowModelNotifier,
                                                                                m_windowController,
                                                                                m_workspaceController,
@@ -200,10 +239,30 @@ void QMirServerPrivate::run(const std::function<void()> &startCallback)
                                                                                eventFeeder,
                                                                                m_windowManagementPolicy),
             addInitCallback,
-            qtmir::SetQtCompositor{screensModel},
+            miroil::SetCompositor(
+                // Create the the QtCompositor 
+                    [this]()
+                    -> std::shared_ptr<miroil::Compositor>
+                {
+                    std::shared_ptr<miroil::Compositor> result = std::make_shared<QtCompositor>();
+                    return result;
+                }
+                ,
+                // Initialization called by mir when the new compositor is setup up              
+                    [this](const std::shared_ptr<mir::graphics::Display>& display,
+                           const std::shared_ptr<miroil::Compositor> & compositor,
+                           const std::shared_ptr<mir::compositor::DisplayListener>& displayListener)
+                {
+                    
+                    std::shared_ptr<QtCompositor> qtCompsitor = std::dynamic_pointer_cast<QtCompositor>(compositor);
+                    
+                    this->screensModel->init(display, qtCompsitor, std::make_shared<miroil::DisplayListenerWrapper>(displayListener));
+                }
+            ),
             setTerminator,
-            miral::PersistDisplayConfig{displayStorageBuilder(),
-                                        m_displayConfigurationPolicy}
+            config_keymap,
+            miroil::PersistDisplayConfig{displayStorageBuilder(),
+                                        m_displayConfigurationPolicy},
         });
 }
 
diff --git a/src/platforms/mirserver/qmirserver_p.h b/src/platforms/mirserver/qmirserver_p.h
index f5129fa2..d5f14277 100644
--- a/src/platforms/mirserver/qmirserver_p.h
+++ b/src/platforms/mirserver/qmirserver_p.h
@@ -27,12 +27,11 @@
 
 // local
 #include "appnotifier.h"
-#include "openglcontextfactory.h"
 #include "screensmodel.h"
 #include "windowcontroller.h"
 #include "windowmodelnotifier.h"
 #include "workspacecontroller.h"
-#include "mirserverhooks.h"
+#include "screenscontroller.h"
 #include "wrappedsessionauthorizer.h"
 #include "qteventfeeder.h"
 #include "qtmir/displayconfigurationpolicy.h"
@@ -43,14 +42,21 @@
 #include <miral/runner.h>
 #include <QDebug>
 
+// miroil
+#include <miroil/compositor.h>
+#include <miroil/mir_server_hooks.h>
+#include <miroil/prompt_session_manager.h>
+#include <miroil/open_gl_context.h>
+
 class MirServerThread;
 class QOpenGLContext;
 class QMirServer;
+class QPlatformOpenGLContext;
 
 namespace qtmir
 {
 class SessionAuthorizer;
-class PromptSessionManager;
+class PromptSessionListener;
 }
 
 class QMirServerPrivate
@@ -67,8 +73,8 @@ public:
     void run(const std::function<void()> &startCallback);
     void stop();
 
-    PromptSessionListener *promptSessionListener() const;
-    std::shared_ptr<qtmir::PromptSessionManager> promptSessionManager() const;
+    qtmir::PromptSessionListener *promptSessionListener() const;
+    std::shared_ptr<miroil::PromptSessionManager> promptSessionManager() const;
 
     std::shared_ptr<qtmir::SessionAuthorizer> theApplicationAuthorizer() const;
 
@@ -89,8 +95,8 @@ public:
     qtmir::BasicSetDisplayConfigurationStorage m_displayConfigurationStorage;
     miral::SetApplicationAuthorizer<WrappedSessionAuthorizer> m_wrappedSessionAuthorizer;
 private:
-    qtmir::OpenGLContextFactory m_openGLContextFactory;
-    qtmir::MirServerHooks       m_mirServerHooks;
+    miroil::OpenGLContext       m_openGLContext;
+    miroil::MirServerHooks      m_mirServerHooks;
 
     miral::MirRunner runner;
 
diff --git a/src/platforms/mirserver/qtcompositor.cpp b/src/platforms/mirserver/qtcompositor.cpp
index 7251b13a..8b25354a 100644
--- a/src/platforms/mirserver/qtcompositor.cpp
+++ b/src/platforms/mirserver/qtcompositor.cpp
@@ -15,4 +15,20 @@
  */
 
 #include "qtcompositor.h"
+#include "logging.h"
+
+void QtCompositor::start()
+{
+    qCDebug(QTMIR_SCREENS) << "QtCompositor::start";
+
+    Q_EMIT starting(); // blocks
+}
+
+void QtCompositor::stop()
+{
+    qCDebug(QTMIR_SCREENS) << "QtCompositor::stop";
+
+    Q_EMIT stopping(); // blocks
+}
+
 
diff --git a/src/platforms/mirserver/qtcompositor.h b/src/platforms/mirserver/qtcompositor.h
index 09f09610..f70f85f6 100644
--- a/src/platforms/mirserver/qtcompositor.h
+++ b/src/platforms/mirserver/qtcompositor.h
@@ -16,6 +16,7 @@
 
 #ifndef QTCOMPOSITOR_H
 #define QTCOMPOSITOR_H
+#include <miroil/compositor.h>
 
 // std lib
 #include <memory>
@@ -29,13 +30,17 @@ namespace mir {
     }
 }
 
-class QtCompositor : public QObject
+class QtCompositor : public QObject, public miroil::Compositor
 {
     Q_OBJECT
 public:
     QtCompositor() = default;
     virtual ~QtCompositor() noexcept = default;
 
+    // Callbacks coming from mir    
+    void start();
+    void stop();
+
 Q_SIGNALS:
     void starting();
     void stopping();
diff --git a/src/platforms/mirserver/qteventfeeder.h b/src/platforms/mirserver/qteventfeeder.h
index fa033fcc..5211bbbb 100644
--- a/src/platforms/mirserver/qteventfeeder.h
+++ b/src/platforms/mirserver/qteventfeeder.h
@@ -17,7 +17,13 @@
 #ifndef MIR_QT_EVENT_FEEDER_H
 #define MIR_QT_EVENT_FEEDER_H
 
+#include <mir/version.h>
+#if MIR_SERVER_VERSION >= MIR_VERSION_NUMBER(2, 0, 0)
+#include <miral/toolkit_event.h>
+using namespace miral::toolkit;
+#else
 #include <mir_toolkit/event.h>
+#endif
 
 #include <QObject>
 #include <qpa/qwindowsysteminterface.h>
diff --git a/src/platforms/mirserver/qtwindowmanager.cpp b/src/platforms/mirserver/qtwindowmanager.cpp
new file mode 100644
index 00000000..240792b2
--- /dev/null
+++ b/src/platforms/mirserver/qtwindowmanager.cpp
@@ -0,0 +1,80 @@
+/*
+ * Copyright (C) 2020 UBports Foundation
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <memory>
+
+#include "qtwindowmanager.h"
+#include "urlbuilderdispatcher.h"
+#include "services.h"
+
+#include <wayland-generated/qt-windowmanager_wrapper.h>
+
+#include <QDebug>
+
+using namespace mir::wayland;
+using namespace miral;
+
+namespace
+{
+class QtWindowManager : public Windowmanager
+{
+public:
+    using Windowmanager::Windowmanager;
+
+    QtWindowManager(struct wl_resource*);
+
+    void open_url(uint32_t remaining, std::string const& url) override {
+        mBuilder->urlInput(remaining, url);
+    }
+private:
+    qtmir::URLBuilderDispatcher* mBuilder;
+};
+
+QtWindowManager::QtWindowManager(
+    struct wl_resource* resource) :
+    Windowmanager{resource, Version<1>{}},
+    mBuilder{new qtmir::URLBuilderDispatcher{std::make_shared<Services>()}}
+{
+}
+
+class MyGlobal : public QtWindowManager::Global
+{
+public:
+    explicit MyGlobal(wl_display* display);
+    
+    void bind(wl_resource* new_windowmanager) override;
+};
+
+}
+
+MyGlobal::MyGlobal(wl_display* display) :
+    Global(display, Version<1>{})
+{
+}
+
+void MyGlobal::bind(wl_resource* new_windowmanager)
+{
+    new QtWindowManager{new_windowmanager};
+}
+
+auto qtmir::qtWindowmanagerExtension() -> WaylandExtensions::Builder {
+    return {
+        Windowmanager::interface_name,
+        [](WaylandExtensions::Context const* context) {
+            return std::make_shared<MyGlobal>(context->display());
+        }
+    };
+}
diff --git a/src/platforms/mirserver/mircursorimages.cpp b/src/platforms/mirserver/qtwindowmanager.h
similarity index 55%
rename from src/platforms/mirserver/mircursorimages.cpp
rename to src/platforms/mirserver/qtwindowmanager.h
index b07bbe1a..30b5cb5a 100644
--- a/src/platforms/mirserver/mircursorimages.cpp
+++ b/src/platforms/mirserver/qtwindowmanager.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2015 Canonical, Ltd.
+ * Copyright (C) 2020 UBports Foundation
  *
  * This program is free software: you can redistribute it and/or modify it under
  * the terms of the GNU Lesser General Public License version 3, as published by
@@ -14,15 +14,18 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-#include "mircursorimages.h"
-#include "namedcursor.h"
+#pragma once
 
-using namespace qtmir;
+// Provides the qt-windowmanager Wayland extension, which provides support for
+// URL handling. We use url-dispatcher for the purpose.
 
-std::shared_ptr<mir::graphics::CursorImage> MirCursorImages::image(const std::string &cursor_name,
-        const mir::geometry::Size &)
+#include "services.h"
+
+#include <miral/wayland_extensions.h>
+
+namespace qtmir
 {
-    // We are not responsible for loading cursors. This is left for shell to do as it's drawing its own QML cursor.
-    // So here we work around Mir API by storing just the cursor name in the CursorImage.
-    return std::make_shared<NamedCursor>(cursor_name.c_str());
+// The casing is deliberate, given 'Windowmanager' is all one word according to
+// the Wayland spec
+auto qtWindowmanagerExtension() -> miral::WaylandExtensions::Builder;
 }
diff --git a/src/platforms/mirserver/screenadaptor.cpp b/src/platforms/mirserver/screenadaptor.cpp
index 0bdc6ad2..1a274617 100644
--- a/src/platforms/mirserver/screenadaptor.cpp
+++ b/src/platforms/mirserver/screenadaptor.cpp
@@ -60,7 +60,7 @@ ScreenAdaptor::~ScreenAdaptor()
     m_modes.clear();
 }
 
-miral::DisplayId ScreenAdaptor::displayId() const
+miroil::DisplayId ScreenAdaptor::displayId() const
 {
     auto platformScreen = static_cast<PlatformScreen*>(m_screen->handle());
     return platformScreen->displayId();
diff --git a/src/platforms/mirserver/screenadaptor.h b/src/platforms/mirserver/screenadaptor.h
index d801b712..a3711eba 100644
--- a/src/platforms/mirserver/screenadaptor.h
+++ b/src/platforms/mirserver/screenadaptor.h
@@ -34,7 +34,7 @@ public:
     ScreenAdaptor(QScreen* screen, QObject* parent = 0);
     ~ScreenAdaptor();
 
-    miral::DisplayId displayId() const override;
+    miroil::DisplayId displayId() const override;
     bool used() const override;
     QString name() const override;
     float scale() const override;
diff --git a/src/platforms/mirserver/screenscontroller.cpp b/src/platforms/mirserver/screenscontroller.cpp
index 318cf61b..8a7d07b5 100644
--- a/src/platforms/mirserver/screenscontroller.cpp
+++ b/src/platforms/mirserver/screenscontroller.cpp
@@ -21,7 +21,6 @@
 // Mir
 #include <mir/graphics/display.h>
 #include <mir/graphics/display_configuration.h>
-#include <mir/shell/display_configuration_controller.h>
 #include <mir/geometry/point.h>
 
 namespace mg = mir::graphics;
@@ -33,7 +32,7 @@ ScreensController::ScreensController(const std::shared_ptr<ScreensModel> &model,
     : QObject(parent)
     , m_screensModel(model)
     , m_display(display)
-    , m_displayConfigurationController(controller)
+    , m_displayConfigurationController(std::make_shared<miroil::DisplayConfigurationControllerWrapper>(controller))
 {
 }
 
@@ -88,7 +87,7 @@ bool ScreensController::setConfiguration(const qtmir::ScreenConfigurationList &n
     return true;
 }
 
-qtmir::ScreenConfiguration ScreensController::outputConfiguration(miral::OutputId outputId)
+qtmir::ScreenConfiguration ScreensController::outputConfiguration(miroil::OutputId outputId)
 {
     auto displayConfiguration = m_display->configuration();
     qtmir::ScreenConfiguration config;
diff --git a/src/platforms/mirserver/screenscontroller.h b/src/platforms/mirserver/screenscontroller.h
index b363830c..db345aaf 100644
--- a/src/platforms/mirserver/screenscontroller.h
+++ b/src/platforms/mirserver/screenscontroller.h
@@ -26,6 +26,7 @@
 #include "qtmir/screen.h"
 
 #include <memory>
+#include <miroil/display_configuration_controller_wrapper.h>
 
 class ScreensModel;
 
@@ -48,13 +49,13 @@ public:
     qtmir::ScreenConfigurationList configuration();
     bool setConfiguration(const qtmir::ScreenConfigurationList &newConfig);
 
-    qtmir::ScreenConfiguration outputConfiguration(miral::OutputId outputId);
+    qtmir::ScreenConfiguration outputConfiguration(miroil::OutputId outputId);
     bool setOutputConfiguration(const qtmir::ScreenConfiguration &newConfig);
 
 private:
     const std::shared_ptr<ScreensModel> m_screensModel;
     const std::shared_ptr<mir::graphics::Display> m_display;
-    const std::shared_ptr<mir::shell::DisplayConfigurationController> m_displayConfigurationController;
+    const std::shared_ptr<miroil::DisplayConfigurationControllerWrapper> m_displayConfigurationController;
 };
 
 #endif // SCREENSCONTROLLER_H
diff --git a/src/platforms/mirserver/screensmodel.cpp b/src/platforms/mirserver/screensmodel.cpp
index b03d6b9d..91c420d5 100644
--- a/src/platforms/mirserver/screensmodel.cpp
+++ b/src/platforms/mirserver/screensmodel.cpp
@@ -27,7 +27,7 @@
 #include <mir/graphics/display.h>
 #include <mir/graphics/display_buffer.h>
 #include <mir/graphics/display_configuration.h>
-#include <mir/compositor/display_listener.h>
+#include <miroil/display_listener_wrapper.h>
 
 // Qt
 #include <QScreen>
@@ -43,8 +43,8 @@ namespace mg = mir::graphics;
 #define DEBUG_MSG qCDebug(QTMIR_SCREENS).nospace() << "ScreensModel[" << this <<"]::" << __func__
 
 ScreensModel::ScreensModel(QObject *parent)
-    : MirDisplayConfigurationObserver(parent)
-    , m_compositing(false)
+    : //MirDisplayConfigurationObserver(parent)
+    m_compositing(false)
     , m_orientationSensor(std::make_shared<OrientationSensor>(this))
 {
     DEBUG_MSG << "()";
@@ -54,7 +54,7 @@ ScreensModel::ScreensModel(QObject *parent)
 void ScreensModel::init(
     const std::shared_ptr<mir::graphics::Display>& display,
     const std::shared_ptr<QtCompositor>& compositor,
-    const std::shared_ptr<mir::compositor::DisplayListener>& displayListener)
+    const std::shared_ptr<miroil::DisplayListenerWrapper>& displayListener)
 {
     m_display = display;
     m_compositor = compositor;
@@ -69,8 +69,8 @@ void ScreensModel::init(
     connect(qtCompositor, &QtCompositor::stopping,
             this, &ScreensModel::onCompositorStopping, Qt::BlockingQueuedConnection);
 
-    connect(this, &MirDisplayConfigurationObserver::configurationApplied,
-            this, &ScreensModel::update, Qt::BlockingQueuedConnection);
+    //connect(this, &MirDisplayConfigurationObserver::configurationApplied,
+    //        this, &ScreensModel::update, Qt::BlockingQueuedConnection);
 }
 
 // terminate before shutting down the Mir server, or else liable to deadlock with the blocking connection above
diff --git a/src/platforms/mirserver/screensmodel.h b/src/platforms/mirserver/screensmodel.h
index 6f85be7c..439db39a 100644
--- a/src/platforms/mirserver/screensmodel.h
+++ b/src/platforms/mirserver/screensmodel.h
@@ -17,20 +17,19 @@
 #ifndef SCREENCONFIGURATIONOBSERVER_H
 #define SCREENCONFIGURATIONOBSERVER_H
 
-#include "mirdisplayconfigurationobserver.h"
+//#include "mirdisplayconfigurationobserver.h"
 
 #include <QObject>
 #include <QPoint>
 
 // Mir
 #include "mir/int_wrapper.h"
+#include <miroil/display_listener_wrapper.h>
 
 // std
 #include <memory>
 
 namespace mir {
-    namespace compositor { class DisplayListener; }
-
     namespace graphics {
         namespace detail { struct GraphicsConfCardIdTag; struct GraphicsConfOutputIdTag; }
     typedef IntWrapper <detail::GraphicsConfCardIdTag> DisplayConfigurationCardId;
@@ -62,7 +61,8 @@ class OrientationSensor;
  * All other methods must be called on the Qt GUI thread.
  */
 
-class ScreensModel : public MirDisplayConfigurationObserver
+class ScreensModel : public QObject
+//class ScreensModel : public MirDisplayConfigurationObserver
 {
     Q_OBJECT
 public:
@@ -83,7 +83,7 @@ public:
     void init(
         const std::shared_ptr<mir::graphics::Display>& display,
         const std::shared_ptr<QtCompositor>& compositor,
-        const std::shared_ptr<mir::compositor::DisplayListener>& displayListener);
+        const std::shared_ptr<miroil::DisplayListenerWrapper> & displayListener);
     void terminate();
 
     // override for testing purposes
@@ -102,7 +102,7 @@ private:
 
     std::weak_ptr<mir::graphics::Display> m_display;
     std::shared_ptr<QtCompositor> m_compositor;
-    std::shared_ptr<mir::compositor::DisplayListener> m_displayListener;
+    std::shared_ptr<miroil::DisplayListenerWrapper> m_displayListener;
     QList<PlatformScreen*> m_screenList;
     bool m_compositing;
     std::shared_ptr<OrientationSensor> m_orientationSensor;
diff --git a/src/platforms/mirserver/setqtcompositor.cpp b/src/platforms/mirserver/setqtcompositor.cpp
deleted file mode 100644
index 1d747fe3..00000000
--- a/src/platforms/mirserver/setqtcompositor.cpp
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Copyright © 2016 Canonical Ltd.
- *
- * This program is free software: you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- *
- * Authored by: Alan Griffiths <alan@octopull.co.uk>
- */
-
-#include "setqtcompositor.h"
-
-// local
-#include "qtcompositor.h"
-#include "screensmodel.h"
-#include "logging.h"
-
-// mir
-#include <mir/compositor/compositor.h>
-#include <mir/server.h>
-#include <mir/shell/shell.h>
-#include <mir/observer_registrar.h>
-
-namespace
-{
-struct QtCompositorImpl : QtCompositor, mir::compositor::Compositor
-{
-    void start();
-    void stop();
-};
-
-void QtCompositorImpl::start()
-{
-    qCDebug(QTMIR_SCREENS) << "QtCompositor::start";
-
-    Q_EMIT starting(); // blocks
-}
-
-void QtCompositorImpl::stop()
-{
-    qCDebug(QTMIR_SCREENS) << "QtCompositor::stop";
-
-    Q_EMIT stopping(); // blocks
-}
-}
-
-
-qtmir::SetQtCompositor::SetQtCompositor(std::shared_ptr<ScreensModel> const& screensModel) :
-    m_screensModel{screensModel}
-{
-}
-
-void qtmir::SetQtCompositor::operator()(mir::Server& server)
-{
-    server.override_the_compositor([this]
-    {
-        auto result = std::make_shared<QtCompositorImpl>();
-        m_compositor = result;
-        return result;
-    });
-
-    server.add_init_callback([&, this]
-        {
-            if (auto const compositor = m_compositor.lock())
-            {
-                server.the_display_configuration_observer_registrar()->register_interest(m_screensModel);
-                m_screensModel->init(server.the_display(), compositor, server.the_shell());
-            }
-            else
-            {
-                throw std::logic_error("No m_compositor available. Server not running?");
-            }
-        });
-}
-
diff --git a/src/platforms/mirserver/setqtcompositor.h b/src/platforms/mirserver/setqtcompositor.h
deleted file mode 100644
index 4c5fcdc1..00000000
--- a/src/platforms/mirserver/setqtcompositor.h
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * Copyright © 2016 Canonical Ltd.
- *
- * This program is free software: you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 3,
- * as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- *
- * Authored by: Alan Griffiths <alan@octopull.co.uk>
- */
-
-#ifndef QTMIR_SET_QT_COMPOSITOR_H
-#define QTMIR_SET_QT_COMPOSITOR_H
-
-#include <QSharedPointer>
-
-#include <memory>
-
-namespace mir { class Server; }
-
-class QtCompositor;
-class ScreensModel;
-
-namespace qtmir
-{
-// Configure the server for using the Qt compositor
-class SetQtCompositor
-{
-public:
-    explicit SetQtCompositor(std::shared_ptr<ScreensModel> const& screensModel);
-
-    void operator()(mir::Server& server);
-
-private:
-    std::shared_ptr<ScreensModel> const m_screensModel;
-    std::weak_ptr<QtCompositor> m_compositor;
-};
-}
-
-#endif //QTMIR_SET_QT_COMPOSITOR_H
diff --git a/src/platforms/mirserver/surfaceobserver.cpp b/src/platforms/mirserver/surfaceobserver.cpp
index 4e3da84e..41351354 100644
--- a/src/platforms/mirserver/surfaceobserver.cpp
+++ b/src/platforms/mirserver/surfaceobserver.cpp
@@ -84,7 +84,12 @@ void SurfaceObserver::notifySurfaceModifications(const miral::WindowSpecificatio
         Q_EMIT inputBoundsChanged(qRect);
     }
     if (modifications.confine_pointer().is_set()) {
+#if MIR_SERVER_MAJOR_VERSION < 2
         Q_EMIT confinesMousePointerChanged(modifications.confine_pointer().value() == mir_pointer_confined_to_window);
+#else
+        Q_EMIT confinesMousePointerChanged((modifications.confine_pointer().value() == mir_pointer_confined_oneshot) ||
+                                           (modifications.confine_pointer().value() == mir_pointer_confined_persistent));
+#endif
     }
     if (modifications.name().is_set()) {
         Q_EMIT nameChanged(QString::fromStdString(modifications.name().value()));
diff --git a/src/platforms/mirserver/urlbuilderdispatcher.cpp b/src/platforms/mirserver/urlbuilderdispatcher.cpp
new file mode 100644
index 00000000..f246faf4
--- /dev/null
+++ b/src/platforms/mirserver/urlbuilderdispatcher.cpp
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 2020 UBports Foundation
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "urlbuilderdispatcher.h"
+#include "logging.h"
+
+#include <QDebug>
+#include <QUrl>
+
+#define DEBUG_MSG qCDebug(QTMIR_URLBUILDER).nospace().noquote() << __func__
+
+namespace qtmir
+{
+URLBuilderDispatcher::URLBuilderDispatcher(std::shared_ptr<QPlatformServices> const services)
+    : mLastRemaining{0},
+      mCurrentUrl{},
+      mServices(services)
+{}
+
+void URLBuilderDispatcher::urlInput(uint32_t remaining, std::string const &url) {
+
+    QByteArray bytes = QByteArray::fromStdString(url);
+    DEBUG_MSG << "(" << remaining << ", \"" << bytes << "\")";
+
+    if (remaining > mLastRemaining) {
+        mCurrentUrl = "";
+    } 
+    
+    if (remaining == 0) {
+        mLastRemaining = 0;
+        mCurrentUrl.append(bytes);
+        QUrl myUrl = QUrl::fromEncoded(mCurrentUrl);
+        mServices->openUrl(myUrl);
+        mCurrentUrl = QByteArray();
+        return;
+    } else {
+        mCurrentUrl.append(bytes);
+        mLastRemaining = remaining;
+        return;
+    }
+}
+}
+
diff --git a/src/platforms/mirserver/urlbuilderdispatcher.h b/src/platforms/mirserver/urlbuilderdispatcher.h
new file mode 100644
index 00000000..12d24c16
--- /dev/null
+++ b/src/platforms/mirserver/urlbuilderdispatcher.h
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2020 UBports Foundation
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#pragma once
+
+#include <stdint.h>
+#include <memory>
+
+#include <QByteArray>
+#include <qpa/qplatformservices.h>
+#include <QLoggingCategory>
+
+#include "services.h"
+
+// The QtWayland url_open IPC call will split all URLs into 128-byte chunks then
+// call the event via Wayland IPC. This object un-splits the URL and sends it
+// to URL-Dispatcher once it receives the last chunk (denoted by 'remaining'
+// reaching zero).
+
+namespace qtmir
+{
+
+class URLBuilderDispatcher {
+public:
+    URLBuilderDispatcher(std::shared_ptr<QPlatformServices> const);
+
+    void urlInput(uint32_t, std::string const&);
+
+private:
+    uint32_t mLastRemaining;
+    QByteArray mCurrentUrl;
+    std::shared_ptr<QPlatformServices> mServices;
+};
+}
diff --git a/src/platforms/mirserver/wayland-generated/CMakeLists.txt b/src/platforms/mirserver/wayland-generated/CMakeLists.txt
new file mode 100644
index 00000000..b535a429
--- /dev/null
+++ b/src/platforms/mirserver/wayland-generated/CMakeLists.txt
@@ -0,0 +1,24 @@
+function(add_wayland_protocol PREFIX PROTOCOL)
+    set(PROTOCOL_FILE "${CMAKE_CURRENT_SOURCE_DIR}/../wayland-protocols/${PROTOCOL}.xml")
+
+    set(GENERATE_FILE "${CMAKE_CURRENT_SOURCE_DIR}/${PROTOCOL}_wrapper")
+
+    add_custom_command(
+        OUTPUT ${GENERATE_FILE}.cpp
+        OUTPUT ${GENERATE_FILE}.h
+        DEPENDS ${PROTOCOL_FILE}
+        COMMAND "sh" "-c" "/usr/bin/mir_wayland_generator ${PREFIX} ${PROTOCOL_FILE} header >${GENERATE_FILE}.h"
+        COMMAND "sh" "-c" "/usr/bin/mir_wayland_generator ${PREFIX} ${PROTOCOL_FILE} source >${GENERATE_FILE}.cpp"
+    )
+
+    set(GENERATED_FILES ${GENERATED_FILES} "${GENERATE_FILE}.h" "${GENERATE_FILE}.cpp" PARENT_SCOPE)
+endfunction()
+
+add_wayland_protocol("qt_" "qt-windowmanager")
+add_wayland_protocol("z" "xdg-decoration-unstable-v1")
+add_wayland_protocol("org_kde_" "server-decoration")
+
+add_custom_target(refresh-wayland-wrapper
+    DEPENDS ${GENERATED_FILES}
+    SOURCES ${GENERATED_FILES}
+)
diff --git a/src/platforms/mirserver/wayland-generated/qt-windowmanager_wrapper.cpp b/src/platforms/mirserver/wayland-generated/qt-windowmanager_wrapper.cpp
new file mode 100644
index 00000000..b706cd5f
--- /dev/null
+++ b/src/platforms/mirserver/wayland-generated/qt-windowmanager_wrapper.cpp
@@ -0,0 +1,177 @@
+/*
+ * AUTOGENERATED - DO NOT EDIT
+ *
+ * This file is generated from qt-windowmanager.xml by mir_wayland_generator
+ */
+
+#include "qt-windowmanager_wrapper.h"
+
+#include <boost/exception/diagnostic_information.hpp>
+#include <wayland-server-core.h>
+
+#include "mir/log.h"
+#include "mir/wayland/protocol_error.h"
+
+namespace mir
+{
+namespace wayland
+{
+extern struct wl_interface const qt_windowmanager_interface_data;
+}
+}
+
+namespace mw = mir::wayland;
+
+namespace
+{
+struct wl_interface const* all_null_types [] {
+    nullptr,
+    nullptr,
+    nullptr,
+    nullptr,
+    nullptr,
+    nullptr};
+}
+
+// Windowmanager
+
+struct mw::Windowmanager::Thunks
+{
+    static int const supported_version;
+
+    static void open_url_thunk(struct wl_client* client, struct wl_resource* resource, uint32_t remaining, char const* url)
+    {
+        try
+        {
+            auto me = static_cast<Windowmanager*>(wl_resource_get_user_data(resource));
+            me->open_url(remaining, url);
+        }
+        catch(ProtocolError const& err)
+        {
+            wl_resource_post_error(err.resource(), err.code(), "%s", err.message());
+        }
+        catch(...)
+        {
+            internal_error_processing_request(client, "Windowmanager::open_url()");
+        }
+    }
+
+    static void resource_destroyed_thunk(wl_resource* resource)
+    {
+        delete static_cast<Windowmanager*>(wl_resource_get_user_data(resource));
+    }
+
+    static void bind_thunk(struct wl_client* client, void* data, uint32_t version, uint32_t id)
+    {
+        auto me = static_cast<Windowmanager::Global*>(data);
+        auto resource = wl_resource_create(
+            client,
+            &qt_windowmanager_interface_data,
+            std::min((int)version, Thunks::supported_version),
+            id);
+        if (resource == nullptr)
+        {
+            wl_client_post_no_memory(client);
+            BOOST_THROW_EXCEPTION((std::bad_alloc{}));
+        }
+        try
+        {
+            me->bind(resource);
+        }
+        catch(...)
+        {
+            internal_error_processing_request(client, "Windowmanager global bind");
+        }
+    }
+
+    static struct wl_message const request_messages[];
+    static struct wl_message const event_messages[];
+    static void const* request_vtable[];
+};
+
+int const mw::Windowmanager::Thunks::supported_version = 1;
+
+mw::Windowmanager::Windowmanager(struct wl_resource* resource, Version<1>)
+    : Resource{resource}
+{
+    wl_resource_set_implementation(resource, Thunks::request_vtable, this, &Thunks::resource_destroyed_thunk);
+}
+
+mw::Windowmanager::~Windowmanager()
+{
+    wl_resource_set_implementation(resource, nullptr, nullptr, nullptr);
+}
+
+void mw::Windowmanager::send_hints_event(int32_t show_is_fullscreen) const
+{
+    wl_resource_post_event(resource, Opcode::hints, show_is_fullscreen);
+}
+
+void mw::Windowmanager::send_quit_event() const
+{
+    wl_resource_post_event(resource, Opcode::quit);
+}
+
+bool mw::Windowmanager::is_instance(wl_resource* resource)
+{
+    return wl_resource_instance_of(resource, &qt_windowmanager_interface_data, Thunks::request_vtable);
+}
+
+void mw::Windowmanager::destroy_and_delete() const
+{
+    // Will result in this object being deleted
+    wl_resource_destroy(resource);
+}
+
+mw::Windowmanager::Global::Global(wl_display* display, Version<1>)
+    : wayland::Global{
+          wl_global_create(
+              display,
+              &qt_windowmanager_interface_data,
+              Thunks::supported_version,
+              this,
+              &Thunks::bind_thunk)}
+{
+}
+
+auto mw::Windowmanager::Global::interface_name() const -> char const*
+{
+    return Windowmanager::interface_name;
+}
+
+struct wl_message const mw::Windowmanager::Thunks::request_messages[] {
+    {"open_url", "us", all_null_types}};
+
+struct wl_message const mw::Windowmanager::Thunks::event_messages[] {
+    {"hints", "i", all_null_types},
+    {"quit", "", all_null_types}};
+
+void const* mw::Windowmanager::Thunks::request_vtable[] {
+    (void*)Thunks::open_url_thunk};
+
+mw::Windowmanager* mw::Windowmanager::from(struct wl_resource* resource)
+{
+    if (resource &&
+        wl_resource_instance_of(resource, &qt_windowmanager_interface_data, Windowmanager::Thunks::request_vtable))
+    {
+        return static_cast<Windowmanager*>(wl_resource_get_user_data(resource));
+    }
+    else
+    {
+        return nullptr;
+    }
+}
+
+namespace mir
+{
+namespace wayland
+{
+
+struct wl_interface const qt_windowmanager_interface_data {
+    mw::Windowmanager::interface_name,
+    mw::Windowmanager::Thunks::supported_version,
+    1, mw::Windowmanager::Thunks::request_messages,
+    2, mw::Windowmanager::Thunks::event_messages};
+
+}
+}
diff --git a/src/platforms/mirserver/wayland-generated/qt-windowmanager_wrapper.h b/src/platforms/mirserver/wayland-generated/qt-windowmanager_wrapper.h
new file mode 100644
index 00000000..00a7019a
--- /dev/null
+++ b/src/platforms/mirserver/wayland-generated/qt-windowmanager_wrapper.h
@@ -0,0 +1,69 @@
+/*
+ * AUTOGENERATED - DO NOT EDIT
+ *
+ * This file is generated from qt-windowmanager.xml by mir_wayland_generator
+ */
+
+#ifndef MIR_FRONTEND_WAYLAND_QT_WINDOWMANAGER_XML_WRAPPER
+#define MIR_FRONTEND_WAYLAND_QT_WINDOWMANAGER_XML_WRAPPER
+
+#include <optional>
+
+#include "mir/fd.h"
+#include <wayland-server-core.h>
+
+#include "mir/wayland/resource.h"
+#include "mir/wayland/global.h"
+
+namespace mir
+{
+namespace wayland
+{
+
+class Windowmanager;
+
+class Windowmanager : public Resource
+{
+public:
+    static char const constexpr* interface_name = "qt_windowmanager";
+
+    static Windowmanager* from(struct wl_resource*);
+
+    Windowmanager(struct wl_resource* resource, Version<1>);
+    virtual ~Windowmanager();
+
+    void send_hints_event(int32_t show_is_fullscreen) const;
+    void send_quit_event() const;
+
+    void destroy_and_delete() const;
+
+    struct Opcode
+    {
+        static uint32_t const hints = 0;
+        static uint32_t const quit = 1;
+    };
+
+    struct Thunks;
+
+    static bool is_instance(wl_resource* resource);
+
+    class Global : public wayland::Global
+    {
+    public:
+        Global(wl_display* display, Version<1>);
+
+        auto interface_name() const -> char const* override;
+
+    private:
+        virtual void bind(wl_resource* new_qt_windowmanager) = 0;
+        friend Windowmanager::Thunks;
+    };
+
+private:
+    virtual void open_url(uint32_t remaining, std::string const& url) = 0;
+};
+
+}
+}
+
+#endif // MIR_FRONTEND_WAYLAND_QT_WINDOWMANAGER_XML_WRAPPER
diff --git a/src/platforms/mirserver/wayland-generated/server-decoration_wrapper.cpp b/src/platforms/mirserver/wayland-generated/server-decoration_wrapper.cpp
new file mode 100644
index 00000000..18cf00f9
--- /dev/null
+++ b/src/platforms/mirserver/wayland-generated/server-decoration_wrapper.cpp
@@ -0,0 +1,295 @@
+/*
+ * AUTOGENERATED - DO NOT EDIT
+ *
+ * This file is generated from server-decoration.xml by mir_wayland_generator
+ */
+
+#include "server-decoration_wrapper.h"
+
+#include <boost/exception/diagnostic_information.hpp>
+#include <wayland-server-core.h>
+
+#include "mir/log.h"
+#include "mir/wayland/protocol_error.h"
+
+namespace mir
+{
+namespace wayland
+{
+extern struct wl_interface const org_kde_kwin_server_decoration_interface_data;
+extern struct wl_interface const org_kde_kwin_server_decoration_manager_interface_data;
+extern struct wl_interface const wl_surface_interface_data;
+}
+}
+
+namespace mw = mir::wayland;
+
+namespace
+{
+struct wl_interface const* all_null_types [] {
+    nullptr,
+    nullptr,
+    nullptr,
+    nullptr,
+    nullptr,
+    nullptr};
+}
+
+// KwinServerDecorationManager
+
+struct mw::KwinServerDecorationManager::Thunks
+{
+    static int const supported_version;
+
+    static void create_thunk(struct wl_client* client, struct wl_resource* resource, uint32_t id, struct wl_resource* surface)
+    {
+        wl_resource* id_resolved{
+            wl_resource_create(client, &org_kde_kwin_server_decoration_interface_data, wl_resource_get_version(resource), id)};
+        if (id_resolved == nullptr)
+        {
+            wl_client_post_no_memory(client);
+            BOOST_THROW_EXCEPTION((std::bad_alloc{}));
+        }
+        try
+        {
+            auto me = static_cast<KwinServerDecorationManager*>(wl_resource_get_user_data(resource));
+            me->create(id_resolved, surface);
+        }
+        catch(ProtocolError const& err)
+        {
+            wl_resource_post_error(err.resource(), err.code(), "%s", err.message());
+        }
+        catch(...)
+        {
+            internal_error_processing_request(client, "KwinServerDecorationManager::create()");
+        }
+    }
+
+    static void resource_destroyed_thunk(wl_resource* resource)
+    {
+        delete static_cast<KwinServerDecorationManager*>(wl_resource_get_user_data(resource));
+    }
+
+    static void bind_thunk(struct wl_client* client, void* data, uint32_t version, uint32_t id)
+    {
+        auto me = static_cast<KwinServerDecorationManager::Global*>(data);
+        auto resource = wl_resource_create(
+            client,
+            &org_kde_kwin_server_decoration_manager_interface_data,
+            std::min((int)version, Thunks::supported_version),
+            id);
+        if (resource == nullptr)
+        {
+            wl_client_post_no_memory(client);
+            BOOST_THROW_EXCEPTION((std::bad_alloc{}));
+        }
+        try
+        {
+            me->bind(resource);
+        }
+        catch(...)
+        {
+            internal_error_processing_request(client, "KwinServerDecorationManager global bind");
+        }
+    }
+
+    static struct wl_interface const* create_types[];
+    static struct wl_message const request_messages[];
+    static struct wl_message const event_messages[];
+    static void const* request_vtable[];
+};
+
+int const mw::KwinServerDecorationManager::Thunks::supported_version = 1;
+
+mw::KwinServerDecorationManager::KwinServerDecorationManager(struct wl_resource* resource, Version<1>)
+    : Resource{resource}
+{
+    wl_resource_set_implementation(resource, Thunks::request_vtable, this, &Thunks::resource_destroyed_thunk);
+}
+
+mw::KwinServerDecorationManager::~KwinServerDecorationManager()
+{
+    wl_resource_set_implementation(resource, nullptr, nullptr, nullptr);
+}
+
+void mw::KwinServerDecorationManager::send_default_mode_event(uint32_t mode) const
+{
+    wl_resource_post_event(resource, Opcode::default_mode, mode);
+}
+
+bool mw::KwinServerDecorationManager::is_instance(wl_resource* resource)
+{
+    return wl_resource_instance_of(resource, &org_kde_kwin_server_decoration_manager_interface_data, Thunks::request_vtable);
+}
+
+void mw::KwinServerDecorationManager::destroy_and_delete() const
+{
+    // Will result in this object being deleted
+    wl_resource_destroy(resource);
+}
+
+uint32_t const mw::KwinServerDecorationManager::Mode::None;
+uint32_t const mw::KwinServerDecorationManager::Mode::Client;
+uint32_t const mw::KwinServerDecorationManager::Mode::Server;
+
+mw::KwinServerDecorationManager::Global::Global(wl_display* display, Version<1>)
+    : wayland::Global{
+          wl_global_create(
+              display,
+              &org_kde_kwin_server_decoration_manager_interface_data,
+              Thunks::supported_version,
+              this,
+              &Thunks::bind_thunk)}
+{
+}
+
+auto mw::KwinServerDecorationManager::Global::interface_name() const -> char const*
+{
+    return KwinServerDecorationManager::interface_name;
+}
+
+struct wl_interface const* mw::KwinServerDecorationManager::Thunks::create_types[] {
+    &org_kde_kwin_server_decoration_interface_data,
+    &wl_surface_interface_data};
+
+struct wl_message const mw::KwinServerDecorationManager::Thunks::request_messages[] {
+    {"create", "no", create_types}};
+
+struct wl_message const mw::KwinServerDecorationManager::Thunks::event_messages[] {
+    {"default_mode", "u", all_null_types}};
+
+void const* mw::KwinServerDecorationManager::Thunks::request_vtable[] {
+    (void*)Thunks::create_thunk};
+
+mw::KwinServerDecorationManager* mw::KwinServerDecorationManager::from(struct wl_resource* resource)
+{
+    if (resource &&
+        wl_resource_instance_of(resource, &org_kde_kwin_server_decoration_manager_interface_data, KwinServerDecorationManager::Thunks::request_vtable))
+    {
+        return static_cast<KwinServerDecorationManager*>(wl_resource_get_user_data(resource));
+    }
+    else
+    {
+        return nullptr;
+    }
+}
+
+// KwinServerDecoration
+
+struct mw::KwinServerDecoration::Thunks
+{
+    static int const supported_version;
+
+    static void release_thunk(struct wl_client* client, struct wl_resource* resource)
+    {
+        try
+        {
+            wl_resource_destroy(resource);
+        }
+        catch(ProtocolError const& err)
+        {
+            wl_resource_post_error(err.resource(), err.code(), "%s", err.message());
+        }
+        catch(...)
+        {
+            internal_error_processing_request(client, "KwinServerDecoration::release()");
+        }
+    }
+
+    static void request_mode_thunk(struct wl_client* client, struct wl_resource* resource, uint32_t mode)
+    {
+        try
+        {
+            auto me = static_cast<KwinServerDecoration*>(wl_resource_get_user_data(resource));
+            me->request_mode(mode);
+        }
+        catch(ProtocolError const& err)
+        {
+            wl_resource_post_error(err.resource(), err.code(), "%s", err.message());
+        }
+        catch(...)
+        {
+            internal_error_processing_request(client, "KwinServerDecoration::request_mode()");
+        }
+    }
+
+    static void resource_destroyed_thunk(wl_resource* resource)
+    {
+        delete static_cast<KwinServerDecoration*>(wl_resource_get_user_data(resource));
+    }
+
+    static struct wl_message const request_messages[];
+    static struct wl_message const event_messages[];
+    static void const* request_vtable[];
+};
+
+int const mw::KwinServerDecoration::Thunks::supported_version = 1;
+
+mw::KwinServerDecoration::KwinServerDecoration(struct wl_resource* resource, Version<1>)
+    : Resource{resource}
+{
+    wl_resource_set_implementation(resource, Thunks::request_vtable, this, &Thunks::resource_destroyed_thunk);
+}
+
+mw::KwinServerDecoration::~KwinServerDecoration()
+{
+    wl_resource_set_implementation(resource, nullptr, nullptr, nullptr);
+}
+
+void mw::KwinServerDecoration::send_mode_event(uint32_t mode) const
+{
+    wl_resource_post_event(resource, Opcode::mode, mode);
+}
+
+bool mw::KwinServerDecoration::is_instance(wl_resource* resource)
+{
+    return wl_resource_instance_of(resource, &org_kde_kwin_server_decoration_interface_data, Thunks::request_vtable);
+}
+
+uint32_t const mw::KwinServerDecoration::Mode::None;
+uint32_t const mw::KwinServerDecoration::Mode::Client;
+uint32_t const mw::KwinServerDecoration::Mode::Server;
+
+struct wl_message const mw::KwinServerDecoration::Thunks::request_messages[] {
+    {"release", "", all_null_types},
+    {"request_mode", "u", all_null_types}};
+
+struct wl_message const mw::KwinServerDecoration::Thunks::event_messages[] {
+    {"mode", "u", all_null_types}};
+
+void const* mw::KwinServerDecoration::Thunks::request_vtable[] {
+    (void*)Thunks::release_thunk,
+    (void*)Thunks::request_mode_thunk};
+
+mw::KwinServerDecoration* mw::KwinServerDecoration::from(struct wl_resource* resource)
+{
+    if (resource &&
+        wl_resource_instance_of(resource, &org_kde_kwin_server_decoration_interface_data, KwinServerDecoration::Thunks::request_vtable))
+    {
+        return static_cast<KwinServerDecoration*>(wl_resource_get_user_data(resource));
+    }
+    else
+    {
+        return nullptr;
+    }
+}
+
+namespace mir
+{
+namespace wayland
+{
+
+struct wl_interface const org_kde_kwin_server_decoration_manager_interface_data {
+    mw::KwinServerDecorationManager::interface_name,
+    mw::KwinServerDecorationManager::Thunks::supported_version,
+    1, mw::KwinServerDecorationManager::Thunks::request_messages,
+    1, mw::KwinServerDecorationManager::Thunks::event_messages};
+
+struct wl_interface const org_kde_kwin_server_decoration_interface_data {
+    mw::KwinServerDecoration::interface_name,
+    mw::KwinServerDecoration::Thunks::supported_version,
+    2, mw::KwinServerDecoration::Thunks::request_messages,
+    1, mw::KwinServerDecoration::Thunks::event_messages};
+
+}
+}
diff --git a/src/platforms/mirserver/wayland-generated/server-decoration_wrapper.h b/src/platforms/mirserver/wayland-generated/server-decoration_wrapper.h
new file mode 100644
index 00000000..87a42d47
--- /dev/null
+++ b/src/platforms/mirserver/wayland-generated/server-decoration_wrapper.h
@@ -0,0 +1,107 @@
+/*
+ * AUTOGENERATED - DO NOT EDIT
+ *
+ * This file is generated from server-decoration.xml by mir_wayland_generator
+ */
+
+#ifndef MIR_FRONTEND_WAYLAND_SERVER_DECORATION_XML_WRAPPER
+#define MIR_FRONTEND_WAYLAND_SERVER_DECORATION_XML_WRAPPER
+
+#include <optional>
+
+#include "mir/fd.h"
+#include <wayland-server-core.h>
+
+#include "mir/wayland/resource.h"
+#include "mir/wayland/global.h"
+
+namespace mir
+{
+namespace wayland
+{
+
+class KwinServerDecorationManager;
+class KwinServerDecoration;
+
+class KwinServerDecorationManager : public Resource
+{
+public:
+    static char const constexpr* interface_name = "org_kde_kwin_server_decoration_manager";
+
+    static KwinServerDecorationManager* from(struct wl_resource*);
+
+    KwinServerDecorationManager(struct wl_resource* resource, Version<1>);
+    virtual ~KwinServerDecorationManager();
+
+    void send_default_mode_event(uint32_t mode) const;
+
+    void destroy_and_delete() const;
+
+    struct Mode
+    {
+        static uint32_t const None = 0;
+        static uint32_t const Client = 1;
+        static uint32_t const Server = 2;
+    };
+
+    struct Opcode
+    {
+        static uint32_t const default_mode = 0;
+    };
+
+    struct Thunks;
+
+    static bool is_instance(wl_resource* resource);
+
+    class Global : public wayland::Global
+    {
+    public:
+        Global(wl_display* display, Version<1>);
+
+        auto interface_name() const -> char const* override;
+
+    private:
+        virtual void bind(wl_resource* new_org_kde_kwin_server_decoration_manager) = 0;
+        friend KwinServerDecorationManager::Thunks;
+    };
+
+private:
+    virtual void create(struct wl_resource* id, struct wl_resource* surface) = 0;
+};
+
+class KwinServerDecoration : public Resource
+{
+public:
+    static char const constexpr* interface_name = "org_kde_kwin_server_decoration";
+
+    static KwinServerDecoration* from(struct wl_resource*);
+
+    KwinServerDecoration(struct wl_resource* resource, Version<1>);
+    virtual ~KwinServerDecoration();
+
+    void send_mode_event(uint32_t mode) const;
+
+    struct Mode
+    {
+        static uint32_t const None = 0;
+        static uint32_t const Client = 1;
+        static uint32_t const Server = 2;
+    };
+
+    struct Opcode
+    {
+        static uint32_t const mode = 0;
+    };
+
+    struct Thunks;
+
+    static bool is_instance(wl_resource* resource);
+
+private:
+    virtual void request_mode(uint32_t mode) = 0;
+};
+
+}
+}
+
+#endif // MIR_FRONTEND_WAYLAND_SERVER_DECORATION_XML_WRAPPER
diff --git a/src/platforms/mirserver/wayland-generated/xdg-decoration-unstable-v1_wrapper.cpp b/src/platforms/mirserver/wayland-generated/xdg-decoration-unstable-v1_wrapper.cpp
new file mode 100644
index 00000000..d40d19b7
--- /dev/null
+++ b/src/platforms/mirserver/wayland-generated/xdg-decoration-unstable-v1_wrapper.cpp
@@ -0,0 +1,315 @@
+/*
+ * AUTOGENERATED - DO NOT EDIT
+ *
+ * This file is generated from xdg-decoration-unstable-v1.xml by mir_wayland_generator
+ */
+
+#include "xdg-decoration-unstable-v1_wrapper.h"
+
+#include <boost/exception/diagnostic_information.hpp>
+#include <wayland-server-core.h>
+
+#include "mir/log.h"
+#include "mir/wayland/protocol_error.h"
+
+namespace mir
+{
+namespace wayland
+{
+extern struct wl_interface const xdg_toplevel_interface_data;
+extern struct wl_interface const zxdg_decoration_manager_v1_interface_data;
+extern struct wl_interface const zxdg_toplevel_decoration_v1_interface_data;
+}
+}
+
+namespace mw = mir::wayland;
+
+namespace
+{
+struct wl_interface const* all_null_types [] {
+    nullptr,
+    nullptr,
+    nullptr,
+    nullptr,
+    nullptr,
+    nullptr};
+}
+
+// XdgDecorationManagerV1
+
+struct mw::XdgDecorationManagerV1::Thunks
+{
+    static int const supported_version;
+
+    static void destroy_thunk(struct wl_client* client, struct wl_resource* resource)
+    {
+        try
+        {
+            wl_resource_destroy(resource);
+        }
+        catch(ProtocolError const& err)
+        {
+            wl_resource_post_error(err.resource(), err.code(), "%s", err.message());
+        }
+        catch(...)
+        {
+            internal_error_processing_request(client, "XdgDecorationManagerV1::destroy()");
+        }
+    }
+
+    static void get_toplevel_decoration_thunk(struct wl_client* client, struct wl_resource* resource, uint32_t id, struct wl_resource* toplevel)
+    {
+        wl_resource* id_resolved{
+            wl_resource_create(client, &zxdg_toplevel_decoration_v1_interface_data, wl_resource_get_version(resource), id)};
+        if (id_resolved == nullptr)
+        {
+            wl_client_post_no_memory(client);
+            BOOST_THROW_EXCEPTION((std::bad_alloc{}));
+        }
+        try
+        {
+            auto me = static_cast<XdgDecorationManagerV1*>(wl_resource_get_user_data(resource));
+            me->get_toplevel_decoration(id_resolved, toplevel);
+        }
+        catch(ProtocolError const& err)
+        {
+            wl_resource_post_error(err.resource(), err.code(), "%s", err.message());
+        }
+        catch(...)
+        {
+            internal_error_processing_request(client, "XdgDecorationManagerV1::get_toplevel_decoration()");
+        }
+    }
+
+    static void resource_destroyed_thunk(wl_resource* resource)
+    {
+        delete static_cast<XdgDecorationManagerV1*>(wl_resource_get_user_data(resource));
+    }
+
+    static void bind_thunk(struct wl_client* client, void* data, uint32_t version, uint32_t id)
+    {
+        auto me = static_cast<XdgDecorationManagerV1::Global*>(data);
+        auto resource = wl_resource_create(
+            client,
+            &zxdg_decoration_manager_v1_interface_data,
+            std::min((int)version, Thunks::supported_version),
+            id);
+        if (resource == nullptr)
+        {
+            wl_client_post_no_memory(client);
+            BOOST_THROW_EXCEPTION((std::bad_alloc{}));
+        }
+        try
+        {
+            me->bind(resource);
+        }
+        catch(...)
+        {
+            internal_error_processing_request(client, "XdgDecorationManagerV1 global bind");
+        }
+    }
+
+    static struct wl_interface const* get_toplevel_decoration_types[];
+    static struct wl_message const request_messages[];
+    static void const* request_vtable[];
+};
+
+int const mw::XdgDecorationManagerV1::Thunks::supported_version = 1;
+
+mw::XdgDecorationManagerV1::XdgDecorationManagerV1(struct wl_resource* resource, Version<1>)
+    : Resource{resource}
+{
+    wl_resource_set_implementation(resource, Thunks::request_vtable, this, &Thunks::resource_destroyed_thunk);
+}
+
+mw::XdgDecorationManagerV1::~XdgDecorationManagerV1()
+{
+    wl_resource_set_implementation(resource, nullptr, nullptr, nullptr);
+}
+
+bool mw::XdgDecorationManagerV1::is_instance(wl_resource* resource)
+{
+    return wl_resource_instance_of(resource, &zxdg_decoration_manager_v1_interface_data, Thunks::request_vtable);
+}
+
+mw::XdgDecorationManagerV1::Global::Global(wl_display* display, Version<1>)
+    : wayland::Global{
+          wl_global_create(
+              display,
+              &zxdg_decoration_manager_v1_interface_data,
+              Thunks::supported_version,
+              this,
+              &Thunks::bind_thunk)}
+{
+}
+
+auto mw::XdgDecorationManagerV1::Global::interface_name() const -> char const*
+{
+    return XdgDecorationManagerV1::interface_name;
+}
+
+struct wl_interface const* mw::XdgDecorationManagerV1::Thunks::get_toplevel_decoration_types[] {
+    &zxdg_toplevel_decoration_v1_interface_data,
+    &xdg_toplevel_interface_data};
+
+struct wl_message const mw::XdgDecorationManagerV1::Thunks::request_messages[] {
+    {"destroy", "", all_null_types},
+    {"get_toplevel_decoration", "no", get_toplevel_decoration_types}};
+
+void const* mw::XdgDecorationManagerV1::Thunks::request_vtable[] {
+    (void*)Thunks::destroy_thunk,
+    (void*)Thunks::get_toplevel_decoration_thunk};
+
+mw::XdgDecorationManagerV1* mw::XdgDecorationManagerV1::from(struct wl_resource* resource)
+{
+    if (resource &&
+        wl_resource_instance_of(resource, &zxdg_decoration_manager_v1_interface_data, XdgDecorationManagerV1::Thunks::request_vtable))
+    {
+        return static_cast<XdgDecorationManagerV1*>(wl_resource_get_user_data(resource));
+    }
+    else
+    {
+        return nullptr;
+    }
+}
+
+// XdgToplevelDecorationV1
+
+struct mw::XdgToplevelDecorationV1::Thunks
+{
+    static int const supported_version;
+
+    static void destroy_thunk(struct wl_client* client, struct wl_resource* resource)
+    {
+        try
+        {
+            wl_resource_destroy(resource);
+        }
+        catch(ProtocolError const& err)
+        {
+            wl_resource_post_error(err.resource(), err.code(), "%s", err.message());
+        }
+        catch(...)
+        {
+            internal_error_processing_request(client, "XdgToplevelDecorationV1::destroy()");
+        }
+    }
+
+    static void set_mode_thunk(struct wl_client* client, struct wl_resource* resource, uint32_t mode)
+    {
+        try
+        {
+            auto me = static_cast<XdgToplevelDecorationV1*>(wl_resource_get_user_data(resource));
+            me->set_mode(mode);
+        }
+        catch(ProtocolError const& err)
+        {
+            wl_resource_post_error(err.resource(), err.code(), "%s", err.message());
+        }
+        catch(...)
+        {
+            internal_error_processing_request(client, "XdgToplevelDecorationV1::set_mode()");
+        }
+    }
+
+    static void unset_mode_thunk(struct wl_client* client, struct wl_resource* resource)
+    {
+        try
+        {
+            auto me = static_cast<XdgToplevelDecorationV1*>(wl_resource_get_user_data(resource));
+            me->unset_mode();
+        }
+        catch(ProtocolError const& err)
+        {
+            wl_resource_post_error(err.resource(), err.code(), "%s", err.message());
+        }
+        catch(...)
+        {
+            internal_error_processing_request(client, "XdgToplevelDecorationV1::unset_mode()");
+        }
+    }
+
+    static void resource_destroyed_thunk(wl_resource* resource)
+    {
+        delete static_cast<XdgToplevelDecorationV1*>(wl_resource_get_user_data(resource));
+    }
+
+    static struct wl_message const request_messages[];
+    static struct wl_message const event_messages[];
+    static void const* request_vtable[];
+};
+
+int const mw::XdgToplevelDecorationV1::Thunks::supported_version = 1;
+
+mw::XdgToplevelDecorationV1::XdgToplevelDecorationV1(struct wl_resource* resource, Version<1>)
+    : Resource{resource}
+{
+    wl_resource_set_implementation(resource, Thunks::request_vtable, this, &Thunks::resource_destroyed_thunk);
+}
+
+mw::XdgToplevelDecorationV1::~XdgToplevelDecorationV1()
+{
+    wl_resource_set_implementation(resource, nullptr, nullptr, nullptr);
+}
+
+void mw::XdgToplevelDecorationV1::send_configure_event(uint32_t mode) const
+{
+    wl_resource_post_event(resource, Opcode::configure, mode);
+}
+
+bool mw::XdgToplevelDecorationV1::is_instance(wl_resource* resource)
+{
+    return wl_resource_instance_of(resource, &zxdg_toplevel_decoration_v1_interface_data, Thunks::request_vtable);
+}
+
+uint32_t const mw::XdgToplevelDecorationV1::Error::unconfigured_buffer;
+uint32_t const mw::XdgToplevelDecorationV1::Error::already_constructed;
+uint32_t const mw::XdgToplevelDecorationV1::Error::orphaned;
+uint32_t const mw::XdgToplevelDecorationV1::Mode::client_side;
+uint32_t const mw::XdgToplevelDecorationV1::Mode::server_side;
+
+struct wl_message const mw::XdgToplevelDecorationV1::Thunks::request_messages[] {
+    {"destroy", "", all_null_types},
+    {"set_mode", "u", all_null_types},
+    {"unset_mode", "", all_null_types}};
+
+struct wl_message const mw::XdgToplevelDecorationV1::Thunks::event_messages[] {
+    {"configure", "u", all_null_types}};
+
+void const* mw::XdgToplevelDecorationV1::Thunks::request_vtable[] {
+    (void*)Thunks::destroy_thunk,
+    (void*)Thunks::set_mode_thunk,
+    (void*)Thunks::unset_mode_thunk};
+
+mw::XdgToplevelDecorationV1* mw::XdgToplevelDecorationV1::from(struct wl_resource* resource)
+{
+    if (resource &&
+        wl_resource_instance_of(resource, &zxdg_toplevel_decoration_v1_interface_data, XdgToplevelDecorationV1::Thunks::request_vtable))
+    {
+        return static_cast<XdgToplevelDecorationV1*>(wl_resource_get_user_data(resource));
+    }
+    else
+    {
+        return nullptr;
+    }
+}
+
+namespace mir
+{
+namespace wayland
+{
+
+struct wl_interface const zxdg_decoration_manager_v1_interface_data {
+    mw::XdgDecorationManagerV1::interface_name,
+    mw::XdgDecorationManagerV1::Thunks::supported_version,
+    2, mw::XdgDecorationManagerV1::Thunks::request_messages,
+    0, nullptr};
+
+struct wl_interface const zxdg_toplevel_decoration_v1_interface_data {
+    mw::XdgToplevelDecorationV1::interface_name,
+    mw::XdgToplevelDecorationV1::Thunks::supported_version,
+    3, mw::XdgToplevelDecorationV1::Thunks::request_messages,
+    1, mw::XdgToplevelDecorationV1::Thunks::event_messages};
+
+}
+}
diff --git a/src/platforms/mirserver/wayland-generated/xdg-decoration-unstable-v1_wrapper.h b/src/platforms/mirserver/wayland-generated/xdg-decoration-unstable-v1_wrapper.h
new file mode 100644
index 00000000..7483ba44
--- /dev/null
+++ b/src/platforms/mirserver/wayland-generated/xdg-decoration-unstable-v1_wrapper.h
@@ -0,0 +1,98 @@
+/*
+ * AUTOGENERATED - DO NOT EDIT
+ *
+ * This file is generated from xdg-decoration-unstable-v1.xml by mir_wayland_generator
+ */
+
+#ifndef MIR_FRONTEND_WAYLAND_XDG_DECORATION_UNSTABLE_V1_XML_WRAPPER
+#define MIR_FRONTEND_WAYLAND_XDG_DECORATION_UNSTABLE_V1_XML_WRAPPER
+
+#include <optional>
+
+#include "mir/fd.h"
+#include <wayland-server-core.h>
+
+#include "mir/wayland/resource.h"
+#include "mir/wayland/global.h"
+
+namespace mir
+{
+namespace wayland
+{
+
+class XdgDecorationManagerV1;
+class XdgToplevelDecorationV1;
+
+class XdgDecorationManagerV1 : public Resource
+{
+public:
+    static char const constexpr* interface_name = "zxdg_decoration_manager_v1";
+
+    static XdgDecorationManagerV1* from(struct wl_resource*);
+
+    XdgDecorationManagerV1(struct wl_resource* resource, Version<1>);
+    virtual ~XdgDecorationManagerV1();
+
+    struct Thunks;
+
+    static bool is_instance(wl_resource* resource);
+
+    class Global : public wayland::Global
+    {
+    public:
+        Global(wl_display* display, Version<1>);
+
+        auto interface_name() const -> char const* override;
+
+    private:
+        virtual void bind(wl_resource* new_zxdg_decoration_manager_v1) = 0;
+        friend XdgDecorationManagerV1::Thunks;
+    };
+
+private:
+    virtual void get_toplevel_decoration(struct wl_resource* id, struct wl_resource* toplevel) = 0;
+};
+
+class XdgToplevelDecorationV1 : public Resource
+{
+public:
+    static char const constexpr* interface_name = "zxdg_toplevel_decoration_v1";
+
+    static XdgToplevelDecorationV1* from(struct wl_resource*);
+
+    XdgToplevelDecorationV1(struct wl_resource* resource, Version<1>);
+    virtual ~XdgToplevelDecorationV1();
+
+    void send_configure_event(uint32_t mode) const;
+
+    struct Error
+    {
+        static uint32_t const unconfigured_buffer = 0;
+        static uint32_t const already_constructed = 1;
+        static uint32_t const orphaned = 2;
+    };
+
+    struct Mode
+    {
+        static uint32_t const client_side = 1;
+        static uint32_t const server_side = 2;
+    };
+
+    struct Opcode
+    {
+        static uint32_t const configure = 0;
+    };
+
+    struct Thunks;
+
+    static bool is_instance(wl_resource* resource);
+
+private:
+    virtual void set_mode(uint32_t mode) = 0;
+    virtual void unset_mode() = 0;
+};
+
+}
+}
+
+#endif // MIR_FRONTEND_WAYLAND_XDG_DECORATION_UNSTABLE_V1_XML_WRAPPER
diff --git a/src/platforms/mirserver/wayland-protocols/qt-windowmanager.xml b/src/platforms/mirserver/wayland-protocols/qt-windowmanager.xml
new file mode 100644
index 00000000..86ddff72
--- /dev/null
+++ b/src/platforms/mirserver/wayland-protocols/qt-windowmanager.xml
@@ -0,0 +1,58 @@
+<protocol name="qt_windowmanager">
+
+    <copyright>
+ Copyright (C) 2015 The Qt Company Ltd.
+ Contact: http://www.qt.io/licensing/
+
+ This file is part of the plugins of the Qt Toolkit.
+
+ $QT_BEGIN_LICENSE:BSD$
+ You may use this file under the terms of the BSD license as follows:
+
+ "Redistribution and use in source and binary forms, with or without
+ modification, are permitted provided that the following conditions are
+ met:
+   * Redistributions of source code must retain the above copyright
+     notice, this list of conditions and the following disclaimer.
+   * Redistributions in binary form must reproduce the above copyright
+     notice, this list of conditions and the following disclaimer in
+     the documentation and/or other materials provided with the
+     distribution.
+   * Neither the name of The Qt Company Ltd nor the names of its
+     contributors may be used to endorse or promote products derived
+     from this software without specific prior written permission.
+
+
+ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+
+ $QT_END_LICENSE$
+    </copyright>
+
+    <interface name="qt_windowmanager" version="1">
+        <request name="open_url">
+            <description summary="client requests a url to be opened">
+                If remaining is not 0 this is a multipart request, and
+                the server must concatenate subsequent requst urls to and
+                including a request where remaining is set to 0, before
+                it can handle the url.
+            </description>
+            <arg name="remaining" type="uint" />
+            <arg name="url" type="string" />
+        </request>
+        <event name="hints">
+            <arg name="show_is_fullscreen" type="int"/>
+        </event>
+        <event name="quit">
+        </event>
+    </interface>
+</protocol>
diff --git a/src/platforms/mirserver/wayland-protocols/server-decoration.xml b/src/platforms/mirserver/wayland-protocols/server-decoration.xml
new file mode 100644
index 00000000..b70bec12
--- /dev/null
+++ b/src/platforms/mirserver/wayland-protocols/server-decoration.xml
@@ -0,0 +1,85 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<protocol name="server_decoration">
+  <copyright><![CDATA[
+    SPDX-FileCopyrightText: 2015 Martin Gräßlin
+
+    SPDX-License-Identifier: LGPL-2.1-or-later
+  ]]></copyright>
+  <interface  name="org_kde_kwin_server_decoration_manager" version="1">
+      <description summary="Server side window decoration manager">
+        This interface allows to coordinate whether the server should create
+        a server-side window decoration around a wl_surface representing a
+        shell surface (wl_shell_surface or similar). By announcing support
+        for this interface the server indicates that it supports server
+        side decorations.
+
+        Use in conjunction with zxdg_decoration_manager_v1 is undefined.
+      </description>
+      <request name="create">
+        <description summary="Create a server-side decoration object for a given surface">
+            When a client creates a server-side decoration object it indicates
+            that it supports the protocol. The client is supposed to tell the
+            server whether it wants server-side decorations or will provide
+            client-side decorations.
+
+            If the client does not create a server-side decoration object for
+            a surface the server interprets this as lack of support for this
+            protocol and considers it as client-side decorated. Nevertheless a
+            client-side decorated surface should use this protocol to indicate
+            to the server that it does not want a server-side deco.
+        </description>
+        <arg name="id" type="new_id" interface="org_kde_kwin_server_decoration"/>
+        <arg name="surface" type="object" interface="wl_surface"/>
+      </request>
+      <enum name="mode">
+            <description summary="Possible values to use in request_mode and the event mode."/>
+            <entry name="None" value="0" summary="Undecorated: The surface is not decorated at all, neither server nor client-side. An example is a popup surface which should not be decorated."/>
+            <entry name="Client" value="1" summary="Client-side decoration: The decoration is part of the surface and the client."/>
+            <entry name="Server" value="2" summary="Server-side decoration: The server embeds the surface into a decoration frame."/>
+      </enum>
+      <event name="default_mode">
+          <description summary="The default mode used on the server">
+              This event is emitted directly after binding the interface. It contains
+              the default mode for the decoration. When a new server decoration object
+              is created this new object will be in the default mode until the first
+              request_mode is requested.
+
+              The server may change the default mode at any time.
+          </description>
+          <arg name="mode" type="uint" summary="The default decoration mode applied to newly created server decorations."/>
+      </event>
+  </interface>
+  <interface name="org_kde_kwin_server_decoration" version="1">
+      <request name="release" type="destructor">
+        <description summary="release the server decoration object"/>
+      </request>
+      <enum name="mode">
+            <description summary="Possible values to use in request_mode and the event mode."/>
+            <entry name="None" value="0" summary="Undecorated: The surface is not decorated at all, neither server nor client-side. An example is a popup surface which should not be decorated."/>
+            <entry name="Client" value="1" summary="Client-side decoration: The decoration is part of the surface and the client."/>
+            <entry name="Server" value="2" summary="Server-side decoration: The server embeds the surface into a decoration frame."/>
+      </enum>
+      <request name="request_mode">
+          <description summary="The decoration mode the surface wants to use."/>
+          <arg name="mode" type="uint" summary="The mode this surface wants to use."/>
+      </request>
+      <event name="mode">
+          <description summary="The new decoration mode applied by the server">
+              This event is emitted directly after the decoration is created and
+              represents the base decoration policy by the server. E.g. a server
+              which wants all surfaces to be client-side decorated will send Client,
+              a server which wants server-side decoration will send Server.
+
+              The client can request a different mode through the decoration request.
+              The server will acknowledge this by another event with the same mode. So
+              even if a server prefers server-side decoration it's possible to force a
+              client-side decoration.
+
+              The server may emit this event at any time. In this case the client can
+              again request a different mode. It's the responsibility of the server to
+              prevent a feedback loop.
+          </description>
+          <arg name="mode" type="uint" summary="The decoration mode applied to the surface by the server."/>
+      </event>
+  </interface>
+</protocol>
diff --git a/src/platforms/mirserver/wayland-protocols/xdg-decoration-unstable-v1.xml b/src/platforms/mirserver/wayland-protocols/xdg-decoration-unstable-v1.xml
new file mode 100644
index 00000000..e5967751
--- /dev/null
+++ b/src/platforms/mirserver/wayland-protocols/xdg-decoration-unstable-v1.xml
@@ -0,0 +1,156 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<protocol name="xdg_decoration_unstable_v1">
+  <copyright>
+    Copyright © 2018 Simon Ser
+
+    Permission is hereby granted, free of charge, to any person obtaining a
+    copy of this software and associated documentation files (the "Software"),
+    to deal in the Software without restriction, including without limitation
+    the rights to use, copy, modify, merge, publish, distribute, sublicense,
+    and/or sell copies of the Software, and to permit persons to whom the
+    Software is furnished to do so, subject to the following conditions:
+
+    The above copyright notice and this permission notice (including the next
+    paragraph) shall be included in all copies or substantial portions of the
+    Software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+    DEALINGS IN THE SOFTWARE.
+  </copyright>
+
+  <interface name="zxdg_decoration_manager_v1" version="1">
+    <description summary="window decoration manager">
+      This interface allows a compositor to announce support for server-side
+      decorations.
+
+      A window decoration is a set of window controls as deemed appropriate by
+      the party managing them, such as user interface components used to move,
+      resize and change a window's state.
+
+      A client can use this protocol to request being decorated by a supporting
+      compositor.
+
+      If compositor and client do not negotiate the use of a server-side
+      decoration using this protocol, clients continue to self-decorate as they
+      see fit.
+
+      Warning! The protocol described in this file is experimental and
+      backward incompatible changes may be made. Backward compatible changes
+      may be added together with the corresponding interface version bump.
+      Backward incompatible changes are done by bumping the version number in
+      the protocol and interface names and resetting the interface version.
+      Once the protocol is to be declared stable, the 'z' prefix and the
+      version number in the protocol and interface names are removed and the
+      interface version number is reset.
+    </description>
+
+    <request name="destroy" type="destructor">
+      <description summary="destroy the decoration manager object">
+        Destroy the decoration manager. This doesn't destroy objects created
+        with the manager.
+      </description>
+    </request>
+
+    <request name="get_toplevel_decoration">
+      <description summary="create a new toplevel decoration object">
+        Create a new decoration object associated with the given toplevel.
+
+        Creating an xdg_toplevel_decoration from an xdg_toplevel which has a
+        buffer attached or committed is a client error, and any attempts by a
+        client to attach or manipulate a buffer prior to the first
+        xdg_toplevel_decoration.configure event must also be treated as
+        errors.
+      </description>
+      <arg name="id" type="new_id" interface="zxdg_toplevel_decoration_v1"/>
+      <arg name="toplevel" type="object" interface="xdg_toplevel"/>
+    </request>
+  </interface>
+
+  <interface name="zxdg_toplevel_decoration_v1" version="1">
+    <description summary="decoration object for a toplevel surface">
+      The decoration object allows the compositor to toggle server-side window
+      decorations for a toplevel surface. The client can request to switch to
+      another mode.
+
+      The xdg_toplevel_decoration object must be destroyed before its
+      xdg_toplevel.
+    </description>
+
+    <enum name="error">
+      <entry name="unconfigured_buffer" value="0"
+        summary="xdg_toplevel has a buffer attached before configure"/>
+      <entry name="already_constructed" value="1"
+        summary="xdg_toplevel already has a decoration object"/>
+      <entry name="orphaned" value="2"
+        summary="xdg_toplevel destroyed before the decoration object"/>
+    </enum>
+
+    <request name="destroy" type="destructor">
+      <description summary="destroy the decoration object">
+        Switch back to a mode without any server-side decorations at the next
+        commit.
+      </description>
+    </request>
+
+    <enum name="mode">
+      <description summary="window decoration modes">
+        These values describe window decoration modes.
+      </description>
+      <entry name="client_side" value="1"
+        summary="no server-side window decoration"/>
+      <entry name="server_side" value="2"
+        summary="server-side window decoration"/>
+    </enum>
+
+    <request name="set_mode">
+      <description summary="set the decoration mode">
+        Set the toplevel surface decoration mode. This informs the compositor
+        that the client prefers the provided decoration mode.
+
+        After requesting a decoration mode, the compositor will respond by
+        emitting an xdg_surface.configure event. The client should then update
+        its content, drawing it without decorations if the received mode is
+        server-side decorations. The client must also acknowledge the configure
+        when committing the new content (see xdg_surface.ack_configure).
+
+        The compositor can decide not to use the client's mode and enforce a
+        different mode instead.
+
+        Clients whose decoration mode depend on the xdg_toplevel state may send
+        a set_mode request in response to an xdg_surface.configure event and wait
+        for the next xdg_surface.configure event to prevent unwanted state.
+        Such clients are responsible for preventing configure loops and must
+        make sure not to send multiple successive set_mode requests with the
+        same decoration mode.
+      </description>
+      <arg name="mode" type="uint" enum="mode" summary="the decoration mode"/>
+    </request>
+
+    <request name="unset_mode">
+      <description summary="unset the decoration mode">
+        Unset the toplevel surface decoration mode. This informs the compositor
+        that the client doesn't prefer a particular decoration mode.
+
+        This request has the same semantics as set_mode.
+      </description>
+    </request>
+
+    <event name="configure">
+      <description summary="suggest a surface change">
+        The configure event asks the client to change its decoration mode. The
+        configured state should not be applied immediately. Clients must send an
+        ack_configure in response to this event. See xdg_surface.configure and
+        xdg_surface.ack_configure for details.
+
+        A configure event can be sent at any time. The specified mode must be
+        obeyed by the client.
+      </description>
+      <arg name="mode" type="uint" enum="mode" summary="the decoration mode"/>
+    </event>
+  </interface>
+</protocol>
diff --git a/src/platforms/mirserver/wayland/kwinserverdecoration.cpp b/src/platforms/mirserver/wayland/kwinserverdecoration.cpp
new file mode 100644
index 00000000..8ecb9988
--- /dev/null
+++ b/src/platforms/mirserver/wayland/kwinserverdecoration.cpp
@@ -0,0 +1,109 @@
+/*
+ * Copyright (C) 2020 UBports Foundation
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "kwinserverdecoration.h"
+#include "services.h"
+
+#include <wayland-generated/server-decoration_wrapper.h>
+
+#include <QDebug>
+
+using namespace mir::wayland;
+using namespace miral;
+
+namespace
+{
+
+class QtKwinServerDecoration : public KwinServerDecoration
+{
+public:
+    using KwinServerDecoration::KwinServerDecoration;
+
+    QtKwinServerDecoration(struct wl_resource* resource, struct wl_resource* surface, qtmir::WindowModelNotifier &windowModel) :
+        KwinServerDecoration(resource, Version<1>{}),
+        m_windowModel(windowModel),
+        surface(surface)
+    {
+        send_mode_event(Mode::Server);
+    };
+
+    void request_mode(uint32_t mode) override {
+        qDebug() << "set KDE mode: " << mode;
+        auto win = miral::window_for(resource);
+
+        Q_EMIT m_windowModel.windowDecorationChanged(win, mode == Mode::Server);
+        send_mode_event(mode);
+    };
+private:
+    qtmir::WindowModelNotifier &m_windowModel;
+    struct wl_resource* surface;
+};
+
+class QtKwinServerDecorationManager : public KwinServerDecorationManager
+{
+public:
+    using KwinServerDecorationManager::KwinServerDecorationManager;
+
+    QtKwinServerDecorationManager(struct wl_resource*, qtmir::WindowModelNotifier &windowModel);
+
+    void create(struct wl_resource* id, struct wl_resource* surface) override {
+        new QtKwinServerDecoration{id, surface, m_windowModel};
+    };
+private:
+    qtmir::WindowModelNotifier &m_windowModel;
+};
+
+
+
+QtKwinServerDecorationManager::QtKwinServerDecorationManager(
+    struct wl_resource* resource, qtmir::WindowModelNotifier &windowModel) :
+    KwinServerDecorationManager{resource, Version<1>{}},
+    m_windowModel(windowModel)
+{
+    send_default_mode_event(Mode::Server);
+}
+
+class MyGlobal : public KwinServerDecorationManager::Global
+{
+public:
+    explicit MyGlobal(wl_display* display, qtmir::WindowModelNotifier &windowModel);
+    
+    void bind(wl_resource* new_xdgdecormanager) override;
+
+private:
+    qtmir::WindowModelNotifier &m_windowModel;
+};
+
+}
+
+MyGlobal::MyGlobal(wl_display* display, qtmir::WindowModelNotifier &windowModel) :
+    Global(display, Version<1>{}), m_windowModel(windowModel)
+{
+}
+
+void MyGlobal::bind(wl_resource* new_kdedecormanager)
+{
+    new QtKwinServerDecorationManager{new_kdedecormanager, m_windowModel};
+}
+
+auto qtmir::qtKwinServerDecorationManagerExtension(qtmir::WindowModelNotifier &windowModel) -> WaylandExtensions::Builder {
+    return {
+        KwinServerDecorationManager::interface_name,
+        [&](WaylandExtensions::Context const* context) {
+            return std::make_shared<MyGlobal>(context->display(), windowModel);
+        }
+    };
+}
diff --git a/src/platforms/mirserver/wayland/kwinserverdecoration.h b/src/platforms/mirserver/wayland/kwinserverdecoration.h
new file mode 100644
index 00000000..c7513028
--- /dev/null
+++ b/src/platforms/mirserver/wayland/kwinserverdecoration.h
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2020 UBports Foundation
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#pragma once
+
+// Provides the qt-windowmanager Wayland extension, which provides support for
+// URL handling. We use url-dispatcher for the purpose.
+
+#include "services.h"
+
+#include <miral/wayland_extensions.h>
+#include <miral/window.h>
+
+#include "windowmodelnotifier.h"
+
+namespace qtmir
+{
+// The casing is deliberate, given 'Windowmanager' is all one word according to
+// the Wayland spec
+auto qtKwinServerDecorationManagerExtension(qtmir::WindowModelNotifier &windowModel) -> miral::WaylandExtensions::Builder;
+}
diff --git a/src/platforms/mirserver/wayland/xdgdecorationV1.cpp b/src/platforms/mirserver/wayland/xdgdecorationV1.cpp
new file mode 100644
index 00000000..33295841
--- /dev/null
+++ b/src/platforms/mirserver/wayland/xdgdecorationV1.cpp
@@ -0,0 +1,96 @@
+/*
+ * Copyright (C) 2020 UBports Foundation
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "xdgdecorationV1.h"
+#include "services.h"
+
+#include <wayland-generated/xdg-decoration-unstable-v1_wrapper.h>
+
+#include <QDebug>
+
+using namespace mir::wayland;
+using namespace miral;
+
+namespace
+{
+
+class QtXdgToplevelDecorationV1 : public XdgToplevelDecorationV1
+{
+public:
+    using XdgToplevelDecorationV1::XdgToplevelDecorationV1;
+
+    QtXdgToplevelDecorationV1(struct wl_resource* resource) : XdgToplevelDecorationV1(resource, Version<1>{}) {
+        send_configure_event(Mode::server_side);
+    };
+
+    void set_mode(uint32_t mode) override {
+        send_configure_event(Mode::server_side);
+        qDebug() << "set XDG mode: " << mode;
+    };
+    void unset_mode() override {
+        qDebug("unset_mode");
+    }
+};
+
+class QtXdgDecorationManagerV1 : public XdgDecorationManagerV1
+{
+public:
+    using XdgDecorationManagerV1::XdgDecorationManagerV1;
+
+    QtXdgDecorationManagerV1(struct wl_resource*);
+
+    void get_toplevel_decoration(struct wl_resource* id, struct wl_resource* toplevel) override {
+        Q_UNUSED(toplevel);
+        new QtXdgToplevelDecorationV1{id};
+    };
+};
+
+
+
+QtXdgDecorationManagerV1::QtXdgDecorationManagerV1(
+    struct wl_resource* resource) :
+    XdgDecorationManagerV1{resource, Version<1>{}}
+{
+}
+
+class MyGlobal : public QtXdgDecorationManagerV1::Global
+{
+public:
+    explicit MyGlobal(wl_display* display);
+    
+    void bind(wl_resource* new_xdgdecormanager) override;
+};
+
+}
+
+MyGlobal::MyGlobal(wl_display* display) :
+    Global(display, Version<1>{})
+{
+}
+
+void MyGlobal::bind(wl_resource* new_xdgdecormanager)
+{
+    new QtXdgDecorationManagerV1{new_xdgdecormanager};
+}
+
+auto qtmir::qtXdgDecorationManagerV1Extension() -> WaylandExtensions::Builder {
+    return {
+        XdgDecorationManagerV1::interface_name,
+        [](WaylandExtensions::Context const* context) {
+            return std::make_shared<MyGlobal>(context->display());
+        }
+    };
+}
diff --git a/src/platforms/mirserver/wayland/xdgdecorationV1.h b/src/platforms/mirserver/wayland/xdgdecorationV1.h
new file mode 100644
index 00000000..f028b3f2
--- /dev/null
+++ b/src/platforms/mirserver/wayland/xdgdecorationV1.h
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2020 UBports Foundation
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#pragma once
+
+// Provides the qt-windowmanager Wayland extension, which provides support for
+// URL handling. We use url-dispatcher for the purpose.
+
+#include "services.h"
+
+#include <miral/wayland_extensions.h>
+
+namespace qtmir
+{
+// The casing is deliberate, given 'Windowmanager' is all one word according to
+// the Wayland spec
+auto qtXdgDecorationManagerV1Extension() -> miral::WaylandExtensions::Builder;
+}
diff --git a/src/platforms/mirserver/windowmodelnotifier.cpp b/src/platforms/mirserver/windowmodelnotifier.cpp
index e1572c8e..898b2b16 100644
--- a/src/platforms/mirserver/windowmodelnotifier.cpp
+++ b/src/platforms/mirserver/windowmodelnotifier.cpp
@@ -18,6 +18,7 @@
 
 #include <QMultiHash>
 #include <QMutex>
+#include <QDebug>
 
 using namespace qtmir;
 
@@ -77,12 +78,20 @@ WindowModelNotifier::WindowModelNotifier()
             Q_EMIT observer->windowRequestedRaise();
         });
     }, Qt::QueuedConnection);
+
+    connect(this, &WindowModelNotifier::windowDecorationChanged,    this, [](const miral::Window &window, bool ssd) {
+        WindowNotifierObserver::foreachObserverForWindow(window, [ssd](WindowNotifierObserver* observer) {
+            Q_EMIT observer->windowDecorationChanged(ssd);
+        });
+    }, Qt::QueuedConnection);
+
 }
 
 WindowNotifierObserver::WindowNotifierObserver(const miral::Window &window)
 {
     QMutexLocker locker(&mutex);
     windowToObserverMap.insert(window, this);
+    qWarning() << "ADD WIN: " << window;
 }
 
 WindowNotifierObserver::~WindowNotifierObserver()
@@ -103,6 +112,7 @@ void WindowNotifierObserver::foreachObserverForWindow(const miral::Window &windo
 {
     QMutexLocker locker(&mutex);
     auto observers = windowToObserverMap.values(window);
+
     Q_FOREACH(auto observer, observers) {
         fn(observer);
     }
diff --git a/src/platforms/mirserver/wrappedwindowmanagementpolicy.cpp b/src/platforms/mirserver/wrappedwindowmanagementpolicy.cpp
index 6a4563b2..730e0dfd 100644
--- a/src/platforms/mirserver/wrappedwindowmanagementpolicy.cpp
+++ b/src/platforms/mirserver/wrappedwindowmanagementpolicy.cpp
@@ -16,7 +16,15 @@
 
 #include "wrappedwindowmanagementpolicy.h"
 
-#include "eventdispatch.h"
+#include <miroil/eventdispatch.h>
+#include <mir/version.h>
+#if MIR_SERVER_VERSION >= MIR_VERSION_NUMBER(2, 0, 0)
+#include <miral/toolkit_event.h>
+using namespace miral::toolkit;
+#else
+#include <mir_toolkit/event.h>
+#endif
+
 #include "initialsurfacesizes.h"
 #include "screensmodel.h"
 #include "surfaceobserver.h"
@@ -28,6 +36,8 @@
 #include "qmirserver.h"
 #include "tracepoints.h"
 
+#include "debughelpers.h"
+
 #include <QDebug>
 #include <QFileInfo>
 #include <QTimer>
@@ -98,7 +108,7 @@ namespace qtmir
     };
 
     WindowManagementPolicy::WindowManagementPolicy(const miral::WindowManagerTools &tools, std::shared_ptr<qtmir::WindowManagementPolicyPrivate> dd)
-        : miral::CanonicalWindowManagerPolicy(tools)
+        : miral::MinimalWindowManager(tools)
         , d(dd)
     {
     }
@@ -109,7 +119,7 @@ namespace qtmir
     {
         int surfaceType = requestParameters.type().is_set() ? requestParameters.type().value() : -1;
         pid_t appPid = miral::pid_of(appInfo.application());
-        auto parameters = CanonicalWindowManagerPolicy::place_new_window(appInfo, requestParameters);
+        auto parameters = MinimalWindowManager::place_new_window(appInfo, requestParameters);
 
         if (surfaceType == mir_window_type_inputmethod) {
             QFileInfo info(QStringLiteral("/proc/%1/exe").arg(appPid));
@@ -127,7 +137,7 @@ namespace qtmir
         if (!requestParameters.parent().is_set() || requestParameters.parent().value().lock().get() == nullptr) {
             QSize initialSize = InitialSurfaceSizes::get(appPid);
 
-            if (initialSize.isValid() && surfaceType == mir_surface_type_normal) {
+            if (initialSize.isValid() && surfaceType == mir_window_type_normal) {
                 parameters.size() = toMirSize(initialSize);
                 hasInitialSize = true;
             }
@@ -187,6 +197,8 @@ namespace qtmir
             }
         }
 
+        parameters.server_side_decorated() = false;
+
         parameters.userdata() = std::make_shared<ExtraWindowInfo>();
 
         return parameters;
@@ -194,6 +206,8 @@ namespace qtmir
 
     void WindowManagementPolicy::handle_window_ready(miral::WindowInfo &windowInfo)
     {
+        MinimalWindowManager::handle_window_ready(windowInfo);
+
         Q_EMIT d->m_windowModel.windowReady(windowInfo);
 
         auto appInfo = tools.info_for(windowInfo.window().application());
@@ -213,7 +227,7 @@ namespace qtmir
             }
         }
 
-        CanonicalWindowManagerPolicy::handle_modify_window(windowInfo, modifications);
+        MinimalWindowManager::handle_modify_window(windowInfo, modifications);
 
         int surfaceType = modificationsClient.type().is_set() ? modificationsClient.type().value() : -1;
 
@@ -231,7 +245,7 @@ namespace qtmir
 
     void WindowManagementPolicy::handle_raise_window(miral::WindowInfo &windowInfo)
     {
-        CanonicalWindowManagerPolicy::handle_raise_window(windowInfo);
+        MinimalWindowManager::handle_raise_window(windowInfo);
 
         Q_EMIT d->m_windowModel.windowRequestedRaise(windowInfo);
     }
@@ -245,18 +259,30 @@ namespace qtmir
 
     bool WindowManagementPolicy::handle_keyboard_event(const MirKeyboardEvent *event)
     {
+        // We do not want to pass this over to MinimalWindowManager as it only
+        // Adds logic around some shortcuts, we want to do this ourself.
+
         d->m_eventFeeder->dispatchKey(event);
-        return true;
+
+        // We still want this to get passed on to the wayland/xwayland surfaces
+        return false;
     }
 
     bool WindowManagementPolicy::handle_touch_event(const MirTouchEvent *event)
     {
+        MinimalWindowManager::handle_touch_event(event);
+
         d->m_eventFeeder->dispatchTouch(event);
         return true;
     }
 
     bool WindowManagementPolicy::handle_pointer_event(const MirPointerEvent *event)
     {
+        // HACK: We dont want mir to change focus, so ignore button down
+        if (mir_pointer_event_action(event) != mir_pointer_action_button_down) {
+            MinimalWindowManager::handle_pointer_event(event);
+        }
+
         d->m_eventFeeder->dispatchPointer(event);
         return true;
     }
@@ -303,7 +329,7 @@ namespace qtmir
         // update Qt model ASAP, before applying Mir policy
         Q_EMIT d->m_windowModel.windowFocusChanged(windowInfo, true);
 
-        CanonicalWindowManagerPolicy::advise_focus_gained(windowInfo);
+        MinimalWindowManager::advise_focus_gained(windowInfo);
     }
 
     void WindowManagementPolicy::advise_state_change(const miral::WindowInfo &windowInfo, MirWindowState state)
@@ -345,7 +371,7 @@ namespace qtmir
     void WindowManagementPolicy::advise_adding_to_workspace(std::shared_ptr<miral::Workspace> const& workspace,
                                                             std::vector<miral::Window> const& windows)
     {
-        miral::CanonicalWindowManagerPolicy::advise_adding_to_workspace(workspace, windows);
+        miral::MinimalWindowManager::advise_adding_to_workspace(workspace, windows);
 
         Q_EMIT d->m_windowModel.windowsAddedToWorkspace(workspace, windows);
     }
@@ -353,7 +379,7 @@ namespace qtmir
     void WindowManagementPolicy::advise_removing_from_workspace(std::shared_ptr<miral::Workspace> const& workspace,
                                                                 std::vector<miral::Window> const& windows)
     {
-        miral::CanonicalWindowManagerPolicy::advise_removing_from_workspace(workspace, windows);
+        miral::MinimalWindowManager::advise_removing_from_workspace(workspace, windows);
 
         Q_EMIT d->m_windowModel.windowsAboutToBeRemovedFromWorkspace(workspace, windows);
     }
@@ -386,7 +412,7 @@ namespace qtmir
     Rectangle WindowManagementPolicy::confirm_inherited_move(miral::WindowInfo const& windowInfo, Displacement movement)
     {
         if (d->m_confinementRegions.isEmpty()) {
-            return CanonicalWindowManagerPolicy::confirm_inherited_move(windowInfo, movement);
+            return MinimalWindowManager::confirm_inherited_move(windowInfo, movement);
         }
 
         auto window = windowInfo.window();
@@ -430,21 +456,21 @@ namespace qtmir
         return toMirRectangle(geom.marginsRemoved(windowMargins));
     }
 
-    void WindowManagementPolicy::handle_request_drag_and_drop(miral::WindowInfo &/*window_info*/)
+    void WindowManagementPolicy::handle_request_drag_and_drop(miral::WindowInfo &window_info)
     {
-
+        MinimalWindowManager::handle_request_drag_and_drop(window_info);
     }
 
-    void WindowManagementPolicy::handle_request_move(miral::WindowInfo &/*window_info*/,
-                                                    const MirInputEvent */*input_event*/)
+    void WindowManagementPolicy::handle_request_move(miral::WindowInfo &window_info,
+                                                    const MirInputEvent *input_event)
     {
-
+        MinimalWindowManager::handle_request_move(window_info, input_event);
     }
 
-    void WindowManagementPolicy::handle_request_resize(miral::WindowInfo &/*window_info*/,
-                                                    const MirInputEvent */*input_event*/, MirResizeEdge /*edge*/)
+    void WindowManagementPolicy::handle_request_resize(miral::WindowInfo &window_info,
+                                                    const MirInputEvent *input_event, MirResizeEdge edge)
     {
-
+        MinimalWindowManager::handle_request_resize(window_info, input_event, edge);
     }
 }
 
@@ -465,6 +491,7 @@ WrappedWindowManagementPolicy::WrappedWindowManagementPolicy(const miral::Window
     qRegisterMetaType<qtmir::NewWindow>();
     qRegisterMetaType<std::vector<miral::Window>>();
     qRegisterMetaType<miral::ApplicationInfo>();
+    qRegisterMetaType<miral::Window>();
     windowController.setPolicy(this);
     workspaceController.setPolicy(this);
 }
@@ -592,7 +619,7 @@ void WrappedWindowManagementPolicy::deliver_keyboard_event(const MirKeyboardEven
         });
     }
 
-    qtmir::dispatchInputEvent(window, mir_keyboard_event_input_event(event));
+    miroil::dispatch_input_event(window, mir_keyboard_event_input_event(event));
 }
 
 void WrappedWindowManagementPolicy::deliver_touch_event(const MirTouchEvent *event, const miral::Window &window)
@@ -603,7 +630,7 @@ void WrappedWindowManagementPolicy::deliver_touch_event(const MirTouchEvent *eve
         }
     });
 
-    qtmir::dispatchInputEvent(window, mir_touch_event_input_event(event));
+    miroil::dispatch_input_event(window, mir_touch_event_input_event(event));
 }
 
 void WrappedWindowManagementPolicy::deliver_pointer_event(const MirPointerEvent *event, const miral::Window &window)
@@ -617,7 +644,7 @@ void WrappedWindowManagementPolicy::deliver_pointer_event(const MirPointerEvent
         });
     }
 
-    qtmir::dispatchInputEvent(window, mir_pointer_event_input_event(event));
+    miroil::dispatch_input_event(window, mir_pointer_event_input_event(event));
 }
 
 void WrappedWindowManagementPolicy::advise_adding_to_workspace(const std::shared_ptr<miral::Workspace> &workspace,
@@ -749,7 +776,7 @@ void WrappedWindowManagementPolicy::ask_client_to_close(const miral::Window &win
 void WrappedWindowManagementPolicy::forceClose(const miral::Window &window)
 {
     tools.invoke_under_lock([&window, this]() {
-        tools.force_close(window);
+        tools.ask_client_to_close(window);
     });
 }
 
diff --git a/tests/framework/CMakeLists.txt b/tests/framework/CMakeLists.txt
index 33644ef9..3c5d407e 100644
--- a/tests/framework/CMakeLists.txt
+++ b/tests/framework/CMakeLists.txt
@@ -1,6 +1,7 @@
 include_directories(
     ${CMAKE_SOURCE_DIR}/src/common
     ${CMAKE_SOURCE_DIR}/src/platforms/mirserver
+    ${CMAKE_SOURCE_DIR}/src/platforms/mirserver/miroil/include
     ${CMAKE_SOURCE_DIR}/src/modules
 )
 
@@ -8,6 +9,7 @@ include_directories(
     SYSTEM
     ${APPLICATION_API_INCLUDE_DIRS}
     ${MIRAL_INCLUDE_DIRS}
+    ${MIROIL_INCLUDE_DIRS}
     ${MIRSERVER_INCLUDE_DIRS}
     ${MIRRENDERERGLDEV_INCLUDE_DIRS}
     ${MIRTEST_INCLUDE_DIRS}
diff --git a/tests/framework/mock_task_controller.cpp b/tests/framework/mock_task_controller.cpp
index e39606e5..3d5b226a 100644
--- a/tests/framework/mock_task_controller.cpp
+++ b/tests/framework/mock_task_controller.cpp
@@ -20,7 +20,7 @@
 namespace qtmir
 {
 
-MockTaskController::MockTaskController(std::shared_ptr<qtmir::PromptSessionManager> promptSessionManager, QObject *parent)
+MockTaskController::MockTaskController(std::shared_ptr<miroil::PromptSessionManager> promptSessionManager, QObject *parent)
     : TaskController(promptSessionManager, parent)
 {
     using namespace ::testing;
diff --git a/tests/framework/mock_task_controller.h b/tests/framework/mock_task_controller.h
index 1be47fb6..4ee983a9 100644
--- a/tests/framework/mock_task_controller.h
+++ b/tests/framework/mock_task_controller.h
@@ -28,7 +28,7 @@ namespace qtmir
 {
 struct MockTaskController : public qtmir::TaskController
 {
-    MockTaskController(std::shared_ptr<qtmir::PromptSessionManager> promptSessionManager, QObject *parent = nullptr);
+    MockTaskController(std::shared_ptr<miroil::PromptSessionManager> promptSessionManager, QObject *parent = nullptr);
     virtual ~MockTaskController();
 
     MOCK_METHOD2(appIdHasProcessId, bool(const QString&, pid_t));
diff --git a/tests/framework/qtmir_test.h b/tests/framework/qtmir_test.h
index 211561a1..bf1d3c55 100644
--- a/tests/framework/qtmir_test.h
+++ b/tests/framework/qtmir_test.h
@@ -28,7 +28,7 @@
 #include <QtMir/Application/session_interface.h>
 #include <QtMir/Application/sharedwakelock.h>
 #include <QtMir/Application/proc_info.h>
-#include "promptsessionmanager.h"
+#include <miroil/prompt_session_manager.h>
 
 #include "mock_proc_info.h"
 #include "mock_mir_session.h"
@@ -70,7 +70,7 @@ public:
     testing::NiceMock<MockSharedWakelock> sharedWakelock;
     testing::NiceMock<MockSettings> settings;
     std::shared_ptr<StubPromptSessionManager> stubPromptSessionManager{std::make_shared<StubPromptSessionManager>()};
-    std::shared_ptr<qtmir::PromptSessionManager> promptSessionManager{std::make_shared<qtmir::PromptSessionManager>(stubPromptSessionManager)};
+    std::shared_ptr<miroil::PromptSessionManager> promptSessionManager{std::make_shared<miroil::PromptSessionManager>(stubPromptSessionManager)};
     std::shared_ptr<StubPersistentSurfaceStore> persistentSurfaceStore;
 
     QSharedPointer<qtmir::TaskController> taskControllerSharedPointer{new testing::NiceMock<qtmir::MockTaskController>(promptSessionManager)};
diff --git a/tests/mirserver/CMakeLists.txt b/tests/mirserver/CMakeLists.txt
index a6959951..a608be89 100644
--- a/tests/mirserver/CMakeLists.txt
+++ b/tests/mirserver/CMakeLists.txt
@@ -1,5 +1,6 @@
 add_subdirectory(EventBuilder)
 add_subdirectory(QtEventFeeder)
+add_subdirectory(URLBuilderDispatcher)
 add_subdirectory(Screen)
 add_subdirectory(ScreensModel)
 add_subdirectory(miral)
diff --git a/tests/mirserver/EventBuilder/CMakeLists.txt b/tests/mirserver/EventBuilder/CMakeLists.txt
index a0c9b66e..1cbe77fc 100644
--- a/tests/mirserver/EventBuilder/CMakeLists.txt
+++ b/tests/mirserver/EventBuilder/CMakeLists.txt
@@ -6,11 +6,13 @@ set(
 include_directories(
   ${CMAKE_SOURCE_DIR}/src/platforms/mirserver
   ${CMAKE_SOURCE_DIR}/src/common
+  ${CMAKE_SOURCE_DIR}/src/platforms/mirserver/miroil/include
 )
 
 include_directories(
   SYSTEM
   ${MIRSERVER_INCLUDE_DIRS}
+  ${MIRAL_INCLUDE_DIRS}
 )
 
 add_executable(EventBuilderTest ${EVENT_BUILDER_TEST_SOURCES})
@@ -20,6 +22,7 @@ target_link_libraries(
   qtmirserver
   ${GTEST_BOTH_LIBRARIES}
   ${GMOCK_LIBRARIES}
+  ${MIROIL_LIBRARIES}
 )
 
 add_test(EventBuilder, EventBuilderTest)
diff --git a/tests/mirserver/ScreensModel/CMakeLists.txt b/tests/mirserver/ScreensModel/CMakeLists.txt
index a5ddfc32..bf3a69e5 100644
--- a/tests/mirserver/ScreensModel/CMakeLists.txt
+++ b/tests/mirserver/ScreensModel/CMakeLists.txt
@@ -11,12 +11,14 @@ include_directories(
   ${CMAKE_SOURCE_DIR}/include
   ${CMAKE_SOURCE_DIR}/tests/framework
   ${CMAKE_SOURCE_DIR}/src/platforms/mirserver
+  ${CMAKE_SOURCE_DIR}/src/platforms/mirserver/miroil/include
   ${CMAKE_SOURCE_DIR}/src/common
 )
 
 include_directories(
   SYSTEM
   ${Qt5Gui_PRIVATE_INCLUDE_DIRS}
+  ${MIROIL_INCLUDE_DIRS}
   ${MIRSERVER_INCLUDE_DIRS}
   ${MIRRENDERERGLDEV_INCLUDE_DIRS}
   ${MIRTEST_INCLUDE_DIRS}
diff --git a/tests/mirserver/ScreensModel/stub_display.h b/tests/mirserver/ScreensModel/stub_display.h
index 4914ac55..664d9a08 100644
--- a/tests/mirserver/ScreensModel/stub_display.h
+++ b/tests/mirserver/ScreensModel/stub_display.h
@@ -22,7 +22,7 @@
 namespace mg = mir::graphics; // Bug lp:1614983
 #include <mir/test/doubles/mock_display_configuration.h>
 
-#include <mir/compositor/display_listener.h>
+#include <miroil/display_listener_wrapper.h>
 
 namespace geom = mir::geometry;
 
@@ -96,8 +96,11 @@ private:
     std::vector<MockGLDisplayBuffer*> m_displayBuffers;
 };
 
-class StubDisplayListener : public mir::compositor::DisplayListener
+class StubDisplayListener : public miroil::DisplayListenerWrapper
 {
+public:
+    StubDisplayListener(): DisplayListenerWrapper(nullptr) {};
+
     void add_display(mir::geometry::Rectangle const& /*area*/) override {};
 
     void remove_display(mir::geometry::Rectangle const& /*area*/) override {};
diff --git a/tests/mirserver/ScreensModel/testable_screensmodel.h b/tests/mirserver/ScreensModel/testable_screensmodel.h
index 6829dcd4..25e269cb 100644
--- a/tests/mirserver/ScreensModel/testable_screensmodel.h
+++ b/tests/mirserver/ScreensModel/testable_screensmodel.h
@@ -29,7 +29,7 @@ public:
 
     void do_init(const std::shared_ptr<mir::graphics::Display> &display,
                  const std::shared_ptr<QtCompositor> &compositor,
-                 const std::shared_ptr<mir::compositor::DisplayListener> &displayListener)
+                 const std::shared_ptr<miroil::DisplayListenerWrapper> & displayListener)
     {
         init(display, compositor, displayListener);
     }
diff --git a/tests/mirserver/URLBuilderDispatcher/CMakeLists.txt b/tests/mirserver/URLBuilderDispatcher/CMakeLists.txt
new file mode 100644
index 00000000..93dca62f
--- /dev/null
+++ b/tests/mirserver/URLBuilderDispatcher/CMakeLists.txt
@@ -0,0 +1,30 @@
+set(
+  URLBUILDERDISPATCHER_TEST_RESOURCES
+  urlbuilderdispatcher_test.cpp
+)
+
+include_directories(
+  ${CMAKE_SOURCE_DIR}/tests/framework
+  ${CMAKE_SOURCE_DIR}/src/platforms/mirserver
+  ${CMAKE_SOURCE_DIR}/src/common
+)
+
+include_directories(
+  SYSTEM
+  ${QT5PLATFORM_SUPPORT_INCLUDE_DIRS}
+  ${Qt5Gui_PRIVATE_INCLUDE_DIRS}
+  ${MIRSERVER_INCLUDE_DIRS}
+)
+
+add_executable(URLBuilderDispatcherTest ${URLBUILDERDISPATCHER_TEST_RESOURCES})
+
+target_link_libraries(
+  URLBuilderDispatcherTest
+  qtmirserver
+
+  ${QT5PLATFORMSUPPORT_LIBS}
+  ${GTEST_BOTH_LIBRARIES}
+  ${GMOCK_LIBRARIES}
+)
+
+add_test(URLBuilderDispatcher, URLBuilderDispatcherTest)
diff --git a/src/platforms/mirserver/mircursorimages.h b/tests/mirserver/URLBuilderDispatcher/mock_services.h
similarity index 62%
rename from src/platforms/mirserver/mircursorimages.h
rename to tests/mirserver/URLBuilderDispatcher/mock_services.h
index 295b1e27..a04191b0 100644
--- a/src/platforms/mirserver/mircursorimages.h
+++ b/tests/mirserver/URLBuilderDispatcher/mock_services.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2015 Canonical, Ltd.
+ * Copyright (C) 2020 UBports Foundation
  *
  * This program is free software: you can redistribute it and/or modify it under
  * the terms of the GNU Lesser General Public License version 3, as published by
@@ -14,20 +14,19 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-#ifndef QTMIR_MIRCURSORIMAGES_H_
-#define QTMIR_MIRCURSORIMAGES_H_
+#pragma once
 
-#include <mir/input/cursor_images.h>
+#include "gmock/gmock.h"
 
-namespace qtmir {
+#include <qpa/qplatformservices.h>
+#include <QUrl>
 
-class MirCursorImages : public mir::input::CursorImages
-{
+class MockServices: public QPlatformServices {
 public:
-    std::shared_ptr<mir::graphics::CursorImage> image(const std::string &cursor_name,
-            const mir::geometry::Size &size) override;
-};
+    ~MockServices() {};
 
-}
+    MOCK_METHOD1(openUrl, bool(const QUrl &url));
+    MOCK_METHOD1(openDocument, bool(const QUrl &url));
 
-#endif // QTMIR_MIRCURSORIMAGES_H_
+    inline QByteArray desktopEnvironment() const override { return "MockQtMirServices"; }
+};
diff --git a/tests/mirserver/URLBuilderDispatcher/urlbuilderdispatcher_test.cpp b/tests/mirserver/URLBuilderDispatcher/urlbuilderdispatcher_test.cpp
new file mode 100644
index 00000000..9b7db72e
--- /dev/null
+++ b/tests/mirserver/URLBuilderDispatcher/urlbuilderdispatcher_test.cpp
@@ -0,0 +1,115 @@
+/*
+ * Copyright (C) 2020 UBports Foundation
+ *
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 3, as published by
+ * the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
+ * SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <gmock/gmock.h>
+#include <gtest/gtest.h>
+
+#include "urlbuilderdispatcher.h"
+#include "mock_services.h"
+
+#include <QUrl>
+
+using namespace ::testing;
+
+class URLBuilderDispatcherTest : public ::testing::Test
+{
+};
+
+TEST_F(URLBuilderDispatcherTest, SinglePartURL)
+{
+    auto services = std::make_shared<MockServices>();
+    auto urlbuilder = qtmir::URLBuilderDispatcher{services};
+
+    EXPECT_CALL(*services, openUrl(QUrl("url://url"))).Times(1);
+    urlbuilder.urlInput(0, "url://url");
+}
+
+// Ensure that multiple single-part URLs are dispatched
+TEST_F(URLBuilderDispatcherTest, MultiSinglePart)
+{
+    auto services = std::make_shared<MockServices>();
+    auto urlbuilder = qtmir::URLBuilderDispatcher{services};
+
+    EXPECT_CALL(*services, openUrl(QUrl("url://url"))).Times(1);
+    urlbuilder.urlInput(0, "url://url");
+
+    EXPECT_CALL(*services, openUrl(QUrl("url://my-new-neat-url"))).Times(1);
+    urlbuilder.urlInput(0, "url://my-new-neat-url");
+}
+
+// Ensure that a single multi-part URL is dispatched
+TEST_F(URLBuilderDispatcherTest, MultiPartURL)
+{
+    auto services = std::make_shared<MockServices>();
+    auto urlbuilder = qtmir::URLBuilderDispatcher{services};
+
+    EXPECT_CALL(*services, openUrl(QUrl("url://url-that-continues"))).Times(1);
+    urlbuilder.urlInput(2, "url://url");
+    urlbuilder.urlInput(1, "-that");
+    urlbuilder.urlInput(0, "-continues");
+}
+
+// Ensure that a single URL with percent encoding is dispatched
+TEST_F(URLBuilderDispatcherTest, PercentEncoding)
+{
+    auto services = std::make_shared<MockServices>();
+    auto urlbuilder = qtmir::URLBuilderDispatcher{services};
+
+    EXPECT_CALL(*services, openUrl(QUrl("url://url%20-that-%26going"))).Times(1);
+    urlbuilder.urlInput(2, "url://url%20");
+    urlbuilder.urlInput(1, "-that");
+    urlbuilder.urlInput(0, "%26going");
+}
+
+// Ensure that multiple multi-part URLs are dispatched
+TEST_F(URLBuilderDispatcherTest, MultiMultiPart)
+{
+    auto services = std::make_shared<MockServices>();
+    auto urlbuilder = qtmir::URLBuilderDispatcher{services};
+
+    EXPECT_CALL(*services, openUrl(QUrl("url://url-that-continues"))).Times(1);
+    urlbuilder.urlInput(2, "url://url");
+    urlbuilder.urlInput(1, "-that");
+    urlbuilder.urlInput(0, "-continues");
+
+    EXPECT_CALL(*services, openUrl(QUrl("url://this-is-a-url"))).Times(1);
+    urlbuilder.urlInput(2, "url://this-is");
+    urlbuilder.urlInput(1, "-a");
+    urlbuilder.urlInput(0, "-url");
+}
+
+// Ensure that multiple single or multi-part URLs are dispatched
+TEST_F(URLBuilderDispatcherTest, ManyURLs)
+{
+    auto services = std::make_shared<MockServices>();
+    auto urlbuilder = qtmir::URLBuilderDispatcher{services};
+
+    EXPECT_CALL(*services, openUrl(QUrl("url://url-that-continues"))).Times(1);
+    urlbuilder.urlInput(2, "url://url");
+    urlbuilder.urlInput(1, "-that");
+    urlbuilder.urlInput(0, "-continues");
+
+    EXPECT_CALL(*services, openUrl(QUrl("url://url"))).Times(1);
+    urlbuilder.urlInput(0, "url://url");
+
+    EXPECT_CALL(*services, openUrl(QUrl("url://this-is-a-url"))).Times(1);
+    urlbuilder.urlInput(2, "url://this-is");
+    urlbuilder.urlInput(1, "-a");
+    urlbuilder.urlInput(0, "-url");
+
+    EXPECT_CALL(*services, openUrl(QUrl("url://my-new-neat-url"))).Times(1);
+    urlbuilder.urlInput(0, "url://my-new-neat-url");
+}
diff --git a/tests/mirserver/miral/CMakeLists.txt b/tests/mirserver/miral/CMakeLists.txt
index 90ce08e8..202e9d9e 100644
--- a/tests/mirserver/miral/CMakeLists.txt
+++ b/tests/mirserver/miral/CMakeLists.txt
@@ -4,7 +4,8 @@ set(
 )
 
 include_directories(
-    ${CMAKE_SOURCE_DIR}/include
+  ${CMAKE_SOURCE_DIR}/include
+  ${MIROIL_INCLUDE_DIRS}
 )
 
 add_executable(MirALTests ${MIRAL_TEST_SOURCES})
@@ -13,6 +14,7 @@ target_link_libraries(MirALTests
   qtmirserver
   ${GTEST_BOTH_LIBRARIES}
   ${GMOCK_LIBRARIES}
+  ${MIROIL_LDFLAGS}
 )
 
 add_test(MirAL, MirALTests)
diff --git a/tests/mirserver/miral/edid_test.cpp b/tests/mirserver/miral/edid_test.cpp
index 03f83d21..c303a1ac 100644
--- a/tests/mirserver/miral/edid_test.cpp
+++ b/tests/mirserver/miral/edid_test.cpp
@@ -18,9 +18,7 @@
 #include <gtest/gtest.h>
 #include <numeric>
 
-#include "qtmir/miral/edid.h"
-
-using namespace miral;
+#include <miroil/edid.h>
 
 using TestDataParamType =
     std::tuple<std::vector<uint8_t>, std::string, std::string, uint16_t, uint32_t>;
@@ -74,7 +72,7 @@ class EdidTest :
 
 TEST(EdidTest, Construct)
 {
-    Edid edid;
+    miroil::Edid edid;
     EXPECT_EQ(edid.vendor, "");
     EXPECT_EQ(edid.product_code, 0);
     EXPECT_EQ(edid.serial_number, uint32_t(0));
@@ -82,7 +80,7 @@ TEST(EdidTest, Construct)
 
     char zero_array[13] = {0};
     for (int i = 0; i < 4; i++) {
-        EXPECT_EQ(edid.descriptors[i].type, Edid::Descriptor::Type::undefined);
+        EXPECT_EQ(edid.descriptors[i].type, miroil::Edid::Descriptor::Type::undefined);
 
         auto& value = edid.descriptors[i].value;
         EXPECT_TRUE(std::equal(std::begin(value.monitor_name), std::end(value.monitor_name), std::begin(zero_array)));
@@ -98,7 +96,7 @@ TEST_P(EdidTest, Test_InvalidChecksum)
     std::vector<uint8_t> invalidChecksum{data};
     invalidChecksum[8] = invalidChecksum[8]+1;
 
-    Edid edid;
+    miroil::Edid edid;
     try {
         edid.parse_data(invalidChecksum);
     } catch(std::runtime_error const& err) {
@@ -118,7 +116,7 @@ TEST_P(EdidTest, Test_InvalidHeader)
     uint8_t checksum = std::accumulate(invalidHeader.begin(), invalidHeader.end()-1, 0);
     invalidHeader[invalidHeader.size()-1] = (uint8_t)(~checksum+1);
 
-    Edid edid;
+    miroil::Edid edid;
     try {
         edid.parse_data(invalidHeader);
     } catch(std::runtime_error const& err) {
@@ -132,7 +130,7 @@ TEST_P(EdidTest, Test_Valid)
 {
     const std::vector<uint8_t>& data = std::get<0>(GetParam());
 
-    Edid edid;
+    miroil::Edid edid;
     EXPECT_NO_THROW(edid.parse_data(data));
 }
 
@@ -144,7 +142,7 @@ TEST_P(EdidTest, CheckData)
     const uint16_t product_code = std::get<3>(GetParam());
     const uint32_t serial_number = std::get<4>(GetParam());
 
-    Edid edid;
+    miroil::Edid edid;
     EXPECT_NO_THROW(edid.parse_data(data));
 
     ASSERT_EQ(edid.vendor, vendor);
@@ -154,7 +152,7 @@ TEST_P(EdidTest, CheckData)
     if (monitor_name != "") {
         bool found_monitor_name = false;
         for (int i = 0; i < 4; i++) {
-            if (edid.descriptors[i].type == Edid::Descriptor::Type::monitor_name ) {
+            if (edid.descriptors[i].type == miroil::Edid::Descriptor::Type::monitor_name ) {
                 found_monitor_name = true;
                 ASSERT_EQ(std::string(&edid.descriptors[i].value.monitor_name[0]), monitor_name);
             }
diff --git a/tests/modules/Application/CMakeLists.txt b/tests/modules/Application/CMakeLists.txt
index 545ca57b..27950db6 100644
--- a/tests/modules/Application/CMakeLists.txt
+++ b/tests/modules/Application/CMakeLists.txt
@@ -5,6 +5,7 @@ set(
 
 include_directories(
   ${CMAKE_SOURCE_DIR}/src/platforms/mirserver
+  ${CMAKE_SOURCE_DIR}/src/platforms/mirserver/miroil/include
   ${CMAKE_SOURCE_DIR}/src/modules
   ${CMAKE_SOURCE_DIR}/tests/framework
 )
@@ -12,6 +13,7 @@ include_directories(
 include_directories(
   SYSTEM
   ${MIRAL_INCLUDE_DIRS}
+  ${MIROIL_INCLUDE_DIRS}
   ${MIRSERVER_INCLUDE_DIRS}
   ${Qt5Core_INCLUDE_DIRS}
   ${Qt5Gui_INCLUDE_DIRS}
diff --git a/tests/modules/ApplicationManager/CMakeLists.txt b/tests/modules/ApplicationManager/CMakeLists.txt
index d028f37f..6cd39b5a 100644
--- a/tests/modules/ApplicationManager/CMakeLists.txt
+++ b/tests/modules/ApplicationManager/CMakeLists.txt
@@ -6,6 +6,7 @@ set(
 
 include_directories(
   ${CMAKE_SOURCE_DIR}/src/platforms/mirserver
+  ${CMAKE_SOURCE_DIR}/src/platforms/mirserver/miroil/include
   ${CMAKE_SOURCE_DIR}/src/modules
   ${CMAKE_SOURCE_DIR}/tests/framework
 )
@@ -14,6 +15,7 @@ include_directories(
   SYSTEM
   ${APPLICATION_API_INCLUDE_DIRS}
   ${MIRAL_INCLUDE_DIRS}
+  ${MIROIL_INCLUDE_DIRS}
   ${MIRSERVER_INCLUDE_DIRS}
 )
 
diff --git a/tests/modules/Session/CMakeLists.txt b/tests/modules/Session/CMakeLists.txt
index 0c8c3236..48ee1776 100644
--- a/tests/modules/Session/CMakeLists.txt
+++ b/tests/modules/Session/CMakeLists.txt
@@ -7,6 +7,7 @@ set(
 
 include_directories(
   ${CMAKE_SOURCE_DIR}/src/platforms/mirserver
+  ${CMAKE_SOURCE_DIR}/src/platforms/mirserver/miroil/include
   ${CMAKE_SOURCE_DIR}/src/modules
   ${CMAKE_SOURCE_DIR}/tests/framework
 )
@@ -15,6 +16,7 @@ include_directories(
   SYSTEM
   ${APPLICATION_API_INCLUDE_DIRS}
   ${MIRAL_INCLUDE_DIRS}
+  ${MIROIL_INCLUDE_DIRS}
   ${MIRSERVER_INCLUDE_DIRS}
 )
 
diff --git a/tests/modules/Session/session_test.cpp b/tests/modules/Session/session_test.cpp
index 3aa611b7..34611863 100644
--- a/tests/modules/Session/session_test.cpp
+++ b/tests/modules/Session/session_test.cpp
@@ -287,7 +287,7 @@ TEST_F(SessionTests, SessionStopsWhileSuspendingDoesntSuspend)
     {
     public:
         SessionTestClass(const std::shared_ptr<mir::scene::Session>& session,
-                         const std::shared_ptr<qtmir::PromptSessionManager>& promptSessionManager)
+                         const std::shared_ptr<miroil::PromptSessionManager>& promptSessionManager)
             : Session(session, promptSessionManager) {}
 
         using Session::m_suspendTimer;
diff --git a/tests/modules/SurfaceManager/CMakeLists.txt b/tests/modules/SurfaceManager/CMakeLists.txt
index 2cc203dc..7f58dd12 100644
--- a/tests/modules/SurfaceManager/CMakeLists.txt
+++ b/tests/modules/SurfaceManager/CMakeLists.txt
@@ -7,6 +7,7 @@ set(
 include_directories(
   ${CMAKE_SOURCE_DIR}/src/common
   ${CMAKE_SOURCE_DIR}/src/platforms/mirserver
+  ${CMAKE_SOURCE_DIR}/src/platforms/mirserver/miroil/include
   ${CMAKE_SOURCE_DIR}/src/modules
   ${CMAKE_SOURCE_DIR}/tests/framework
 )
@@ -14,7 +15,6 @@ include_directories(
 include_directories(
   SYSTEM
   ${APPLICATION_API_INCLUDE_DIRS}
-  ${MIRAL_INCLUDE_DIRS}
   ${MIRTEST_INCLUDE_DIRS}
 )
 
diff --git a/tests/modules/WindowManager/CMakeLists.txt b/tests/modules/WindowManager/CMakeLists.txt
index 4e4c8085..655e6814 100644
--- a/tests/modules/WindowManager/CMakeLists.txt
+++ b/tests/modules/WindowManager/CMakeLists.txt
@@ -11,6 +11,7 @@ include_directories(
   ${CMAKE_SOURCE_DIR}/src/common
   ${CMAKE_SOURCE_DIR}/src/modules
   ${CMAKE_SOURCE_DIR}/src/platforms/mirserver
+  ${CMAKE_SOURCE_DIR}/src/platforms/mirserver/miroil/include
   ${CMAKE_SOURCE_DIR}/tests/framework
 )
 
@@ -18,6 +19,7 @@ include_directories(
   SYSTEM
   ${MIRAL_INCLUDE_DIRS}
   ${MIRTEST_INCLUDE_DIRS}
+  ${MIROIL_INCLUDE_DIRS}
   ${MIRSERVER_INCLUDE_DIRS}
   ${Qt5Quick_PRIVATE_INCLUDE_DIRS}
 )
-- 
2.43.0


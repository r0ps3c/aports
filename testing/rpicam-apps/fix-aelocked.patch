diff --git a/core/frame_info.hpp b/core/frame_info.hpp
index f98fcb2..eb966c6 100644
--- a/core/frame_info.hpp
+++ b/core/frame_info.hpp
@@ -17,7 +17,7 @@
 struct FrameInfo
 {
 	FrameInfo(const CompletedRequestPtr &completed_request)
-		: exposure_time(0.0), digital_gain(0.0), colour_gains({ { 0.0f, 0.0f } }), focus(0.0), aelock(false),
+		: exposure_time(0.0), digital_gain(0.0), colour_gains({ { 0.0f, 0.0f } }), focus(0.0), ae_state(0),
 		  lens_position(-1.0), af_state(0)
 	{
 		const libcamera::ControlList &ctrls = completed_request->metadata;
@@ -47,9 +47,9 @@ struct FrameInfo
 		if (fom)
 			focus = *fom;
 
-		auto ae = ctrls.get(libcamera::controls::AeLocked);
+		auto ae = ctrls.get(libcamera::controls::AeState);
 		if (ae)
-			aelock = *ae;
+			ae_state = *ae;
 
 		auto lp = ctrls.get(libcamera::controls::LensPosition);
 		if (lp)
@@ -89,7 +89,10 @@ struct FrameInfo
 				else if (t == "%focus")
 					value << focus;
 				else if (t == "%aelock")
-					value << aelock;
+					// Convert AeState to previous boolean aelock behavior
+					// According to documentation, AeStateConverged (2) means the AE algorithm
+					// has converged to a stable value, which is equivalent to "locked"
+					value << (ae_state == libcamera::controls::AeStateConverged ? "true" : "false");
 				else if (t == "%lp")
 					value << lens_position;
 				else if (t == "%afstate")
@@ -124,7 +127,7 @@ struct FrameInfo
 	std::array<float, 2> colour_gains;
 	float focus;
 	float fps;
-	bool aelock;
+	int ae_state; // Using int instead of bool to store AeState enumeration value
 	float lens_position;
 	int af_state;
 

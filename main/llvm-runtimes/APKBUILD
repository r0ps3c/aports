# Contributor: Eric Molitor <eric@molitor.org>
# Contributor: Jakub Jirutka <jakub@jirutka.cz>
# Contributor: Rasmus Thomsen <oss@cogitri.dev>
# Maintainer: psykose <alice@ayaya.dev>
pkgname=llvm-runtimes
# Note: Update together with llvm.
pkgver=15.0.7
_llvmver=${pkgver%%.*}
pkgrel=2
pkgdesc="LLVM Runtimes"
url="https://llvm.org/"
arch="all"
license="Apache-2.0"
makedepends="
	clang
	cmake
	linux-headers
	llvm$_llvmver-dev
	llvm$_llvmver-static
	python3
	samurai
	"
subpackages="
	libc++:libcxx
	libc++-dev:libcxx_dev
	compiler-rt:rt
	llvm-libunwind:libunwind
	llvm-libunwind-static:libunwind_static
	llvm-libunwind-dev:libunwind_dev
	"
source="https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver/llvm-project-$pkgver.src.tar.xz
	armv6-arch.patch.noauto
	compiler-rt-lsan-dtp-offset.patch
	compiler-rt-ppc-fixes.patch
	compiler-rt-sanitizer-supported-arch.patch
	compiler-rt-scudo-standalone.patch
	libcxx-musl.patch
	libcxx-ppc.patch
	libunwind-link-libssp.patch
	"
builddir="$srcdir/llvm-project-$pkgver.src"
options="!check"

case "$CARCH" in
# Sanitizers are broken on other arches.
# Keep in sync with compiler-rt-sanitizer-supported-arch.patch.
aarch64|ppc64le|x86_64)
	_build_sanitizers='ON'
	;;
*)
	_build_sanitizers='OFF'
	;;
esac

case "$CARCH" in
# supported scudo architectures
aarch64|arm*|ppc64le|x86_64|x86)
	_build_scudo='ON'
	# be first to steal files from compiler-rt
	subpackages="scudo-malloc:scudo $subpackages"
	;;
*)
	_build_scudo='OFF'
	;;
esac

prepare() {
	default_prepare

	case "$CARCH" in
	armhf)
		patch -Np1 < "$srcdir"/armv6-arch.patch.noauto
		;;
	esac
}

build() {
	if [ "$CBUILD" != "$CHOST" ]; then
		local crossopts="
			-DCMAKE_SYSTEM_NAME=Linux
			-DCMAKE_HOST_SYSTEM_NAME=Linux
			-DLIBUNWIND_SYSROOT=$CBUILDROOT
			"
	fi

	CC=clang \
	CXX=clang++ \
	CXXFLAGS="$CXXFLAGS -DSCUDO_CAN_USE_PRIMARY64=0" \
	cmake -B build -G Ninja -Wno-dev -S runtimes \
		-DLLVM_ENABLE_RUNTIMES="compiler-rt;libunwind;libcxx;libcxxabi" \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DLIBCXX_HAS_MUSL_LIBC=ON \
		-DLIBUNWIND_HAS_NODEFAULTLIBS_FLAG=OFF \
		-DCOMPILER_RT_INCLUDE_TESTS="$(want_check && echo ON || echo OFF)" \
		-DCOMPILER_RT_BUILD_SANITIZERS=$_build_sanitizers \
		-DCOMPILER_RT_INSTALL_PATH="/usr/lib/clang/$pkgver" \
		-DCOMPILER_RT_BUILD_GWP_ASAN=OFF \
		-DCOMPILER_RT_BUILD_SCUDO_STANDALONE="$_build_scudo" \
		-DCMAKE_VERBOSE_MAKEFILE=ON \
		$crossopts
	cmake --build build
}

package() {
	DESTDIR="$pkgdir" cmake --install build
	rm "$pkgdir"/usr/lib/libc++*.a

	mkdir -p "$pkgdir"/usr/include/mach-o
	cp libunwind/include/*.h "$pkgdir"/usr/include/
	cp libunwind/include/mach-o/*.h "$pkgdir"/usr/include/mach-o/

	case "$CARCH" in
	ppc64le)
		local archname="powerpc64le"
		;;
	arm*)
		local archname="armhf"
		;;
	x86)
		local archname="i386"
		;;
	*)
		local archname="$CARCH"
		;;
	esac

	if [ "$_build_scudo" = "ON" ]; then
		# provide an easier to find name for the scudo standalone allocator,
		# allowing preloading and patchelfind of something in /usr/lib instead of
		# a deep directory tree
		ln -sv /usr/lib/clang/$pkgver/lib/linux/libclang_rt.scudo_standalone-$archname.so \
			"$pkgdir"/usr/lib/libscudo.so
	fi
}

libunwind() {
	pkgdesc="LLVM libunwind library"
	depends="!libunwind-dev"

	amove usr/lib/libunwind.so.*
}

libunwind_static() {
	pkgdesc="LLVM libunwind library (static)"

	amove usr/lib/libunwind.a
}

libunwind_dev() {
	pkgdesc="LLVM libunwind library (development files)"

	amove usr/lib/libunwind.so
	amove usr/include
}

scudo() {
	pkgdesc="Standalone Scudo hardened allocator"

	amove usr/lib/libscudo.so
	# avoid moving _standalone_cxx
	amove usr/lib/clang/$pkgver/lib/linux/libclang_rt.scudo_standalone-*.so
}

rt() {
	pkgdesc="LLVM compiler-rt runtime libraries"

	amove usr/lib/clang/$pkgver

	if [ "$_build_scudo" = "ON" ]; then
		# it contains some rt files- the full compiler-rt set should also pull scudo
		depends="scudo-malloc=$pkgver-r$pkgrel"
	fi
}

libcxx() {
	pkgdesc="LLVM libc++ library"

	amove usr/lib/libc++*.so.*
}

libcxx_dev() {
	pkgdesc="LLVM libc++ library (development files)"

	amove usr/lib/libc++*.so
	amove usr/include/c++
}

sha512sums="
4836d3603f32e8e54434cbfa8ef33d9d473ac5dc20ebf9c67132653c73f4524931abd1084655eaee5f20bcfcb91bcc4bbc5c4a0b603ad0c9029c556e14dc4c52  llvm-project-15.0.7.src.tar.xz
c0be39091ab603b980f3c0e9f272946fd47770698b71aba335d61002bc7a0f3fbb21a74150a3208c09f8e47e6d33539dd73504d9ba59d2b7eea0a0b65feb3ef3  armv6-arch.patch.noauto
7c2cbd095b863f735842aaa8f0daecbf0282200fc58f1394139cee30d53c4a738757e38cbf0ec734398ee827e8a47314592bd7dc9768ef5c3664db682680e5a1  compiler-rt-lsan-dtp-offset.patch
22b6d29fd75e7ca92a9c3584cbc38a8ca3f7fb0dcc4c86235e543b75241883d0258e0516df32f4d41b00739c6d9e8c5403538f9674e704cab43fe78bd1721980  compiler-rt-ppc-fixes.patch
448ad39865b1a86d69c80b6626500e16509834787944f0b402b3eb3b2d6d1c034073b4004b7e1eee6afdc21b553945e65943b79426105503012c4dfac1ee2e7b  compiler-rt-sanitizer-supported-arch.patch
3148c7fedeed5d9c9af364604e1805d8a8a937488e610d6e4a8ee14f423333ec8ac50c445ae1450763b55a1d4742e8af72d76f2fd6b8204e127d30a818a97a04  compiler-rt-scudo-standalone.patch
e06a4ebc9ed4258729320d3d67fa0f7c9962c2435e713edda2fcbd9dca93bf85072b99ae4bdaa848254ace8423c7e20b9f829a3238eb4a4f5c5758ef4ee379f6  libcxx-musl.patch
fe6336bc73b3ee3aa6665b4a2a53f7360a1b23097002bb396c8515c4343e7bf8e84728f769aa033400e386c2c80a538c970f16719518040f4fea0fd667af523a  libcxx-ppc.patch
e601d0657d61cf080c9a03fd0139f9cae85339ba7f997f61283c1ba3b9fb48479cca875db44b64ee8b48a7d61a18a70d7cd123500f72966770cf5312b1aca034  libunwind-link-libssp.patch
"

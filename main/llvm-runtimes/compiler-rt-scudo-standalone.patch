allows us to build the standalone scudo via a cmake flag instead of by hand or
needing all the sanitizers.

the additional not guard prevents double-inclusion if regular sanitizers are enabled
diff --git a/compiler-rt/cmake/config-ix.cmake b/compiler-rt/cmake/config-ix.cmake
index 5f51befc1..3583ec373 100644
--- a/compiler-rt/cmake/config-ix.cmake
+++ b/compiler-rt/cmake/config-ix.cmake
@@ -833,7 +833,7 @@ if (SCUDO_STANDALONE_SUPPORTED_ARCH AND
     COMPILER_RT_HAS_AUXV)
   set(COMPILER_RT_HAS_SCUDO_STANDALONE TRUE)
 else()
-  set(COMPILER_RT_HAS_SCUDO_STANDALONE FALSE)
+  set(COMPILER_RT_HAS_SCUDO_STANDALONE TRUE)
 endif()
 
 if (COMPILER_RT_HAS_SANITIZER_COMMON AND XRAY_SUPPORTED_ARCH AND
diff --git a/compiler-rt/lib/CMakeLists.txt b/compiler-rt/lib/CMakeLists.txt
index a9a5b1c10..713d1d55d 100644
--- a/compiler-rt/lib/CMakeLists.txt
+++ b/compiler-rt/lib/CMakeLists.txt
@@ -71,6 +71,10 @@ if(COMPILER_RT_BUILD_ORC)
   compiler_rt_build_runtime(orc)
 endif()
 
+if(BUILD_SCUDO_STANDALONE AND NOT COMPILER_RT_BUILD_SANITIZERS)
+  add_subdirectory(scudo/standalone)
+endif()
+
 # It doesn't normally make sense to build runtimes when a sanitizer is enabled,
 # so we don't add_subdirectory the runtimes in that case. However, the opposite
 # is true for fuzzers that exercise parts of the runtime. So we add the fuzzer

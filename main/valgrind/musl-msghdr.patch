Patch-Source: https://sourceware.org/git/?p=valgrind.git;a=commitdiff_plain;h=7136cd987635e8c323fc7da35c8c9f0d3ba25ebd;hp=a6101db6920d12c4d61f1ace19d931670b9d8141
--
From: Paul Floyd <pjfloyd@wanadoo.fr>
Date: Tue, 21 Feb 2023 22:05:22 +0000 (+0100)
Subject: musl regtest : fix warnings and badly initialized struct msghdr
X-Git-Url: https://sourceware.org/git/?p=valgrind.git;a=commitdiff_plain;h=7136cd987635e8c323fc7da35c8c9f0d3ba25ebd;hp=a6101db6920d12c4d61f1ace19d931670b9d8141

musl regtest : fix warnings and badly initialized struct msghdr
---

diff --git a/memcheck/tests/badpoll.c b/memcheck/tests/badpoll.c
index 61b8d31bb1..beae44aa31 100644
--- a/memcheck/tests/badpoll.c
+++ b/memcheck/tests/badpoll.c
@@ -1,6 +1,6 @@
 #include <assert.h>
 #include <stdlib.h>
-#include <sys/poll.h>
+#include <poll.h>
 
 // At one point, poll()'s checking was not done accurately.  This test
 // exposes this -- previously Memcheck only found one error, now if finds
diff --git a/memcheck/tests/linux/syscalls-2007.c b/memcheck/tests/linux/syscalls-2007.c
index 54946237eb..b91df82a5e 100644
--- a/memcheck/tests/linux/syscalls-2007.c
+++ b/memcheck/tests/linux/syscalls-2007.c
@@ -20,9 +20,7 @@
 #if defined(HAVE_SYS_EVENTFD_H)
 #include <sys/eventfd.h>
 #endif
-#if defined(HAVE_SYS_POLL_H)
-#include <sys/poll.h>
-#endif
+#include <poll.h>
 #if defined(HAVE_SYS_SIGNALFD_H)
 #include <sys/signalfd.h>
 #endif
diff --git a/memcheck/tests/linux/timerfd-syscall.c b/memcheck/tests/linux/timerfd-syscall.c
index 4af622cc48..61d75b5545 100644
--- a/memcheck/tests/linux/timerfd-syscall.c
+++ b/memcheck/tests/linux/timerfd-syscall.c
@@ -35,9 +35,7 @@
 #include <string.h>
 #include <time.h>
 #include <unistd.h>
-#if defined(HAVE_SYS_SIGNAL_H)
-#include <sys/signal.h>
-#endif
+#include <signal.h>
 #if defined(HAVE_SYS_SYSCALL_H)
 #include <sys/syscall.h>
 #endif
diff --git a/none/tests/fdleak_cmsg.c b/none/tests/fdleak_cmsg.c
index 7927045f5b..d4300bcf2d 100644
--- a/none/tests/fdleak_cmsg.c
+++ b/none/tests/fdleak_cmsg.c
@@ -91,8 +91,18 @@ void client (void)
       struct cmsghdr cm;
       char control[CMSG_SPACE(sizeof(int) * 2)];
    } control_un;
-   struct msghdr msg = { NULL, 0, iov, 1, control_un.control,
-                         sizeof(control_un), 0 };
+   struct msghdr msg;
+   /* this was using brace initialization
+    * but that doesn't work on MSL because of padding fields
+    * C99 designated initializers would be nicer
+    * but I'll just do it the simple way */
+   msg.msg_name = NULL;
+   msg.msg_namelen = 0;
+   msg.msg_iov = iov;
+   msg.msg_iovlen = 1;
+   msg.msg_control = control_un.control;
+   msg.msg_controllen = sizeof(control_un);
+   msg.msg_flags = 0;
    struct cmsghdr *cmsg = &control_un.cm;
    char buf[1024];
 

Patch-Source: https://github.com/lualdap/lualdap/commit/c8afaf82b7d8a5a274fa79ccfa1c7161b8fb0bc5
--
From c8afaf82b7d8a5a274fa79ccfa1c7161b8fb0bc5 Mon Sep 17 00:00:00 2001
From: Cyril Romain <cyril@romain.tf>
Date: Tue, 31 Aug 2021 09:18:49 +0000
Subject: [PATCH] src/lualdap.c: fix search with multiple attrs

Fix segfault in search when using an attrs table with more than one attr
---
 src/lualdap.c  |  5 +++--
 tests/test.lua | 18 ++++++++++++++++++
 2 files changed, 21 insertions(+), 2 deletions(-)

diff --git a/src/lualdap.c b/src/lualdap.c
index 2ad0e6d..2e72237 100644
--- a/src/lualdap.c
+++ b/src/lualdap.c
@@ -776,9 +776,10 @@ static void get_attrs_param (lua_State *L, char *attrs[]) {
 		luaL_checkstack(L, n, NULL);
 		for (i = 0; i < n; i++) {
 			lua_rawgeti (L, -1, i+1); /* push table element */
-			if (lua_isstring (L, -1))
+			if (lua_isstring (L, -1)) {
 				attrs[i] = (char *)lua_tostring (L, -1);
-			else {
+				lua_pop(L, 1);
+			} else {
 				luaL_error (L, LUALDAP_PREFIX"invalid value #%d", i+1);
 			}
 		}
diff --git a/tests/test.lua b/tests/test.lua
index 4d409e4..d13b48a 100755
--- a/tests/test.lua
+++ b/tests/test.lua
@@ -444,6 +444,15 @@ local function count (tab)
 	return counter
 end
 
+local function count_attrs (tab)
+	local counter = 0
+	for dn, entry in LD:search (tab) do
+        for k,v in pairs(entry) do
+            counter = counter + 1
+        end
+	end
+	return counter
+end
 
 ---------------------------------------------------------------------
 -- checking even more advanced search operation.
@@ -469,6 +478,15 @@ describe("even more advanced search operation", function()
 			end
 		end
 	end)
+	it("attrs as string works", function()
+		assert.is_same(1, count { base = BASE, scope = "subtree", filter = filter, attrs = "mail", })
+	end)
+	it("attrs as table works", function()
+		local attrs = {"mail", "homeDirectory", "givenName", "not_in_ldap"}
+		local tab = { base = BASE, scope = "subtree", filter = filter, attrs = attrs }
+		assert.is_same(1, count(tab))
+		assert.is_same(3, count_attrs(tab))
+	end)
 	it("reusing search objects is possible", function()
 		local iter = assert.is_not_nil(LD:search { base = BASE, scope = "base", })
 		assert.is_calleable(iter)

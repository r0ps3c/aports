Patch-Source: https://github.com/mesonbuild/meson/pull/14581
https://gitlab.alpinelinux.org/alpine/aports/-/issues/17162
---
From 13d46c1c25178fddcbbd7c585fde4e52fef7409b Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Fri, 9 May 2025 11:50:02 +0200
Subject: [PATCH 1/4] mconf: remove dead function

This was the pre-refactoring implementation of `-D`, which is now unused.

Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---
 mesonbuild/mconf.py | 3 ---
 1 file changed, 3 deletions(-)

diff --git a/mesonbuild/mconf.py b/mesonbuild/mconf.py
index 416caf1a0e59..fec6c0917237 100644
--- a/mesonbuild/mconf.py
+++ b/mesonbuild/mconf.py
@@ -125,9 +125,6 @@ def __init__(self, build_dir: str):
     def clear_cache(self) -> None:
         self.coredata.clear_cache()
 
-    def set_options(self, options: T.Dict[OptionKey, str]) -> bool:
-        return self.coredata.set_options(options)
-
     def save(self) -> None:
         # Do nothing when using introspection
         if self.default_values_only:

From 90cb6cc6986d4a3c3ba1a37e5fc3527e898ca527 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Fri, 9 May 2025 11:58:53 +0200
Subject: [PATCH 2/4] mconf: extract option processing to
 CoreData.set_from_configure_command

Prepare to reuse the logic in "meson setup --reconfigure".

Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---
 mesonbuild/coredata.py | 7 +++++++
 mesonbuild/mconf.py    | 6 +-----
 2 files changed, 8 insertions(+), 5 deletions(-)

diff --git a/mesonbuild/coredata.py b/mesonbuild/coredata.py
index 90157dfe6d7c..63059bd12ee4 100644
--- a/mesonbuild/coredata.py
+++ b/mesonbuild/coredata.py
@@ -412,6 +412,13 @@ def get_option_for_target(self, target: 'BuildTarget', key: T.Union[str, OptionK
             return option_object.validate_value(override)
         return value
 
+    def set_from_configure_command(self, options: SharedCMDOptions) -> bool:
+        unset_opts = getattr(options, 'unset_opts', [])
+        all_D = options.projectoptions[:]
+        for keystr, valstr in options.cmd_line_options.items():
+            all_D.append(f'{keystr}={valstr}')
+        return self.optstore.set_from_configure_command(all_D, unset_opts)
+
     def set_option(self, key: OptionKey, value, first_invocation: bool = False) -> bool:
         dirty = False
         try:
diff --git a/mesonbuild/mconf.py b/mesonbuild/mconf.py
index fec6c0917237..ec6e58601842 100644
--- a/mesonbuild/mconf.py
+++ b/mesonbuild/mconf.py
@@ -370,11 +370,7 @@ def run_impl(options: CMDOptions, builddir: str) -> int:
 
         save = False
         if has_option_flags(options):
-            unset_opts = getattr(options, 'unset_opts', [])
-            all_D = options.projectoptions[:]
-            for keystr, valstr in options.cmd_line_options.items():
-                all_D.append(f'{keystr}={valstr}')
-            save |= c.coredata.optstore.set_from_configure_command(all_D, unset_opts)
+            save |= c.coredata.set_from_configure_command(options)
             coredata.update_cmd_line_file(builddir, options)
         if options.clearcache:
             c.clear_cache()

From c90440fb2bf52dd92c05c8a3c4da9552451a87be Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Fri, 9 May 2025 11:54:09 +0200
Subject: [PATCH 3/4] msetup: update coredata if options are passed together
 with --reconfigure

This makes "meson setup --reconfigure" behave quite literally the same as
"meson configure" + "meson setup"; except that saving coredata and
cmdline file is delayed until the setup succeeds.

Fixes: #14575
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---
 mesonbuild/msetup.py | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/mesonbuild/msetup.py b/mesonbuild/msetup.py
index 81dd1833004e..c8770fd93de3 100644
--- a/mesonbuild/msetup.py
+++ b/mesonbuild/msetup.py
@@ -180,6 +180,9 @@ def validate_dirs(self) -> T.Tuple[str, str]:
     # See class Backend's 'generate' for comments on capture args and returned dictionary.
     def generate(self, capture: bool = False, vslite_ctx: T.Optional[dict] = None) -> T.Optional[dict]:
         env = environment.Environment(self.source_dir, self.build_dir, self.options)
+        if not env.first_invocation:
+            assert self.options.reconfigure
+            env.coredata.set_from_configure_command(self.options)
         mlog.initialize(env.get_log_dir(), self.options.fatal_warnings)
         if self.options.profile:
             mlog.set_timestamp_start(time.monotonic())

From d3ae6b9f083f47f0c76a950ee53b27e410235cda Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Fri, 9 May 2025 11:44:36 +0200
Subject: [PATCH 4/4] add test case for setting options from reconfigure

Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---
 test cases/common/40 options/meson.build |  3 +--
 unittests/platformagnostictests.py       | 10 ++++++++++
 2 files changed, 11 insertions(+), 2 deletions(-)

diff --git a/test cases/common/40 options/meson.build b/test cases/common/40 options/meson.build
index 3849d54eaeb4..f41265af7cb3 100644
--- a/test cases/common/40 options/meson.build	
+++ b/test cases/common/40 options/meson.build	
@@ -40,8 +40,7 @@ if get_option('integer_opt') != 3
 endif
 
 negint = get_option('neg_int_opt')
-
-if negint != -3 and negint != -10
+if negint not in [-2, -3, -10]
   error('Incorrect value @0@ in negative integer option.'.format(negint))
 endif
 
diff --git a/unittests/platformagnostictests.py b/unittests/platformagnostictests.py
index d6c00787ccbd..c1475c51e491 100644
--- a/unittests/platformagnostictests.py
+++ b/unittests/platformagnostictests.py
@@ -453,6 +453,16 @@ def test_configure_removed_option(self) -> None:
             self.setconf('-Dneg_int_opt=0')
         self.assertIn('Unknown options: ":neg_int_opt"', e.exception.stdout)
 
+    def test_reconfigure_option(self) -> None:
+        testdir = self.copy_srcdir(os.path.join(self.common_test_dir, '40 options'))
+        self.init(testdir)
+        self.assertEqual(self.getconf('neg_int_opt'), -3)
+        with self.assertRaises(subprocess.CalledProcessError) as e:
+            self.init(testdir, extra_args=['--reconfigure', '-Dneg_int_opt=0'])
+        self.assertEqual(self.getconf('neg_int_opt'), -3)
+        self.init(testdir, extra_args=['--reconfigure', '-Dneg_int_opt=-2'])
+        self.assertEqual(self.getconf('neg_int_opt'), -2)
+
     def test_configure_option_changed_constraints(self) -> None:
         """Changing the constraints of an option without reconfiguring should work."""
         testdir = self.copy_srcdir(os.path.join(self.common_test_dir, '40 options'))

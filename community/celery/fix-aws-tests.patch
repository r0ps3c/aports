diff --git a/t/unit/backends/test_s3.py.orig b/t/unit/backends/test_s3.py
index fdea04b32cc..915d16ddf84 100644
--- a/t/unit/backends/test_s3.py.orig
+++ b/t/unit/backends/test_s3.py
@@ -3,7 +3,7 @@ from unittest.mock import patch
 import boto3
 import pytest
 from botocore.exceptions import ClientError
-from moto import mock_s3
+from moto import mock_aws
 
 from celery import states
 from celery.backends.s3 import S3Backend
@@ -84,9 +84,9 @@ class test_S3Backend:
             's3', endpoint_url=endpoint_url)
 
     @pytest.mark.parametrize("key", ['uuid', b'uuid'])
-    @mock_s3
+    @mock_aws
     def test_set_and_get_a_key(self, key):
-        self._mock_s3_resource()
+        self._mock_aws_resource()
 
         self.app.conf.s3_access_key_id = 'somekeyid'
         self.app.conf.s3_secret_access_key = 'somesecret'
@@ -97,9 +97,9 @@ class test_S3Backend:
 
         assert s3_backend.get(key) == 'another_status'
 
-    @mock_s3
+    @mock_aws
     def test_set_and_get_a_result(self):
-        self._mock_s3_resource()
+        self._mock_aws_resource()
 
         self.app.conf.result_serializer = 'pickle'
         self.app.conf.s3_access_key_id = 'somekeyid'
@@ -111,9 +111,9 @@ class test_S3Backend:
         value = s3_backend.get_result('foo')
         assert value == 'baar'
 
-    @mock_s3
+    @mock_aws
     def test_get_a_missing_key(self):
-        self._mock_s3_resource()
+        self._mock_aws_resource()
 
         self.app.conf.s3_access_key_id = 'somekeyid'
         self.app.conf.s3_secret_access_key = 'somesecret'
@@ -141,9 +141,9 @@ class test_S3Backend:
             s3_backend.get('uuidddd')
 
     @pytest.mark.parametrize("key", ['uuid', b'uuid'])
-    @mock_s3
+    @mock_aws
     def test_delete_a_key(self, key):
-        self._mock_s3_resource()
+        self._mock_aws_resource()
 
         self.app.conf.s3_access_key_id = 'somekeyid'
         self.app.conf.s3_secret_access_key = 'somesecret'
@@ -157,9 +157,9 @@ class test_S3Backend:
 
         assert s3_backend.get(key) is None
 
-    @mock_s3
+    @mock_aws
     def test_with_a_non_existing_bucket(self):
-        self._mock_s3_resource()
+        self._mock_aws_resource()
 
         self.app.conf.s3_access_key_id = 'somekeyid'
         self.app.conf.s3_secret_access_key = 'somesecret'
@@ -171,7 +171,7 @@ class test_S3Backend:
                            match=r'.*The specified bucket does not exist'):
             s3_backend._set_with_state('uuid', 'another_status', states.SUCCESS)
 
-    def _mock_s3_resource(self):
+    def _mock_aws_resource(self):
         # Create AWS s3 Bucket for moto.
         session = boto3.Session(
             aws_access_key_id='moto_key_id',

From 412e843e772ad73477bbc85da0be4bea750d3dfb Mon Sep 17 00:00:00 2001
From: Robert Mader <robert.mader@collabora.com>
Date: Fri, 24 Jan 2025 18:38:56 +0100
Subject: [PATCH 1/2] gstreamer: Implement rotation tag support

So we can display videos recorded on phones correctly.
---
 modules/media/gtkgstpaintable.c        | 114 ++++++++++++++++++++++---
 modules/media/gtkgstpaintableprivate.h |   3 +-
 modules/media/gtkgstsink.c             |  31 ++++++-
 modules/media/gtkgstsinkprivate.h      |   1 +
 4 files changed, 137 insertions(+), 12 deletions(-)

diff --git a/modules/media/gtkgstpaintable.c b/modules/media/gtkgstpaintable.c
index 51f392a68d..780543e4d9 100644
--- a/modules/media/gtkgstpaintable.c
+++ b/modules/media/gtkgstpaintable.c
@@ -35,6 +35,7 @@ struct _GtkGstPaintable
   GdkPaintable *image;
   double pixel_aspect_ratio;
   graphene_rect_t viewport;
+  int orientation;
 
   GdkSurface *surface;
 };
@@ -44,6 +45,21 @@ struct _GtkGstPaintableClass
   GObjectClass parent_class;
 };
 
+static gboolean
+is_orientation_rotated (int orientation)
+{
+  switch (orientation)
+    {
+    case GST_VIDEO_ORIENTATION_90R:
+    case GST_VIDEO_ORIENTATION_90L:
+    case GST_VIDEO_ORIENTATION_UL_LR:
+    case GST_VIDEO_ORIENTATION_UR_LL:
+      return TRUE;
+    default:
+      return FALSE;
+    }
+}
+
 static void
 gtk_gst_paintable_paintable_snapshot (GdkPaintable *paintable,
                                       GdkSnapshot  *snapshot,
@@ -58,13 +74,65 @@ gtk_gst_paintable_paintable_snapshot (GdkPaintable *paintable,
 
       gtk_snapshot_save (snapshot);
 
-      sx = gdk_paintable_get_intrinsic_width (self->image) / self->viewport.size.width;
-      sy = gdk_paintable_get_intrinsic_height (self->image) / self->viewport.size.height;
+      if (is_orientation_rotated (self->orientation))
+        {
+          sx = gdk_paintable_get_intrinsic_height (self->image) / self->viewport.size.height;
+          sy = gdk_paintable_get_intrinsic_width (self->image) / self->viewport.size.width;
+        }
+      else
+        {
+          sx = gdk_paintable_get_intrinsic_width (self->image) / self->viewport.size.width;
+          sy = gdk_paintable_get_intrinsic_height (self->image) / self->viewport.size.height;
+        }
 
       gtk_snapshot_push_clip (snapshot, &GRAPHENE_RECT_INIT (0, 0, width, height));
 
-      gtk_snapshot_translate (snapshot, &GRAPHENE_POINT_INIT (-self->viewport.origin.x * width / self->viewport.size.width,
-                                                              -self->viewport.origin.y * height / self->viewport.size.height));
+      if (is_orientation_rotated (self->orientation))
+        {
+          gtk_snapshot_translate (snapshot, &GRAPHENE_POINT_INIT (-self->viewport.origin.y * width / self->viewport.size.height,
+                                                                  -self->viewport.origin.x * height / self->viewport.size.width));
+        }
+      else
+        {
+          gtk_snapshot_translate (snapshot, &GRAPHENE_POINT_INIT (-self->viewport.origin.x * width / self->viewport.size.width,
+                                                                  -self->viewport.origin.y * height / self->viewport.size.height));
+        }
+
+      if (self->orientation != GST_VIDEO_ORIENTATION_IDENTITY)
+        {
+          gtk_snapshot_translate (snapshot, &GRAPHENE_POINT_INIT (width / 2, height / 2));
+
+          switch (self->orientation)
+            {
+            case GST_VIDEO_ORIENTATION_90R:
+              gtk_snapshot_rotate (snapshot, 90.0);
+              break;
+            case GST_VIDEO_ORIENTATION_180:
+              gtk_snapshot_scale (snapshot, -1.0, -1.0);
+              break;
+            case GST_VIDEO_ORIENTATION_90L:
+              gtk_snapshot_rotate (snapshot, 270.0);
+              break;
+            case GST_VIDEO_ORIENTATION_HORIZ:
+              gtk_snapshot_scale (snapshot, -1.0, 1.0);
+              break;
+            case GST_VIDEO_ORIENTATION_VERT:
+              gtk_snapshot_scale (snapshot, 1.0, -1.0);
+              break;
+            case GST_VIDEO_ORIENTATION_UL_LR:
+              gtk_snapshot_rotate (snapshot, 90.0);
+              gtk_snapshot_scale (snapshot, 1.0, -1.0);
+              break;
+            case GST_VIDEO_ORIENTATION_UR_LL:
+              gtk_snapshot_rotate (snapshot, 270.0);
+              gtk_snapshot_scale (snapshot, 1.0, -1.0);
+              break;
+            default:
+              break;
+            }
+
+          gtk_snapshot_translate (snapshot, &GRAPHENE_POINT_INIT (-width / 2, -height / 2));
+        }
 
       gdk_paintable_snapshot (self->image, snapshot, width * sx, height * sy);
 
@@ -90,7 +158,12 @@ gtk_gst_paintable_paintable_get_intrinsic_width (GdkPaintable *paintable)
   GtkGstPaintable *self = GTK_GST_PAINTABLE (paintable);
 
   if (self->image)
-    return round (self->pixel_aspect_ratio * self->viewport.size.width);
+    {
+      if (is_orientation_rotated (self->orientation))
+        return round ((1 /self->pixel_aspect_ratio) * self->viewport.size.height);
+      else
+        return round (self->pixel_aspect_ratio * self->viewport.size.width);
+    }
 
   return 0;
 }
@@ -101,7 +174,12 @@ gtk_gst_paintable_paintable_get_intrinsic_height (GdkPaintable *paintable)
   GtkGstPaintable *self = GTK_GST_PAINTABLE (paintable);
 
   if (self->image)
-    return ceil (self->viewport.size.height);
+    {
+      if (is_orientation_rotated (self->orientation))
+        return ceil (self->viewport.size.width);
+      else
+        return ceil (self->viewport.size.height);
+    }
 
   return 0;
 }
@@ -112,7 +190,12 @@ gtk_gst_paintable_paintable_get_intrinsic_aspect_ratio (GdkPaintable *paintable)
   GtkGstPaintable *self = GTK_GST_PAINTABLE (paintable);
 
   if (self->image)
-    return self->viewport.size.width / self->viewport.size.height;
+    {
+      if (is_orientation_rotated (self->orientation))
+        return self->viewport.size.height / self->viewport.size.width;
+      else
+        return self->viewport.size.width / self->viewport.size.height;
+    }
 
   return 0.0;
 };
@@ -263,7 +346,8 @@ static void
 gtk_gst_paintable_set_paintable (GtkGstPaintable       *self,
                                  GdkPaintable          *paintable,
                                  double                 pixel_aspect_ratio,
-                                 const graphene_rect_t *viewport)
+                                 const graphene_rect_t *viewport,
+                                 int                    orientation)
 {
   gboolean size_changed;
 
@@ -287,6 +371,12 @@ gtk_gst_paintable_set_paintable (GtkGstPaintable       *self,
   self->pixel_aspect_ratio = pixel_aspect_ratio;
   self->viewport = *viewport;
 
+  if (is_orientation_rotated (self->orientation) !=
+      is_orientation_rotated (orientation))
+    size_changed = TRUE;
+
+  self->orientation = orientation;
+
   if (size_changed)
     gdk_paintable_invalidate_size (GDK_PAINTABLE (self));
 
@@ -300,6 +390,7 @@ struct _SetTextureInvocation {
   GdkTexture      *texture;
   double           pixel_aspect_ratio;
   graphene_rect_t  viewport;
+  int              orientation;
 };
 
 static void
@@ -319,7 +410,8 @@ gtk_gst_paintable_set_texture_invoke (gpointer data)
   gtk_gst_paintable_set_paintable (invoke->paintable,
                                    GDK_PAINTABLE (invoke->texture),
                                    invoke->pixel_aspect_ratio,
-                                   &invoke->viewport);
+                                   &invoke->viewport,
+                                   invoke->orientation);
 
   return G_SOURCE_REMOVE;
 }
@@ -328,7 +420,8 @@ void
 gtk_gst_paintable_queue_set_texture (GtkGstPaintable       *self,
                                      GdkTexture            *texture,
                                      double                 pixel_aspect_ratio,
-                                     const graphene_rect_t *viewport)
+                                     const graphene_rect_t *viewport,
+                                     int                    orientation)
 {
   SetTextureInvocation *invoke;
 
@@ -337,6 +430,7 @@ gtk_gst_paintable_queue_set_texture (GtkGstPaintable       *self,
   invoke->texture = g_object_ref (texture);
   invoke->pixel_aspect_ratio = pixel_aspect_ratio;
   invoke->viewport = *viewport;
+  invoke->orientation = orientation;
 
   g_main_context_invoke_full (NULL,
                               G_PRIORITY_DEFAULT,
diff --git a/modules/media/gtkgstpaintableprivate.h b/modules/media/gtkgstpaintableprivate.h
index 71854afad3..a7f544be31 100644
--- a/modules/media/gtkgstpaintableprivate.h
+++ b/modules/media/gtkgstpaintableprivate.h
@@ -37,6 +37,7 @@ void            gtk_gst_paintable_unrealize             (GtkGstPaintable
 void            gtk_gst_paintable_queue_set_texture     (GtkGstPaintable        *self,
                                                          GdkTexture             *texture,
                                                          double                  pixel_aspect_ratio,
-                                                         const graphene_rect_t  *viewport);
+                                                         const graphene_rect_t  *viewport,
+                                                         int                     orientation);
 
 G_END_DECLS
diff --git a/modules/media/gtkgstsink.c b/modules/media/gtkgstsink.c
index 64577e4ef8..fb8c14ed8f 100644
--- a/modules/media/gtkgstsink.c
+++ b/modules/media/gtkgstsink.c
@@ -374,6 +374,30 @@ gtk_gst_sink_propose_allocation (GstBaseSink *bsink,
   return FALSE;
 }
 
+static gboolean
+gtk_gst_sink_event (GstBaseSink * bsink, GstEvent * event)
+{
+  GtkGstSink *self = GTK_GST_SINK (bsink);
+  gboolean ret;
+
+  if (GST_EVENT_TYPE (event) == GST_EVENT_TAG)
+    {
+      GstTagList *taglist;
+      GstVideoOrientationMethod orientation;
+
+      gst_event_parse_tag (event, &taglist);
+      if (gst_video_orientation_from_tag (taglist, &orientation))
+        {
+          GST_DEBUG_OBJECT (self, "Setting orientation to %d", orientation);
+          self->orientation = orientation;
+        }
+    }
+
+  ret = GST_BASE_SINK_CLASS (gtk_gst_sink_parent_class)->event (bsink, event);
+
+  return ret;
+}
+
 static GdkMemoryFormat
 gtk_gst_memory_format_from_video_info (GstVideoInfo *info)
 {
@@ -567,7 +591,11 @@ gtk_gst_sink_show_frame (GstVideoSink *vsink,
   texture = gtk_gst_sink_texture_from_buffer (self, buf, &pixel_aspect_ratio, &viewport);
   if (texture)
     {
-      gtk_gst_paintable_queue_set_texture (self->paintable, texture, pixel_aspect_ratio, &viewport);
+      gtk_gst_paintable_queue_set_texture (self->paintable,
+                                           texture,
+                                           pixel_aspect_ratio,
+                                           &viewport,
+                                           self->orientation);
       g_object_unref (texture);
     }
 
@@ -860,6 +888,7 @@ gtk_gst_sink_class_init (GtkGstSinkClass * klass)
   gstbasesink_class->query = gtk_gst_sink_query;
   gstbasesink_class->propose_allocation = gtk_gst_sink_propose_allocation;
   gstbasesink_class->get_caps = gtk_gst_sink_get_caps;
+  gstbasesink_class->event = gtk_gst_sink_event;
 
   gstvideosink_class->show_frame = gtk_gst_sink_show_frame;
 
diff --git a/modules/media/gtkgstsinkprivate.h b/modules/media/gtkgstsinkprivate.h
index 3010fa561f..95e530a37a 100644
--- a/modules/media/gtkgstsinkprivate.h
+++ b/modules/media/gtkgstsinkprivate.h
@@ -57,6 +57,7 @@ struct _GtkGstSink
   GstGLContext        *gst_context;
   GdkColorState       *color_state;
   gboolean             uses_gl;
+  int                  orientation;
 };
 
 struct _GtkGstSinkClass
-- 
2.48.1


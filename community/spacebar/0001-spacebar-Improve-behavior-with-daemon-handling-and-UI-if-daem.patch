From 915fd7b2d17792b96ed0133d4b25c7a342090a88 Mon Sep 17 00:00:00 2001
From: Devin Lin <espidev@gmail.com>
Date: Sun, 13 Oct 2024 13:11:37 -0700
Subject: [PATCH 2/4] Improve behavior with daemon handling, and UI if daemon
 is off

This adds support for showing a warning in the UI if the app is not
connected to the daemon, and also makes it better handle connecting and
reconnecting to the daemon.

This also changes the daemon app name to "spacebar.Daemon" to ensure the
DBus service name is "org.kde.spacebar.Daemon", which was causing issues
in https://invent.kde.org/plasma-mobile/spacebar/-/merge_requests/171
---
 daemon/main.cpp                  |  3 +-
 src/channelhandler.cpp           | 47 ++++++++++++++++++++++++++++++--
 src/channelhandler.h             | 11 +++++++-
 src/contents/ui/ChatsPage.qml    | 17 ++++++++++--
 src/contents/ui/MessagesPage.qml | 11 ++++++++
 src/main.cpp                     |  5 ++--
 6 files changed, 85 insertions(+), 9 deletions(-)

diff --git a/daemon/main.cpp b/daemon/main.cpp
index 35d0cf2..ced02f5 100644
--- a/daemon/main.cpp
+++ b/daemon/main.cpp
@@ -22,7 +22,8 @@ int main(int argc, char *argv[])
 
     QCoreApplication app(argc, argv);
 
-    KAboutData about(u"Spacebar"_s, u"Spacebar"_s, QStringLiteral(SPACEBAR_VERSION_STRING));
+    // Ensure DBus service is registered as org.kde.spacebar.Daemon
+    KAboutData about(u"spacebar.Daemon"_s, u"Spacebar"_s, QStringLiteral(SPACEBAR_VERSION_STRING));
     KAboutData::setApplicationData(about);
 
     KCrash::initialize();
diff --git a/src/channelhandler.cpp b/src/channelhandler.cpp
index 7d30922..cb9b9b4 100644
--- a/src/channelhandler.cpp
+++ b/src/channelhandler.cpp
@@ -10,11 +10,38 @@
 #include <database.h>
 #include <global.h>
 
+const QString DAEMON_DBUS_SERVICE = QStringLiteral("org.kde.spacebar.Daemon");
+
 ChannelHandler::ChannelHandler(QObject *parent)
     : QObject(parent)
 {
-    // daemon dbus interface
-    m_interface = new org::kde::spacebar::Daemon(QStringLiteral("org.kde.Spacebar"), QStringLiteral("/Daemon"), QDBusConnection::sessionBus(), this);
+    // Daemon DBus interface
+    connectInterface();
+    m_isInterfaceAvailable = m_interface->isValid();
+
+    qDebug() << "Is Daemon DBus service available:" << m_isInterfaceAvailable;
+    if (m_isInterfaceAvailable) {
+        connectInterfaceSignals();
+    }
+
+    // Watch if the spacebar daemon goes missing
+    m_watcher = new QDBusServiceWatcher(DAEMON_DBUS_SERVICE, QDBusConnection::sessionBus(), QDBusServiceWatcher::WatchForOwnerChange, this);
+    connect(m_watcher, &QDBusServiceWatcher::serviceRegistered, this, [this]() -> void {
+        connectInterface();
+
+        m_isInterfaceAvailable = m_interface->isValid();
+        Q_EMIT isInterfaceAvailableChanged();
+        qDebug() << "Daemon DBus service registered, is service available:" << m_isInterfaceAvailable;
+
+        if (m_isInterfaceAvailable) {
+            connectInterfaceSignals();
+        }
+    });
+    connect(m_watcher, &QDBusServiceWatcher::serviceUnregistered, this, [this]() -> void {
+        m_isInterfaceAvailable = false;
+        Q_EMIT isInterfaceAvailableChanged();
+        qDebug() << "Daemon DBus service unregistered";
+    });
 
     const QLocale locale;
     const QStringList qcountry = locale.name().split(u'_');
@@ -28,7 +55,18 @@ ChannelHandler::ChannelHandler(QObject *parent)
             PhoneNumber::setCountryCode(countryCode);
         }
     }
+}
+
+void ChannelHandler::connectInterface()
+{
+    if (m_interface) {
+        m_interface->deleteLater();
+    }
+    m_interface = new org::kde::spacebar::Daemon(DAEMON_DBUS_SERVICE, QStringLiteral("/Daemon"), QDBusConnection::sessionBus(), this);
+}
 
+void ChannelHandler::connectInterfaceSignals()
+{
     // Update the chat list when message arrives
     // The message is saved to the database by the background daemon
     connect(m_interface, &OrgKdeSpacebarDaemonInterface::messageAdded, [this](const QString &phoneNumber, const QString &id) {
@@ -46,3 +84,8 @@ org::kde::spacebar::Daemon *ChannelHandler::interface()
 {
     return m_interface;
 }
+
+bool ChannelHandler::isInterfaceAvailable()
+{
+    return m_isInterfaceAvailable;
+}
\ No newline at end of file
diff --git a/src/channelhandler.h b/src/channelhandler.h
index a35cd31..0ef3cb5 100644
--- a/src/channelhandler.h
+++ b/src/channelhandler.h
@@ -15,6 +15,7 @@
 class ChannelHandler : public QObject
 {
     Q_OBJECT
+    Q_PROPERTY(bool isDaemonAvailable READ isInterfaceAvailable NOTIFY isInterfaceAvailableChanged)
 
 public:
     explicit ChannelHandler(QObject *parent = nullptr);
@@ -22,11 +23,19 @@ public:
     Database &database();
     org::kde::spacebar::Daemon *interface();
 
+    bool isInterfaceAvailable();
+
 private:
+    void connectInterface();
+    void connectInterfaceSignals();
+
     Database m_database;
-    org::kde::spacebar::Daemon *m_interface;
+    org::kde::spacebar::Daemon *m_interface{nullptr};
+    bool m_isInterfaceAvailable{false};
+    QDBusServiceWatcher *m_watcher{nullptr};
 
 Q_SIGNALS:
+    void isInterfaceAvailableChanged();
     void handlerReady();
     void channelOpen(const QString &phoneNumber);
     void messagesChanged(const PhoneNumberList &phoneNumberList);
diff --git a/src/contents/ui/ChatsPage.qml b/src/contents/ui/ChatsPage.qml
index 9d60684..28f8de0 100644
--- a/src/contents/ui/ChatsPage.qml
+++ b/src/contents/ui/ChatsPage.qml
@@ -38,7 +38,7 @@ Kirigami.ScrollablePage {
     }
 
     onWidthChanged: ChatListModel.setCharacterLimit(applicationWindow().width)
-    
+
     actions: [
         Kirigami.Action {
             visible: !Kirigami.Settings.isMobile
@@ -63,6 +63,17 @@ Kirigami.ScrollablePage {
         }
     ]
 
+    header: ColumnLayout {
+        Kirigami.InlineMessage {
+            id: noDaemonError
+            Layout.fillWidth: true
+            Layout.margins: Kirigami.Units.smallSpacing
+            type: Kirigami.MessageType.Error
+            text: i18n("Unable to connect to messaging daemon")
+            visible: !ChannelHandler.isDaemonAvailable
+        }
+    }
+
     ListView {
         id: listView
         model: ChatListModel
@@ -83,7 +94,7 @@ Kirigami.ScrollablePage {
                 loading.visible = false
             }
         }
-        
+
         Kirigami.PlaceholderMessage {
             anchors.centerIn: parent
             text: i18nc("Selecting recipients from contacts list", "Create a chat")
@@ -100,7 +111,7 @@ Kirigami.ScrollablePage {
             width: Kirigami.Units.iconSizes.huge
             height: width
         }
-        
+
         // mobile add action
         FloatingActionButton {
             anchors.fill: parent
diff --git a/src/contents/ui/MessagesPage.qml b/src/contents/ui/MessagesPage.qml
index 3dd960f..b9b2e67 100644
--- a/src/contents/ui/MessagesPage.qml
+++ b/src/contents/ui/MessagesPage.qml
@@ -137,6 +137,17 @@ Kirigami.ScrollablePage {
     ]
 
     header: ColumnLayout {
+        Kirigami.InlineMessage {
+            id: noDaemonError
+            Layout.fillWidth: true
+            Layout.leftMargin: Kirigami.Units.smallSpacing
+            Layout.rightMargin: Kirigami.Units.smallSpacing
+            Layout.topMargin: Kirigami.Units.smallSpacing
+            type: Kirigami.MessageType.Error
+            text: i18n("Unable to connect to messaging daemon")
+            visible: !ChannelHandler.isDaemonAvailable
+        }
+
         Kirigami.InlineMessage {
             id: premiumWarning
             Layout.fillWidth: true
diff --git a/src/main.cpp b/src/main.cpp
index a59fa32..1441307 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -86,13 +86,14 @@ Q_DECL_EXPORT int main(int argc, char *argv[])
     ChatListModel chatListModel(handler);
 
     // Register types
-    qmlRegisterSingletonInstance("org.kde.spacebar", 1, 0, "AboutType", &AboutType::instance());
+    qmlRegisterSingletonInstance(APPLICATION_ID, 1, 0, "AboutType", &AboutType::instance());
     qmlRegisterSingletonInstance<ChatListModel>(APPLICATION_ID, 1, 0, "ChatListModel", &chatListModel);
+    qmlRegisterSingletonInstance<ChannelHandler>(APPLICATION_ID, 1, 0, "ChannelHandler", &handler);
     qmlRegisterUncreatableType<MessageModel>(APPLICATION_ID, 1, 0, "MessageModel", SL("Created by ChatListModel whenever a new chat was opened"));
     qRegisterMetaType<KPeople::PersonData *>("PersonData*");
     qmlRegisterAnonymousType<QAbstractItemModel>(APPLICATION_ID, 1);
     qmlRegisterSingletonInstance<Utils>(APPLICATION_ID, 1, 0, "Utils", Utils::instance());
-    qmlRegisterSingletonInstance("org.kde.spacebar", 1, 0, "SettingsManager", SettingsManager::self());
+    qmlRegisterSingletonInstance(APPLICATION_ID, 1, 0, "SettingsManager", SettingsManager::self());
     qRegisterMetaType<PhoneNumber>();
     qRegisterMetaType<PhoneNumberList>();
     engine.rootContext()->setContextObject(new KLocalizedContext(&engine));
-- 
2.47.0


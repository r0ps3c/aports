diff --git a/tests/test_data.py b/tests/test_data.py
index f218f2f..08e6d86 100644
--- a/tests/test_data.py
+++ b/tests/test_data.py
@@ -96,7 +96,7 @@ class TestData(unittest.TestCase):
         }
 
         encoder = arff.ArffEncoder()
-        with self.assertRaisesRegexp(arff.BadObject,
+        with self.assertRaisesRegex(arff.BadObject,
                                      "Instance 1 has 2 attributes, expected 1"):
             encoder.encode(my_arff)
 
@@ -203,7 +203,7 @@ class TestCOOData(unittest.TestCase):
         }
 
         encoder = arff.ArffEncoder()
-        with self.assertRaisesRegexp(arff.BadObject,
+        with self.assertRaisesRegex(arff.BadObject,
                                      "Instance 1 has at least 2 attributes, "
                                      "expected 1"):
             encoder.encode(my_arff)
@@ -297,6 +297,6 @@ class TestLODData(unittest.TestCase):
         }
 
         encoder = arff.ArffEncoder()
-        with self.assertRaisesRegexp(arff.BadObject,
+        with self.assertRaisesRegex(arff.BadObject,
                                      "Instance 1 has 2 attributes, expected 1"):
             encoder.encode(my_arff)
diff --git a/tests/test_decode.py b/tests/test_decode.py
index 4f04067..8504331 100644
--- a/tests/test_decode.py
+++ b/tests/test_decode.py
@@ -323,21 +323,21 @@ too_many_attributes = '''
 class TestTooManyAttributes(unittest.TestCase):
     def test_dense(self):
         decoder = arff.ArffDecoder()
-        with self.assertRaisesRegexp(arff.BadDataFormat,
+        with self.assertRaisesRegex(arff.BadDataFormat,
                                      'Bad @DATA instance format in line 10: '
                                      '\{2 a\}'):
             decoder.decode(too_many_attributes, return_type=arff.DENSE)
 
     def test_coo(self):
         decoder = arff.ArffDecoder()
-        with self.assertRaisesRegexp(arff.BadDataFormat,
+        with self.assertRaisesRegex(arff.BadDataFormat,
                                      'Bad @DATA instance format in line 10: '
                                      '\{2 a\}'):
             decoder.decode(too_many_attributes, return_type=arff.COO)
 
     def test_lod(self):
         decoder = arff.ArffDecoder()
-        with self.assertRaisesRegexp(arff.BadDataFormat,
+        with self.assertRaisesRegex(arff.BadDataFormat,
                                      'Bad @DATA instance format in line 10: '
                                      '\{2 a\}'):
             decoder.decode(too_many_attributes, return_type=arff.LOD)
@@ -356,7 +356,7 @@ duplicate_attribute = '''@RELATION test
 class TestDuplicateAttributeName(unittest.TestCase):
     def test_decode(self):
         decoder = arff.ArffDecoder()
-        with self.assertRaisesRegexp(arff.BadAttributeName,
+        with self.assertRaisesRegex(arff.BadAttributeName,
                                      'Bad @ATTRIBUTE name attr1 at line 4, '
                                      'this name is already in use in line 3.'):
             decoder.decode(duplicate_attribute)
@@ -379,33 +379,33 @@ class TestInvalidValues(unittest.TestCase):
 
 
         fixture = self.my_arff.format(data="a','c d'")
-        with self.assertRaisesRegexp(arff.ArffException,
+        with self.assertRaisesRegex(arff.ArffException,
                                      "','c d'"):
             arff.load(fixture)
 
         fixture = self.my_arff.format(data="a b, 'c d'")
-        with self.assertRaisesRegexp(arff.ArffException,
+        with self.assertRaisesRegex(arff.ArffException,
                                      "'c d"):
             print(arff.load(fixture))
 
         fixture = self.my_arff.format(data="'a b', c d")
-        with self.assertRaisesRegexp(arff.ArffException,
+        with self.assertRaisesRegex(arff.ArffException,
                                      'c d'):
             print(arff.load(fixture))
 
     def test_sparse(self):
 
         fixture = self.my_arff.format(data="{0 a',1 'c d'}")
-        with self.assertRaisesRegexp(arff.ArffException,
+        with self.assertRaisesRegex(arff.ArffException,
                                      "',1 'c d'\}."):
             arff.load(fixture)
 
         fixture = self.my_arff.format(data="{0 a b,1 'c d'}")
-        with self.assertRaisesRegexp(arff.ArffException,
+        with self.assertRaisesRegex(arff.ArffException,
                                      "b,1 'c d'"):
             print(arff.load(fixture))
 
         fixture = self.my_arff.format(data="{0 'a b', 1 c d}")
-        with self.assertRaisesRegexp(arff.ArffException,
+        with self.assertRaisesRegex(arff.ArffException,
                                      r'.*d\}'):
             print(arff.load(fixture))
diff --git a/tests/test_encode.py b/tests/test_encode.py
index 408b2f0..b8e1eec 100644
--- a/tests/test_encode.py
+++ b/tests/test_encode.py
@@ -166,7 +166,7 @@ class TestEncodeComment(unittest.TestCase):
             'attributes': [('name', 'INTEGER'), ('name', 'INTEGER')],
             'data': [[0], [1]],
         }
-        with self.assertRaisesRegexp(arff.BadObject,
+        with self.assertRaisesRegex(arff.BadObject,
                                      'Trying to use attribute name "name" '
                                      'for the second time.'):
             encoder.encode(fixture)

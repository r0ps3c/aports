Upstream still uses the legacy API. py3-websockets 14+
fallsback to the new asyncio API, so explictly use the legacy API.
---
--- a/yt_dlp/networking/_websockets.py
+++ b/yt_dlp/networking/_websockets.py
@@ -36,7 +36,7 @@
 if websockets_version < (13, 0):
     raise ImportError('Only websockets>=13.0 is supported')
 
-import websockets.sync.client
+import websockets.legacy.sync.client
 from websockets.uri import parse_uri
 
 # In websockets Connection, recv_exc and recv_events_exc are defined
@@ -45,7 +45,7 @@
 # where the recv events handler thread tries to use these attributes before they are defined [2].
 # 1: https://github.com/python-websockets/websockets/blame/de768cf65e7e2b1a3b67854fb9e08816a5ff7050/src/websockets/sync/connection.py#L93
 # 2: "AttributeError: 'ClientConnection' object has no attribute 'recv_events_exc'. Did you mean: 'recv_events'?"
-import websockets.sync.connection  # isort: split
+import websockets.legacy.sync.connection  # isort: split
 with contextlib.suppress(Exception):
     websockets.sync.connection.Connection.recv_exc = None
 
--- a/test/test_socks.py
+++ b/test/test_socks.py
@@ -212,9 +212,9 @@ def do_GET(self):
 
 class SocksWebSocketTestRequestHandler(SocksTestRequestHandler):
     def handle(self):
-        import websockets.sync.server
+        import websockets.legacy.sync.server
         protocol = websockets.ServerProtocol()
-        connection = websockets.sync.server.ServerConnection(socket=self.request, protocol=protocol, close_timeout=0)
+        connection = websockets.legacy.sync.server.ServerConnection(socket=self.request, protocol=protocol, close_timeout=0)
         connection.handshake()
         connection.send(json.dumps(self.socks_info))
         connection.close()
--- a/yt_dlp/dependencies/__init__.py
+++ b/yt_dlp/dependencies/__init__.py
@@ -52,7 +52,7 @@
 
 
 try:
-    import websockets
+    import websockets.legacy as websockets
 except ImportError:
     websockets = None
 

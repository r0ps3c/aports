Remove the bigarray-compat compatibility shim so it
does not need to be added as a separate package,
the Bigarray in Stdlib is good enough now.

--- a/src/ctypes/dune
+++ b/src/ctypes/dune
@@ -14,7 +14,7 @@
  (name ctypes)
  (public_name ctypes)
  (wrapped false)
- (libraries integers bigarray-compat)
+ (libraries integers)
  (modules_without_implementation ctypes_types)
  (instrumentation
   (backend bisect_ppx))
--- a/src/ctypes/ctypes.mli
+++ b/src/ctypes/ctypes.mli
@@ -48,7 +48,7 @@ val genarray :
   < element: 'a;
     layout: 'l;
     ba_repr: 'b;
-    bigarray: ('a, 'b, 'l) Bigarray_compat.Genarray.t;
+    bigarray: ('a, 'b, 'l) Stdlib.Bigarray.Genarray.t;
     carray: 'a carray;
     dims: int array > bigarray_class
 (** The class of {!Bigarray.Genarray.t} values *)
@@ -57,7 +57,7 @@ val array1 :
   < element: 'a;
     layout: 'l;
     ba_repr: 'b;
-    bigarray: ('a, 'b, 'l) Bigarray_compat.Array1.t;
+    bigarray: ('a, 'b, 'l) Stdlib.Bigarray.Array1.t;
     carray: 'a carray;
     dims: int > bigarray_class
 (** The class of {!Bigarray.Array1.t} values *)
@@ -66,7 +66,7 @@ val array2 :
   < element: 'a;
     layout: 'l;
     ba_repr: 'b;
-    bigarray: ('a, 'b, 'l) Bigarray_compat.Array2.t;
+    bigarray: ('a, 'b, 'l) Stdlib.Bigarray.Array2.t;
     carray: 'a carray carray;
     dims: int * int > bigarray_class
 (** The class of {!Bigarray.Array2.t} values *)
@@ -75,7 +75,7 @@ val array3 :
   < element: 'a;
     layout: 'l;
     ba_repr: 'b;
-    bigarray: ('a, 'b, 'l) Bigarray_compat.Array3.t;
+    bigarray: ('a, 'b, 'l) Stdlib.Bigarray.Array3.t;
     carray: 'a carray carray carray;
     dims: int * int * int > bigarray_class
 (** The class of {!Bigarray.Array3.t} values *)
@@ -370,29 +370,29 @@ val bigarray_start : < element: 'a;
 (** Return the address of the first element of the given Bigarray value. *)
 
 val bigarray_of_ptr : < element: 'a;
-                        layout: Bigarray_compat.c_layout;
+                        layout: Stdlib.Bigarray.c_layout;
                         ba_repr: 'f;
                         bigarray: 'b;
                         carray: _;
                         dims: 'i > bigarray_class ->
-    'i -> ('a, 'f) Bigarray_compat.kind -> 'a ptr -> 'b
+    'i -> ('a, 'f) Stdlib.Bigarray.kind -> 'a ptr -> 'b
 (** [bigarray_of_ptr c dims k p] converts the C pointer [p] to a C-layout
     bigarray value.  No copy is made; the bigarray references the memory
     pointed to by [p]. *)
 
 val fortran_bigarray_of_ptr : < element: 'a;
-                                layout: Bigarray_compat.fortran_layout;
+                                layout: Stdlib.Bigarray.fortran_layout;
                                 ba_repr: 'f;
                                 bigarray: 'b;
                                 carray: _;
                                 dims: 'i > bigarray_class ->
-    'i -> ('a, 'f) Bigarray_compat.kind -> 'a ptr -> 'b
+    'i -> ('a, 'f) Stdlib.Bigarray.kind -> 'a ptr -> 'b
 (** [fortran_bigarray_of_ptr c dims k p] converts the C pointer [p] to a
     Fortran-layout bigarray value.  No copy is made; the bigarray references
     the memory pointed to by [p]. *)
 
 val array_of_bigarray : < element: _;
-                          layout: Bigarray_compat.c_layout;
+                          layout: Stdlib.Bigarray.c_layout;
                           ba_repr: _;
                           bigarray: 'b;
                           carray: 'c;
@@ -404,12 +404,12 @@ val array_of_bigarray : < element: _;
 (** Convert a Bigarray value to a C array. *)
 
 val bigarray_of_array : < element: 'a;
-                          layout: Bigarray_compat.c_layout;
+                          layout: Stdlib.Bigarray.c_layout;
                           ba_repr: 'f;
                           bigarray: 'b;
                           carray: 'c carray;
                           dims: 'i > bigarray_class ->
-    ('a, 'f) Bigarray_compat.kind -> 'c carray -> 'b
+    ('a, 'f) Stdlib.Bigarray.kind -> 'c carray -> 'b
 (** [bigarray_of_array c k a] converts the {!CArray.t} value [a] to a
     C-layout bigarray value.  No copy is made; the result occupies the
     same memory as [a]. *)
--- a/src/ctypes/ctypes_bigarray.ml
+++ b/src/ctypes/ctypes_bigarray.ml
@@ -28,12 +28,12 @@ let bigarray_kind_sizeof k = Ctypes_primitives.sizeof (prim_of_kind k)
 let bigarray_kind_alignment k = Ctypes_primitives.alignment (prim_of_kind k)
 
 type (_, _, _) dims =
-| DimsGen : int array -> ('a, ('a, _, 'l) Bigarray_compat.Genarray.t, 'l) dims
-| Dims1 : int -> ('a, ('a, _, 'l) Bigarray_compat.Array1.t, 'l) dims
-| Dims2 : int * int -> ('a, ('a, _, 'l) Bigarray_compat.Array2.t, 'l) dims
-| Dims3 : int * int * int -> ('a, ('a, _, 'l) Bigarray_compat.Array3.t, 'l) dims
+| DimsGen : int array -> ('a, ('a, _, 'l) Stdlib.Bigarray.Genarray.t, 'l) dims
+| Dims1 : int -> ('a, ('a, _, 'l) Stdlib.Bigarray.Array1.t, 'l) dims
+| Dims2 : int * int -> ('a, ('a, _, 'l) Stdlib.Bigarray.Array2.t, 'l) dims
+| Dims3 : int * int * int -> ('a, ('a, _, 'l) Stdlib.Bigarray.Array3.t, 'l) dims
 
-type ('a, 'b, 'l) t = ('a, 'b, 'l) dims * 'a kind * 'l Bigarray_compat.layout
+type ('a, 'b, 'l) t = ('a, 'b, 'l) dims * 'a kind * 'l Stdlib.Bigarray.layout
 
 let elements : type a b l. (b, a, l) dims -> int = function
   | DimsGen ds -> Array.fold_left ( * ) 1 ds
@@ -105,10 +105,10 @@ let kind_type_names : type a. a kind -> _ = function
     (`Ident ["char"],
      `Ident ["Bigarray"; "int8_unsigned_elt"])
 
-let layout_path : type a. a Bigarray_compat.layout -> string list =
+let layout_path : type a. a Stdlib.Bigarray.layout -> string list =
   function
-  | Bigarray_compat.C_layout -> ["Bigarray"; "c_layout"]
-  | Bigarray_compat.Fortran_layout -> ["Bigarray"; "fortran_layout"]
+  | Stdlib.Bigarray.C_layout -> ["Bigarray"; "c_layout"]
+  | Stdlib.Bigarray.Fortran_layout -> ["Bigarray"; "fortran_layout"]
 
 let type_expression : type a b l. (a, b, l) t -> _ =
   fun (t, ck, l) ->
--- a/src/ctypes/ctypes_bigarray.mli
+++ b/src/ctypes/ctypes_bigarray.mli
@@ -13,23 +13,23 @@ type ('a, 'b, 'l) t
 
 (** {3 Type constructors} *)
 
-val bigarray : int array -> ('a, 'b) Bigarray_compat.kind -> 'l Bigarray_compat.layout ->
-  ('a, ('a, 'b, 'l) Bigarray_compat.Genarray.t, 'l) t
+val bigarray : int array -> ('a, 'b) Stdlib.Bigarray.kind -> 'l Stdlib.Bigarray.layout ->
+  ('a, ('a, 'b, 'l) Stdlib.Bigarray.Genarray.t, 'l) t
 (** Create a {!t} value for the {!Bigarray.Genarray.t} type. *)
 
-val bigarray1 : int -> ('a, 'b) Bigarray_compat.kind -> 'l Bigarray_compat.layout ->
-  ('a, ('a, 'b, 'l) Bigarray_compat.Array1.t, 'l) t
+val bigarray1 : int -> ('a, 'b) Stdlib.Bigarray.kind -> 'l Stdlib.Bigarray.layout ->
+  ('a, ('a, 'b, 'l) Stdlib.Bigarray.Array1.t, 'l) t
 (** Create a {!t} value for the {!Bigarray.Array1.t} type. *)
 
-val bigarray2 : int -> int -> ('a, 'b) Bigarray_compat.kind -> 'l Bigarray_compat.layout ->
-  ('a, ('a, 'b, 'l) Bigarray_compat.Array2.t, 'l) t
+val bigarray2 : int -> int -> ('a, 'b) Stdlib.Bigarray.kind -> 'l Stdlib.Bigarray.layout ->
+  ('a, ('a, 'b, 'l) Stdlib.Bigarray.Array2.t, 'l) t
 (** Create a {!t} value for the {!Bigarray.Array2.t} type. *)
 
-val bigarray3 : int -> int -> int -> ('a, 'b) Bigarray_compat.kind -> 'l Bigarray_compat.layout ->
-  ('a, ('a, 'b, 'l) Bigarray_compat.Array3.t, 'l) t
+val bigarray3 : int -> int -> int -> ('a, 'b) Stdlib.Bigarray.kind -> 'l Stdlib.Bigarray.layout ->
+  ('a, ('a, 'b, 'l) Stdlib.Bigarray.Array3.t, 'l) t
 (** Create a {!t} value for the {!Bigarray.Array3.t} type. *)
 
-val prim_of_kind : ('a, _) Bigarray_compat.kind -> 'a Ctypes_primitive_types.prim
+val prim_of_kind : ('a, _) Stdlib.Bigarray.kind -> 'a Ctypes_primitive_types.prim
 (** Create a {!Ctypes_ptr.Types.ctype} for a {!Bigarray.kind}. *)
 
 (** {3 Type eliminators} *)
--- a/src/ctypes/ctypes_bigarray_stubs.ml
+++ b/src/ctypes/ctypes_bigarray_stubs.ml
@@ -20,37 +20,37 @@ type _ kind =
   | Kind_complex64 : Complex.t kind
   | Kind_char : char kind
 
-let kind : type a b. (a, b) Bigarray_compat.kind -> a kind = function
-  | Bigarray_compat.Float32 -> Kind_float32
-  | Bigarray_compat.Float64 -> Kind_float64
-  | Bigarray_compat.Int8_signed -> Kind_int8_signed
-  | Bigarray_compat.Int8_unsigned -> Kind_int8_unsigned
-  | Bigarray_compat.Int16_signed -> Kind_int16_signed
-  | Bigarray_compat.Int16_unsigned -> Kind_int16_unsigned
-  | Bigarray_compat.Int32 -> Kind_int32
-  | Bigarray_compat.Int64 -> Kind_int64
-  | Bigarray_compat.Int -> Kind_int
-  | Bigarray_compat.Nativeint -> Kind_nativeint
-  | Bigarray_compat.Complex32 -> Kind_complex32
-  | Bigarray_compat.Complex64 -> Kind_complex64
-  | Bigarray_compat.Char -> Kind_char
+let kind : type a b. (a, b) Stdlib.Bigarray.kind -> a kind = function
+  | Stdlib.Bigarray.Float32 -> Kind_float32
+  | Stdlib.Bigarray.Float64 -> Kind_float64
+  | Stdlib.Bigarray.Int8_signed -> Kind_int8_signed
+  | Stdlib.Bigarray.Int8_unsigned -> Kind_int8_unsigned
+  | Stdlib.Bigarray.Int16_signed -> Kind_int16_signed
+  | Stdlib.Bigarray.Int16_unsigned -> Kind_int16_unsigned
+  | Stdlib.Bigarray.Int32 -> Kind_int32
+  | Stdlib.Bigarray.Int64 -> Kind_int64
+  | Stdlib.Bigarray.Int -> Kind_int
+  | Stdlib.Bigarray.Nativeint -> Kind_nativeint
+  | Stdlib.Bigarray.Complex32 -> Kind_complex32
+  | Stdlib.Bigarray.Complex64 -> Kind_complex64
+  | Stdlib.Bigarray.Char -> Kind_char
   | _ -> failwith "Unsupported bigarray kind" [@@ocaml.warning "-11"]
 
 external address : 'b -> Ctypes_ptr.voidp
   = "ctypes_bigarray_address"
 
 external view : 'a kind -> dims:int array -> _ Ctypes_ptr.Fat.t ->
-  'l Bigarray_compat.layout -> ('a, 'b, 'l) Bigarray_compat.Genarray.t
+  'l Stdlib.Bigarray.layout -> ('a, 'b, 'l) Stdlib.Bigarray.Genarray.t
   = "ctypes_bigarray_view"
 
 external view1 : 'a kind -> dims:int array -> _ Ctypes_ptr.Fat.t ->
-  'l Bigarray_compat.layout -> ('a, 'b, 'l) Bigarray_compat.Array1.t
+  'l Stdlib.Bigarray.layout -> ('a, 'b, 'l) Stdlib.Bigarray.Array1.t
   = "ctypes_bigarray_view"
 
 external view2 : 'a kind -> dims:int array -> _ Ctypes_ptr.Fat.t ->
-  'l Bigarray_compat.layout -> ('a, 'b, 'l) Bigarray_compat.Array2.t
+  'l Stdlib.Bigarray.layout -> ('a, 'b, 'l) Stdlib.Bigarray.Array2.t
   = "ctypes_bigarray_view"
 
 external view3 : 'a kind -> dims:int array -> _ Ctypes_ptr.Fat.t ->
-  'l Bigarray_compat.layout -> ('a, 'b, 'l) Bigarray_compat.Array3.t
+  'l Stdlib.Bigarray.layout -> ('a, 'b, 'l) Stdlib.Bigarray.Array3.t
   = "ctypes_bigarray_view"
--- a/src/ctypes/ctypes_memory.ml
+++ b/src/ctypes/ctypes_memory.ml
@@ -297,7 +297,7 @@ let getf s field = !@(s @. field)
 
 let addr { structured } = structured
 
-open Bigarray_compat
+open Stdlib.Bigarray
 
 let _bigarray_start kind ba =
   let raw_address = Ctypes_bigarray.unsafe_address ba in
--- a/src/ctypes/ctypes_static.ml
+++ b/src/ctypes/ctypes_static.ml
@@ -97,28 +97,28 @@ type _ bigarray_class =
     layout: 'l;
     dims: int array;
     ba_repr: 'b;
-    bigarray: ('a, 'b, 'l) Bigarray_compat.Genarray.t;
+    bigarray: ('a, 'b, 'l) Stdlib.Bigarray.Genarray.t;
     carray: 'a carray > bigarray_class
 | Array1 :
   < element: 'a;
     layout: 'l;
     dims: int;
     ba_repr: 'b;
-    bigarray: ('a, 'b, 'l) Bigarray_compat.Array1.t;
+    bigarray: ('a, 'b, 'l) Stdlib.Bigarray.Array1.t;
     carray: 'a carray > bigarray_class
 | Array2 :
   < element: 'a;
     layout: 'l;
     dims: int * int;
     ba_repr: 'b;
-    bigarray: ('a, 'b, 'l) Bigarray_compat.Array2.t;
+    bigarray: ('a, 'b, 'l) Stdlib.Bigarray.Array2.t;
     carray: 'a carray carray > bigarray_class
 | Array3 :
   < element: 'a;
     layout: 'l;
     dims: int * int * int;
     ba_repr: 'b;
-    bigarray: ('a, 'b, 'l) Bigarray_compat.Array3.t;
+    bigarray: ('a, 'b, 'l) Stdlib.Bigarray.Array3.t;
     carray: 'a carray carray carray > bigarray_class
 
 type boxed_typ = BoxedType : 'a typ -> boxed_typ
@@ -253,7 +253,7 @@ let bigarray_ : type a b c d e l.
     ba_repr: c;
     bigarray: d;
     carray: e > bigarray_class -> 
-   b -> (a, c) Bigarray_compat.kind -> l Bigarray_compat.layout -> d typ =
+   b -> (a, c) Stdlib.Bigarray.kind -> l Stdlib.Bigarray.layout -> d typ =
   fun spec dims kind l -> match spec with
   | Genarray -> Bigarray (Ctypes_bigarray.bigarray dims kind l)
   | Array1 -> Bigarray (Ctypes_bigarray.bigarray1 dims kind l)
@@ -262,8 +262,8 @@ let bigarray_ : type a b c d e l.
   | Array3 -> let d1, d2, d3 = dims in
               Bigarray (Ctypes_bigarray.bigarray3 d1 d2 d3 kind l)
 
-let bigarray spec c k = bigarray_ spec c k Bigarray_compat.c_layout
-let fortran_bigarray spec c k = bigarray_ spec c k Bigarray_compat.fortran_layout
+let bigarray spec c k = bigarray_ spec c k Stdlib.Bigarray.c_layout
+let fortran_bigarray spec c k = bigarray_ spec c k Stdlib.Bigarray.fortran_layout
 
 let returning v =
   if not (passable v) then
--- a/src/ctypes/ctypes_static.mli
+++ b/src/ctypes/ctypes_static.mli
@@ -87,28 +87,28 @@ type _ bigarray_class =
     layout: 'l;
     dims: int array;
     ba_repr: 'b;
-    bigarray: ('a, 'b, 'l) Bigarray_compat.Genarray.t;
+    bigarray: ('a, 'b, 'l) Stdlib.Bigarray.Genarray.t;
     carray: 'a carray > bigarray_class
 | Array1 :
   < element: 'a;
     layout: 'l;
     dims: int;
     ba_repr: 'b;
-    bigarray: ('a, 'b, 'l) Bigarray_compat.Array1.t;
+    bigarray: ('a, 'b, 'l) Stdlib.Bigarray.Array1.t;
     carray: 'a carray > bigarray_class
 | Array2 :
   < element: 'a;
     layout: 'l;
     dims: int * int;
     ba_repr: 'b;
-    bigarray: ('a, 'b, 'l) Bigarray_compat.Array2.t;
+    bigarray: ('a, 'b, 'l) Stdlib.Bigarray.Array2.t;
     carray: 'a carray carray > bigarray_class
 | Array3 :
   < element: 'a;
     layout: 'l;
     dims: int * int * int;
     ba_repr: 'b;
-    bigarray: ('a, 'b, 'l) Bigarray_compat.Array3.t;
+    bigarray: ('a, 'b, 'l) Stdlib.Bigarray.Array3.t;
     carray: 'a carray carray carray > bigarray_class
 
 type boxed_typ = BoxedType : 'a typ -> boxed_typ
@@ -166,16 +166,16 @@ val bigarray : < ba_repr : 'c;
                  bigarray : 'd;
                  carray : 'e;
                  dims : 'b;
-                 layout: Bigarray_compat.c_layout;
+                 layout: Stdlib.Bigarray.c_layout;
                  element : 'a > bigarray_class ->
-  'b -> ('a, 'c) Bigarray_compat.kind -> 'd typ
+  'b -> ('a, 'c) Stdlib.Bigarray.kind -> 'd typ
 val fortran_bigarray : < ba_repr : 'c;
                          bigarray : 'd;
                          carray : 'e;
                          dims : 'b;
-                         layout: Bigarray_compat.fortran_layout;
+                         layout: Stdlib.Bigarray.fortran_layout;
                          element : 'a > bigarray_class ->
-  'b -> ('a, 'c) Bigarray_compat.kind -> 'd typ
+  'b -> ('a, 'c) Stdlib.Bigarray.kind -> 'd typ
 val returning : 'a typ -> 'a fn
 val static_funptr : 'a fn -> 'a static_funptr typ
 val structure : string -> 'a structure typ
--- a/src/ctypes/ctypes_types.mli
+++ b/src/ctypes/ctypes_types.mli
@@ -233,27 +233,27 @@ sig
 
   val bigarray :
     < element: 'a;
-      layout: Bigarray_compat.c_layout;
+      layout: Stdlib.Bigarray.c_layout;
       ba_repr: 'b;
       dims: 'dims;
       bigarray: 'bigarray;
       carray: _ > Ctypes_static.bigarray_class ->
-     'dims -> ('a, 'b) Bigarray_compat.kind -> 'bigarray typ
+     'dims -> ('a, 'b) Stdlib.Bigarray.kind -> 'bigarray typ
   (** Construct a sized C-layout bigarray type representation from a bigarray
-      class, the dimensions, and the {!Bigarray_compat.kind}. *)
+      class, the dimensions, and the {!Stdlib.Bigarray.kind}. *)
 
   val fortran_bigarray :
     < element: 'a;
-      layout: Bigarray_compat.fortran_layout;
+      layout: Stdlib.Bigarray.fortran_layout;
       ba_repr: 'b;
       dims: 'dims;
       bigarray: 'bigarray;
       carray: _ > Ctypes_static.bigarray_class ->
-     'dims -> ('a, 'b) Bigarray_compat.kind -> 'bigarray typ
+     'dims -> ('a, 'b) Stdlib.Bigarray.kind -> 'bigarray typ
   (** Construct a sized Fortran-layout bigarray type representation from a
-      bigarray class, the dimensions, and the {!Bigarray_compat.kind}. *)
+      bigarray class, the dimensions, and the {!Stdlib.Bigarray.kind}. *)
 
-  val typ_of_bigarray_kind : ('a, 'b) Bigarray_compat.kind -> 'a typ
+  val typ_of_bigarray_kind : ('a, 'b) Stdlib.Bigarray.kind -> 'a typ
   (** [typ_of_bigarray_kind k] is the type corresponding to the Bigarray kind
       [k]. *)
 

Patch-Source: https://github.com/erlang/otp/commit/8508cef07d5d559e48d51d159a30f64897c3903f.patch
--
From 8508cef07d5d559e48d51d159a30f64897c3903f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bj=C3=B6rn=20Gustavsson?= <bjorn@erlang.org>
Date: Mon, 11 Mar 2024 07:41:23 +0100
Subject: [PATCH] AArch64: Fix incorrect result for running code compiled by
 OTP 24

On AArch64, when constructing a binary using the bit syntax, using a
unit greater than 16 and not being a power of two would, would cause
erroneous results. For example, given this module compiled with
Erlang/OTP 24:

    -module(t).
    -export([bar/2]).

    bar(Contents, Size) ->
        <<Contents:Size/unit:31>>.

only the first two bytes would be correctly set:

    1> t:bar(-1, 1).
    <<255,255,0,0:7>>
    2> t:bar(-1, 1).
    <<255,255,149,35:7>>
    3> t:bar(-1, 1).
    <<255,255,0,0:7>>
    4> t:bar(-1, 1).
    <<255,255,3,0:7>>
---
 erts/emulator/beam/jit/arm/instr_bs.cpp   |  9 ++-------
 erts/emulator/test/Makefile               |  1 +
 erts/emulator/test/bs_construct_SUITE.erl | 10 ++++++++++
 4 files changed, 13 insertions(+), 7 deletions(-)

diff --git a/erts/emulator/beam/jit/arm/instr_bs.cpp b/erts/emulator/beam/jit/arm/instr_bs.cpp
index 2eb2d4201cf1..79349a095d91 100644
--- a/erts/emulator/beam/jit/arm/instr_bs.cpp
+++ b/erts/emulator/beam/jit/arm/instr_bs.cpp
@@ -99,13 +99,8 @@ int BeamModuleAssembler::emit_bs_get_field_size(const ArgSource &Size,
                 a.lsl(out, out, imm(trailing_bits - _TAG_IMMED1_SIZE));
             }
         } else {
-            if (unit >= (1 << _TAG_IMMED1_SIZE)) {
-                mov_imm(TMP1, unit >> _TAG_IMMED1_SIZE);
-            } else {
-                a.lsr(out, out, imm(_TAG_IMMED1_SIZE));
-                mov_imm(TMP1, unit);
-            }
-
+            a.lsr(out, out, imm(_TAG_IMMED1_SIZE));
+            mov_imm(TMP1, unit);
             a.mul(out, out, TMP1);
         }
 
diff --git a/erts/emulator/test/Makefile b/erts/emulator/test/Makefile
index c058fe72d266..f87aabead35d 100644
--- a/erts/emulator/test/Makefile
+++ b/erts/emulator/test/Makefile
@@ -152,6 +152,7 @@ NO_OPT= bs_bincomp \
 	map
 
 R24= \
+	bs_construct \
 	process_max_heap_size
 
 R25= \
diff --git a/erts/emulator/test/bs_construct_SUITE.erl b/erts/emulator/test/bs_construct_SUITE.erl
index adf893d9993a..3bbe53e5ab56 100644
--- a/erts/emulator/test/bs_construct_SUITE.erl
+++ b/erts/emulator/test/bs_construct_SUITE.erl
@@ -1389,6 +1389,16 @@ do_zero_init_1(Size, LPad, RPad) ->
         end()).
 
 error_info(_Config) ->
+    case ?MODULE of
+        bs_construct_r24_SUITE ->
+            %% Error information is not implemented for old bit syntax
+            %% instructions.
+            ok;
+        _ ->
+            error_info()
+    end.
+
+error_info() ->
     Atom = id(some_atom),
     NegSize = id(-1),
     HugeNegSize = id(-1 bsl 64),

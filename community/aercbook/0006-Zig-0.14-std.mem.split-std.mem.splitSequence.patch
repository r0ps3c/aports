From 8feb2cb8e228ccc202f9063013d3b287e6a133df Mon Sep 17 00:00:00 2001
From: LN Liberda <lauren@selfisekai.rocks>
Date: Sun, 9 Mar 2025 20:42:46 +0100
Subject: [PATCH] Zig 0.14: std.mem.split -> std.mem.splitSequence

---
 src/gitversiontag.zig | 2 +-
 src/main.zig          | 6 +++---
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/gitversiontag.zig b/src/gitversiontag.zig
index 0b0fa7c..2f66e3f 100644
--- a/src/gitversiontag.zig
+++ b/src/gitversiontag.zig
@@ -7,7 +7,7 @@ pub fn gitVersionTag(a: std.mem.Allocator) []const u8 {
     };
 
     if (std.process.Child.run(.{ .argv = args[0..], .allocator = a })) |ret| {
-        var it = std.mem.split(u8, ret.stdout, "\n");
+        var it = std.mem.splitSequence(u8, ret.stdout, "\n");
         if (it.next()) |firstline| {
             return firstline;
         } else {
diff --git a/src/main.zig b/src/main.zig
index 38f2a99..b0394d8 100644
--- a/src/main.zig
+++ b/src/main.zig
@@ -82,12 +82,12 @@ fn readAddressBook(
     var file = try std.fs.cwd().openFile(filn, .{});
     defer file.close();
     const buffer = try file.readToEndAlloc(alloc, max_fs);
-    var it = std.mem.split(u8, buffer, "\n");
+    var it = std.mem.splitSequence(u8, buffer, "\n");
     var index: usize = 0;
     while (it.next()) |line_untrimmed| {
         index += 1;
         const line = std.mem.trimRight(u8, line_untrimmed, " \t\n");
-        var itt = std.mem.split(u8, line, ":");
+        var itt = std.mem.splitSequence(u8, line, ":");
         var trimmed_key: []const u8 = undefined;
         var trimmed_value: []const u8 = undefined;
         if (itt.next()) |k| {
@@ -280,7 +280,7 @@ fn parseMailFromStdin(alloc: std.mem.Allocator) !ParseMailResult {
     var ret = try ParseMailResult.init(alloc);
 
     // we don't tokenize, so we get \r for empty line
-    var it = std.mem.split(u8, buffer, "\n");
+    var it = std.mem.splitSequence(u8, buffer, "\n");
 
     // first collect the headers
     var from_pos: usize = 0;

diff --git a/test/unit/ImageTest.cpp b/test/unit/ImageTest.cpp
index 275b1b2..2f33c96 100644
--- a/test/unit/ImageTest.cpp
+++ b/test/unit/ImageTest.cpp
@@ -33,38 +33,6 @@ TEST_CASE("TestImage1")
     REQUIRE(ppmbuffer == expectedImage);
 }
 
-TEST_CASE("TestImage2")
-{
-    PdfMemDocument doc;
-    doc.Load(TestUtils::GetTestInputFilePath("Hierarchies1.pdf"));
-    // Try to extract jpeg image
-    auto imageObj = doc.GetObjects().GetObject(PdfReference(156, 0));
-    charbuff buffer;
-
-    // Unpacking directly the stream shall throw since it has jpeg content
-    ASSERT_THROW_WITH_ERROR_CODE(imageObj->GetStream()->CopyTo(buffer), PdfErrorCode::UnsupportedFilter);
-
-    // Unpacking using UnpackToSafe() should succeed
-    imageObj->GetStream()->CopyToSafe(buffer);
-
-    unique_ptr<PdfImage> image;
-    REQUIRE(PdfXObject::TryCreateFromObject<PdfImage>(*imageObj, image));
-
-    image->DecodeTo(buffer, PdfPixelFormat::BGRA);
-    charbuff ppmbuffer;
-    TestUtils::SaveFramePPM(ppmbuffer, buffer.data(),
-        PdfPixelFormat::BGRA, image->GetWidth(), image->GetHeight());
-
-#ifdef PODOFO_PLAYGROUND
-    // NOTE: The following check may file using different,
-    // jpeg libraries such as libjpeg-turbo
-    string expectedImage;
-    TestUtils::ReadTestInputFile("ReferenceImage.ppm", expectedImage);
-
-    REQUIRE(ppmbuffer == expectedImage);
-#endif // PODOFO_PLAYGROUND
-}
-
 static void testReferenceImage(const PdfDocument& doc)
 {
     auto& page = doc.GetPages().GetPageAt(0);
@@ -185,25 +153,3 @@ TEST_CASE("TestImage5")
         TestUtils::WriteTestOutputFile(TestUtils::GetTestOutputFilePath("YCCK-jpeg.ppm"), ppmbuffer);
     }
 }
-
-TEST_CASE("TestImage7")
-{
-    auto outputFile = TestUtils::GetTestOutputFilePath("TestImage7.pdf");
-    {
-        PdfMemDocument doc;
-        PdfPainter painter;
-        auto& page = doc.GetPages().CreatePage(PdfPage::CreateStandardPageSize(PdfPageSize::A4));
-        painter.SetCanvas(page);
-
-        auto img1 = doc.CreateImage();
-        img1->Load(TestUtils::GetTestInputFilePath("MultipleFormats.tif"));
-        painter.DrawImage(*img1, 50, 700, 0.5, 0.5);
-
-        auto img2 = doc.CreateImage();
-        img2->Load(TestUtils::GetTestInputFilePath("MultipleFormats.tif"), 8);
-        painter.DrawImage(*img2, 50, 600, 0.5, 0.5);
-
-        painter.FinishDrawing();
-        doc.Save(outputFile);
-    }
-}

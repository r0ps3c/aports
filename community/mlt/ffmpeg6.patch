https://github.com/FFmpeg/FFmpeg/commit/1ea365082318f06cd42a8b37dd0c7724b599c821
https://github.com/FFmpeg/FFmpeg/commit/8f72bb866e47bcb57586608086c77cf0a2e2f21a ,
f->inputs -> f, 0 , etc
diff --git a/src/modules/avformat/factory.c b/src/modules/avformat/factory.c
index cfa4a12..faca883 100644
--- a/src/modules/avformat/factory.c
+++ b/src/modules/avformat/factory.c
@@ -442,8 +442,8 @@ MLT_REPOSITORY
 	void *iterator = NULL;
 	while ( ( f = (AVFilter*) av_filter_iterate( &iterator ) ) ) {
 		// Support filters that have one input and one output of the same type.
-		if ( avfilter_pad_count( f->inputs ) == 1 &&
-			avfilter_pad_count( f->outputs ) == 1 &&
+		if ( avfilter_filter_pad_count( f, 0 ) == 1 &&
+			avfilter_filter_pad_count( f, 1 ) == 1 &&
 			avfilter_pad_get_type( f->inputs, 0 ) == avfilter_pad_get_type( f->outputs, 0 ) &&
 			!mlt_properties_get( blacklist, f->name ) )
 		{
diff --git a/src/modules/avformat/filter_swresample.c b/src/modules/avformat/filter_swresample.c
index b1e0387..50f3fa2 100644
--- a/src/modules/avformat/filter_swresample.c
+++ b/src/modules/avformat/filter_swresample.c
@@ -79,7 +79,7 @@ static int configure_swr_context( mlt_filter filter )
 		// If input channels < output channels, silent channels will be added.
 		int64_t custom_in_layout = 0;
 		int64_t custom_out_layout = 0;
-		double* matrix = av_mallocz_array( pdata->in_channels * pdata->out_channels, sizeof(double) );
+		double* matrix = av_calloc( pdata->in_channels * pdata->out_channels, sizeof(double) );
 		int stride = pdata->in_channels;
 		int i = 0;
 
@@ -118,9 +118,9 @@ static int configure_swr_context( mlt_filter filter )
 
 	// Allocate the channel buffer pointers
 	av_freep( &pdata->in_buffers );
-	pdata->in_buffers = av_mallocz_array( pdata->in_channels, sizeof(uint8_t*) );
+	pdata->in_buffers = av_calloc( pdata->in_channels, sizeof(uint8_t*) );
 	av_freep( &pdata->out_buffers );
-	pdata->out_buffers = av_mallocz_array( pdata->out_channels, sizeof(uint8_t*) );
+	pdata->out_buffers = av_calloc( pdata->out_channels, sizeof(uint8_t*) );
 
 	return error;
 }

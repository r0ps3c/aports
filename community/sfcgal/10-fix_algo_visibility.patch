Patch-Source: https://gitlab.com/sfcgal/SFCGAL/-/merge_requests/295.patch
--
From ab1231ecd32048b33017cb9e03574635ed65a4d8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Bartoletti?= <loic.bartoletti@oslandia.com>
Date: Mon, 20 Nov 2023 09:17:50 +0100
Subject: [PATCH 1/2] Visibility: fix algo to detect halfedges

---
 src/algorithm/visibility.cpp | 14 ++++++++++++--
 1 file changed, 12 insertions(+), 2 deletions(-)

diff --git a/src/algorithm/visibility.cpp b/src/algorithm/visibility.cpp
index 6d8c86e8..c2283c6d 100644
--- a/src/algorithm/visibility.cpp
+++ b/src/algorithm/visibility.cpp
@@ -161,6 +161,7 @@ visibility(const Geometry &polygon, const Geometry &pointA,
 
   Point_2 startPoint{pointA.as<Point>().toPoint_2()};
   Point_2 endPoint{pointB.as<Point>().toPoint_2()};
+  Point_2 queryPoint{pointB.as<Point>().toPoint_2()};
 
   // insert geometry into the arrangement
   CGAL::Polygon_with_holes_2 pwh{
@@ -175,12 +176,21 @@ visibility(const Geometry &polygon, const Geometry &pointA,
 
   // If the point is in a boundary segment, find the corresponding half edge
   Halfedge_const_handle he = arr.halfedges_begin();
-  while (he->source()->point() != startPoint ||
-         he->target()->point() != endPoint) {
+  bool cont = !Segment_2(he->source()->point(), he->target()->point())
+                   .has_on(queryPoint) ||
+              he->source()->point() == startPoint ||
+              he->target()->point() == endPoint || he->face()->is_unbounded();
+  // While we are not in the right half edge, or while q is the source,
+  // continue
+  while (cont) {
     he++;
     if (he == arr.halfedges_end()) {
       BOOST_THROW_EXCEPTION(Exception("Can not find corresponding half edge."));
     }
+
+    cont = !Segment_2(he->source()->point(), he->target()->point())
+                .has_on(queryPoint) ||
+           he->source()->point() == queryPoint || he->face()->is_unbounded();
   }
 
   // visibility query
-- 
GitLab


From fd07958771b8c6587d7b2e18173a9889d09a797d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Bartoletti?= <loic.bartoletti@oslandia.com>
Date: Mon, 20 Nov 2023 09:18:15 +0100
Subject: [PATCH 2/2] Visibility: fix test for segment in polygon accordingly

---
 test/unit/SFCGAL/algorithm/Visibility.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/test/unit/SFCGAL/algorithm/Visibility.cpp b/test/unit/SFCGAL/algorithm/Visibility.cpp
index 1d557de2..b94a3122 100644
--- a/test/unit/SFCGAL/algorithm/Visibility.cpp
+++ b/test/unit/SFCGAL/algorithm/Visibility.cpp
@@ -109,7 +109,7 @@ BOOST_AUTO_TEST_CASE(testVisibility_SegmentInPolygon)
   std::unique_ptr<Polygon> result(
       algorithm::visibility(poly, startPoint, endPoint));
   std::string expectedWkt =
-      "POLYGON((1.0 2.0,0.0 4.0,0.0 0.0,4.0 0.0,4.0 4.0,1.0 2.0))";
+      "POLYGON((4.0 0.0,4.0 4.0,1.0 2.0,0.0 1.3,0.0 0.0,3.0 2.0,4.0 0.0))";
   BOOST_CHECK_EQUAL(result->asText(1), expectedWkt);
 }
 
-- 
GitLab


From 75d5153d03558c0badf595596b1d339cc8e717ae Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Pablo=20Correa=20G=C3=B3mez?= <ablocorrea@hotmail.com>
Date: Fri, 30 Aug 2024 00:36:03 +0200
Subject: [PATCH 1/2] Modify AddPackage interface to AddPackages

This allows to install multiple packages at the same time, which
becomes very handy for GNOME Software 47. It is also a nice
improvement as can be seen in the tests!
---
 apk-polkit-rs/src/dbus_server.rs      | 59 ++++++++++++---------------
 apk-tools/src/apk_database.rs         | 46 +++++++++++----------
 data/dev.Cogitri.apkPolkit2.interface | 10 ++---
 data/dev.Cogitri.apkPolkit2.policy.in |  2 +-
 data/dev.Cogitri.apkPolkit2.rules.in  |  2 +-
 5 files changed, 58 insertions(+), 61 deletions(-)

diff --git a/apk-polkit-rs/src/dbus_server.rs b/apk-polkit-rs/src/dbus_server.rs
index 57bda79..2be6f60 100644
--- a/apk-polkit-rs/src/dbus_server.rs
+++ b/apk-polkit-rs/src/dbus_server.rs
@@ -95,17 +95,17 @@ impl DBusServer {
 
 #[dbus_interface(name = "dev.Cogitri.apkPolkit2")]
 impl DBusServer {
-    async fn add_package(
+    async fn add_packages(
         &mut self,
         #[zbus(header)] header: MessageHeader<'_>,
         #[zbus(connection)] connection: &Connection,
-        pkgname: &str,
+        packages: Vec<&str>,
     ) -> error::Result<()> {
-        DBusServer::check_polkit_auth("AddPackage", &header, connection).await?;
+        DBusServer::check_polkit_auth("AddPackages", &header, connection).await?;
         let mut db = self.create_database(false)?;
         #[cfg(test)]
         db.no_extract_chown();
-        db.add_package(pkgname)?;
+        db.add_packages(packages)?;
         Ok(())
     }
 
@@ -339,12 +339,15 @@ mod test {
         let mut server = DBusServer::new(true, Some(repo), Some(root.clone()));
 
         server
-            .add_package(get_message_header(), &connection, "test-a")
+            .add_packages(get_message_header(), &connection, vec!["test-a", "test-b"])
             .await
             .unwrap();
         let output = Command::new(format!("{}/usr/bin/test-a", root)).output().expect("Running test-a executable failed; apparently installing the test-a package didn't work!");
         assert!(output.status.success());
         assert_eq!(output.stdout, b"hello from test-a-1.0\n");
+        let output = Command::new(format!("{}/usr/bin/test-b", root)).output().expect("Running test-b executable failed; apparently installing the test-b package didn't work!");
+        assert!(output.status.success());
+        assert_eq!(output.stdout, b"hello from test-b-1.0\n");
 
         temp_dir.close().unwrap();
     }
@@ -356,7 +359,7 @@ mod test {
         let mut server = DBusServer::new(true, Some(repo), Some(root.clone()));
 
         assert!(server
-            .add_package(get_message_header(), &connection, "unknown")
+            .add_packages(get_message_header(), &connection, vec!["unknown"])
             .await
             .is_err());
 
@@ -370,7 +373,7 @@ mod test {
         let mut server = DBusServer::new(true, Some(repo), Some(root.clone()));
 
         server
-            .add_package(get_message_header(), &connection, "test-a")
+            .add_packages(get_message_header(), &connection, vec!["test-a"])
             .await
             .unwrap();
         let exe_path = std::path::Path::new(&root)
@@ -538,7 +541,7 @@ mod test {
         let mut server = DBusServer::new(true, Some(repo), Some(root.clone()));
 
         server
-            .add_package(get_message_header(), &connection, "test-e")
+            .add_packages(get_message_header(), &connection, vec!["test-e"])
             .await
             .unwrap();
         assert_eq!(
@@ -567,15 +570,11 @@ mod test {
         let mut server = DBusServer::new(true, Some(repo.clone()), Some(root.clone()));
 
         server
-            .add_package(get_message_header(), &connection, "test-a")
-            .await
-            .unwrap();
-        server
-            .add_package(get_message_header(), &connection, "test-b")
-            .await
-            .unwrap();
-        server
-            .add_package(get_message_header(), &connection, "test-e")
+            .add_packages(
+                get_message_header(),
+                &connection,
+                vec!["test-a", "test-b", "test-e"],
+            )
             .await
             .unwrap();
 
@@ -611,11 +610,7 @@ mod test {
         let mut server = DBusServer::new(true, Some(repo.clone()), Some(root.clone()));
 
         server
-            .add_package(get_message_header(), &connection, "test-a")
-            .await
-            .unwrap();
-        server
-            .add_package(get_message_header(), &connection, "test-e")
+            .add_packages(get_message_header(), &connection, vec!["test-a", "test-e"])
             .await
             .unwrap();
         let output = Command::new(format!("{}/usr/bin/test-a", root)).output().expect("Running test-a executable failed; apparently installing the test-a package didn't work!");
@@ -652,7 +647,7 @@ mod test {
         let mut server = DBusServer::new(true, Some(repo), Some(root.clone()));
 
         server
-            .add_package(get_message_header(), &connection, "test-a")
+            .add_packages(get_message_header(), &connection, vec!["test-a"])
             .await
             .unwrap();
         let pkg_a = ApkPackagePartial::builder()
@@ -694,7 +689,7 @@ mod test {
         let mut server = DBusServer::new(true, Some(repo), Some(root.clone()));
 
         server
-            .add_package(get_message_header(), &connection, "test-e")
+            .add_packages(get_message_header(), &connection, vec!["test-e"])
             .await
             .unwrap();
         let testa_exe_path = Path::new(&root).join("usr").join("bin").join("test-a");
@@ -716,11 +711,11 @@ mod test {
         let mut server = DBusServer::new(true, Some(repo.clone()), Some(root.clone()));
 
         server
-            .add_package(get_message_header(), &connection, "test-a-sub")
-            .await
-            .unwrap();
-        server
-            .add_package(get_message_header(), &connection, "test-e")
+            .add_packages(
+                get_message_header(),
+                &connection,
+                vec!["test-a-sub", "test-e"],
+            )
             .await
             .unwrap();
         let output = Command::new(format!("{}/usr/bin/test-a", root)).output().expect("Running test-a executable failed; apparently installing the test-a package didn't work!");
@@ -761,7 +756,7 @@ mod test {
         let mut server = DBusServer::new(true, Some(repo.clone()), Some(root.clone()));
 
         server
-            .add_package(get_message_header(), &connection, "test-a")
+            .add_packages(get_message_header(), &connection, vec!["test-a"])
             .await
             .unwrap();
 
@@ -808,7 +803,7 @@ mod test {
         let mut server = DBusServer::new(true, Some(repo), Some(root.clone()));
 
         let e = server
-            .add_package(get_message_header(), &connection, "test-a 1.0")
+            .add_packages(get_message_header(), &connection, vec!["test-a 1.0"])
             .await
             .err();
         assert_eq!(
@@ -931,7 +926,7 @@ mod test {
         let mut server = DBusServer::new(true, Some(repo), Some(root.clone()));
 
         server
-            .add_package(get_message_header(), &connection, "test-e")
+            .add_packages(get_message_header(), &connection, vec!["test-e"])
             .await
             .unwrap();
         assert_eq!(
diff --git a/apk-tools/src/apk_database.rs b/apk-tools/src/apk_database.rs
index ee50325..1a3f758 100644
--- a/apk-tools/src/apk_database.rs
+++ b/apk-tools/src/apk_database.rs
@@ -112,41 +112,43 @@ impl ApkDatabase {
     }
 
     /**
-     * Add (install) the package identified by `pkgname`.
+     * Add (install) the packages identified by `packages`.
      *
      * # Errors
-     * * Returns an `Error::Add` if the package can't be added, e.g. because adding the
-     *   package would introducing broken dependencies, or no such package exists.
+     * * Returns an `Error::Add` if any of the packages can't be added, or the
+     *   transaction fails, e.g. because adding the package would introducing
+     *   broken dependencies, or some package does not exist.
      */
-    pub fn add_package(&mut self, pkgname: &str) -> Result<(), Error> {
-        info!("Adding package {}", pkgname);
+    pub fn add_packages(&mut self, packages: Vec<&str>) -> Result<(), Error> {
+        info!("Adding packages {:?}", packages);
         let mut world_copy = unsafe {
             let mut world_copy: *mut apk_dependency_array =
                 apk_array_resize(std::ptr::null_mut(), 0, 0).cast();
             apk_dependency_array_copy(&mut world_copy, self.db.world);
             ApkDependencyArray(world_copy)
         };
-        let mut dep = self
-            .package_name_to_apk_dependency(pkgname)
-            .map_err(|e| {
-                Error::Add(i18n_f(
-                    "Failed to add package {} due to error {}",
-                    &[pkgname, &e.to_string()],
-                ))
-            })?
-            .ok_or_else(|| {
-                Error::NoSuchPackage(i18n_f("Couldn't add unknown package {}", &[pkgname]))
-            })?;
-        unsafe {
-            apk_deps_add(&mut world_copy.0, &mut dep);
+        for pkgname in &packages {
+            let mut dep = self
+                .package_name_to_apk_dependency(pkgname)
+                .map_err(|e| {
+                    Error::Add(i18n_f(
+                        "Failed to add package {} due to error {}",
+                        &[pkgname, &e.to_string()],
+                    ))
+                })?
+                .ok_or_else(|| {
+                    Error::NoSuchPackage(i18n_f("Couldn't add unknown package {}", &[pkgname]))
+                })?;
+            unsafe {
+                apk_deps_add(&mut world_copy.0, &mut dep);
+            }
         }
         if unsafe { apk_solver_commit(self.db.as_mut(), 0, world_copy.0) } != 0 {
-            return Err(Error::Add(i18n_f(
-                "Failed to add package {}! Please run 'apk add {}' for more information.",
-                &[pkgname, pkgname],
+            return Err(Error::Add(i18n(
+                "Failed to add packages! Please run 'apk add' for more information.",
             )));
         }
-        debug!("Done adding package {}", pkgname);
+        debug!("Done adding packages {:?}", packages);
         Ok(())
     }
 
diff --git a/data/dev.Cogitri.apkPolkit2.interface b/data/dev.Cogitri.apkPolkit2.interface
index bf8456d..f193df7 100644
--- a/data/dev.Cogitri.apkPolkit2.interface
+++ b/data/dev.Cogitri.apkPolkit2.interface
@@ -24,13 +24,13 @@
 <node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">
     <interface name="dev.Cogitri.apkPolkit2">
         <!--
-            AddPackage:
-            @package: The name of the package to add (install)
+            AddPackages:
+            @packages: An array with the name of the package(s) to add (install)
 
-            Adds a new package to the world constraint of the system (and as such installs it).
+            Adds new packages to the world constraint of the system (and as such installs them).
         -->
-        <method name="AddPackage">
-            <arg name="package" type="s" direction="in"/>
+        <method name="AddPackages">
+            <arg name="package" type="as" direction="in"/>
         </method>
 
         <!--
diff --git a/data/dev.Cogitri.apkPolkit2.policy.in b/data/dev.Cogitri.apkPolkit2.policy.in
index 5a1aa97..c29f607 100644
--- a/data/dev.Cogitri.apkPolkit2.policy.in
+++ b/data/dev.Cogitri.apkPolkit2.policy.in
@@ -32,7 +32,7 @@
   <vendor_url>https://gitlab.alpinelinux.org/Cogitri/apk-polkit</vendor_url>
   <icon_name>package-x-generic</icon_name>
 
-  <action id="dev.Cogitri.apkPolkit2.AddPackage">
+  <action id="dev.Cogitri.apkPolkit2.AddPackages">
     <!-- SECURITY:
           - Normal users need admin authentication to install packages
           - Users in the "wheel" group can install packages without authentication
diff --git a/data/dev.Cogitri.apkPolkit2.rules.in b/data/dev.Cogitri.apkPolkit2.rules.in
index 23f1031..a97489f 100644
--- a/data/dev.Cogitri.apkPolkit2.rules.in
+++ b/data/dev.Cogitri.apkPolkit2.rules.in
@@ -1,5 +1,5 @@
 polkit.addRule(function(action, subject) {
-    if ((action.id == "dev.Cogitri.apkPolkit2.AddPackage" ||
+    if ((action.id == "dev.Cogitri.apkPolkit2.AddPackages" ||
          action.id == "dev.Cogitri.apkPolkit2.AddRepository" ||
          action.id == "dev.Cogitri.apkPolkit2.DeletePackage"||
          action.id == "dev.Cogitri.apkPolkit2.RemoveRepository" ||
-- 
2.46.1


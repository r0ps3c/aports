fusermount is provided by package "fuse", but pyfuse3 requires package "fuse3",
which provides command fusermount3, not fusermount.

--- a/test/util.py
+++ b/test/util.py
@@ -29,12 +29,12 @@
         return
     skip = lambda x: pytest.mark.skip(reason=x)
 
-    with subprocess.Popen(['which', 'fusermount'], stdout=subprocess.PIPE,
+    with subprocess.Popen(['which', 'fusermount3'], stdout=subprocess.PIPE,
                            universal_newlines=True) as which:
         fusermount_path = which.communicate()[0].strip()
 
     if not fusermount_path or which.returncode != 0:
-        return skip("Can't find fusermount executable")
+        return skip("Can't find fusermount3 executable")
 
     if not os.path.exists('/dev/fuse'):
         return skip("FUSE kernel module does not seem to be loaded")
@@ -44,7 +44,7 @@
 
     mode = os.stat(fusermount_path).st_mode
     if mode & stat.S_ISUID == 0:
-        return skip('fusermount executable not setuid, and we are not root.')
+        return skip('fusermount3 executable not setuid, and we are not root.')
 
     try:
         fd = os.open('/dev/fuse', os.O_RDWR)
@@ -96,7 +96,7 @@
         subprocess.call(['umount', '-l', mnt_dir], stdout=subprocess.DEVNULL,
                         stderr=subprocess.STDOUT)
     else:
-        subprocess.call(['fusermount', '-z', '-u', mnt_dir], stdout=subprocess.DEVNULL,
+        subprocess.call(['fusermount3', '-z', '-u', mnt_dir], stdout=subprocess.DEVNULL,
                         stderr=subprocess.STDOUT)
 
     mount_process.terminate()
@@ -115,7 +115,7 @@
     if platform.system() == 'Darwin':
         subprocess.check_call(['umount', '-l', mnt_dir])
     else:
-        subprocess.check_call(['fusermount', '-z', '-u', mnt_dir])
+        subprocess.check_call(['fusermount3', '-z', '-u', mnt_dir])
     assert not os.path.ismount(mnt_dir)
 
     if isinstance(mount_process, subprocess.Popen):

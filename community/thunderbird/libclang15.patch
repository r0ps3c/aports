mozilla --arg for libclang path to pass to bindgen assumes it's always a
directory, so we can't explicitly pass 15 without patching it here.
we have to do this because old bindgen in the ESR tree can't handle libclang16
output.
since the actual 'clang' is 16, the detected c++ standard is wrong and seemingly
assumes the output will be from 17 (what clang 16 is), but since libclang is 15
it defaults to c++14, so we have to override that too.
also backports https://github.com/rust-lang/rust-bindgen/pull/2339
--
--- a/build/moz.configure/bindgen.configure
+++ b/build/moz.configure/bindgen.configure
@@ -311,7 +311,7 @@
         return False
 
 
-set_config("MOZ_LIBCLANG_PATH", bindgen_config_paths.libclang_path)
+set_config("MOZ_LIBCLANG_PATH", "/usr/lib/libclang.so.15")
 set_config("MOZ_CLANG_PATH", bindgen_config_paths.clang_path)
 
 
--- a/tools/profiler/rust-api/build.rs
+++ b/tools/profiler/rust-api/build.rs
@@ -82,6 +82,7 @@
         .whitelist_function("gecko_profiler_.*")
         .whitelist_var("mozilla::profiler::detail::RacyFeatures::sActiveAndFeatures")
         .whitelist_type("mozilla::profiler::detail::RacyFeatures")
+        .clang_args(&["-std=c++17"])
         .rustified_enum("mozilla::StackCaptureOptions")
         .rustified_enum("mozilla::MarkerSchema_Location")
         .rustified_enum("mozilla::MarkerSchema_Format")
--- a/servo/components/style/build_gecko.rs
+++ b/servo/components/style/build_gecko.rs
@@ -280,6 +280,7 @@
 
 fn generate_structs() {
     let builder = Builder::get_initial_builder()
+        .clang_args(&["-std=c++17"])
         .enable_cxx_namespaces()
         .with_codegen_config(CodegenConfig::TYPES | CodegenConfig::VARS | CodegenConfig::FUNCTIONS);
     let mut fixups = vec![];
--- a/third_party/rust/bindgen/src/ir/ty.rs
+++ b/third_party/rust/bindgen/src/ir/ty.rs
@@ -1161,8 +1161,7 @@
                         location,
                         None,
                         ctx,
-                    )
-                    .expect("Not able to resolve vector element?");
+                    )?;
                     TypeKind::Vector(inner, ty.num_elements().unwrap())
                 }
                 CXType_ConstantArray => {
--- a/third_party/rust/bindgen/src/ir/var.rs
+++ b/third_party/rust/bindgen/src/ir/var.rs
@@ -301,11 +301,11 @@
                 let ty = match Item::from_ty(&ty, cursor, None, ctx) {
                     Ok(ty) => ty,
                     Err(e) => {
-                        assert_eq!(
-                            ty.kind(),
-                            CXType_Auto,
+                        assert!(
+                            matches!(ty.kind(), CXType_Auto | CXType_Unexposed),
                             "Couldn't resolve constant type, and it \
-                             wasn't an nondeductible auto type!"
+                             wasn't an nondeductible auto type or unexposed \
+                             type!"
                         );
                         return Err(e);
                     }

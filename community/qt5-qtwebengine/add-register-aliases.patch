From c8088aea77818f87d42f709ddcb743b907c38e9c Mon Sep 17 00:00:00 2001
From: Michael Br√ºning <michael.bruning@qt.io>
Date: Sun, 14 Jan 2024 23:48:08 +0100
Subject: [PATCH] Fixup: [Backport] Security bug 1488199

Add register aliases following respective platform calling
conventions. Also fix a typo.

Change-Id: I8f844cd4db35393580f2a0adae6a4095584087a5
Reviewed-on: https://codereview.qt-project.org/c/qt/qtwebengine-chromium/+/530618
Reviewed-by: Allan Sandfeld Jensen <allan.jensen@qt.io>
---

diff --git a/src/3rdparty/chromium/v8/src/codegen/arm/register-arm.h b/src/3rdparty/chromium/v8/src/codegen/arm/register-arm.h
index 6cb6c60..8deddc5 100644
--- a/src/3rdparty/chromium/v8/src/codegen/arm/register-arm.h
+++ b/src/3rdparty/chromium/v8/src/codegen/arm/register-arm.h
@@ -119,6 +119,12 @@
 #undef DECLARE_REGISTER
 constexpr Register no_reg = Register::no_reg();
 
+// ARM calling convention
+constexpr Register arg_reg_1 = r0;
+constexpr Register arg_reg_2 = r1;
+constexpr Register arg_reg_3 = r2;
+constexpr Register arg_reg_4 = r3;
+
 constexpr bool kPadArguments = false;
 constexpr bool kSimpleFPAliasing = false;
 constexpr bool kSimdMaskRegisters = false;
diff --git a/src/3rdparty/chromium/v8/src/codegen/arm64/register-arm64.h b/src/3rdparty/chromium/v8/src/codegen/arm64/register-arm64.h
index fbbb0a1..06026a0 100644
--- a/src/3rdparty/chromium/v8/src/codegen/arm64/register-arm64.h
+++ b/src/3rdparty/chromium/v8/src/codegen/arm64/register-arm64.h
@@ -482,6 +482,12 @@
 
 #undef ALIAS_REGISTER
 
+// Arm64 calling convention
+constexpr Register arg_reg_1 = x0;
+constexpr Register arg_reg_2 = x1;
+constexpr Register arg_reg_3 = x2;
+constexpr Register arg_reg_4 = x3;
+
 // AreAliased returns true if any of the named registers overlap. Arguments set
 // to NoReg are ignored. The system stack pointer may be specified.
 V8_EXPORT_PRIVATE bool AreAliased(
diff --git a/src/3rdparty/chromium/v8/src/codegen/mips64/register-mips64.h b/src/3rdparty/chromium/v8/src/codegen/mips64/register-mips64.h
index d7b45ed..05aba9f 100644
--- a/src/3rdparty/chromium/v8/src/codegen/mips64/register-mips64.h
+++ b/src/3rdparty/chromium/v8/src/codegen/mips64/register-mips64.h
@@ -362,6 +362,12 @@
 DEFINE_REGISTER_NAMES(MSARegister, SIMD128_REGISTERS)
 
 // Give alias names to registers for calling conventions.
+
+constexpr Register arg_reg_1 = a0;
+constexpr Register arg_reg_2 = a1;
+constexpr Register arg_reg_3 = a2;
+constexpr Register arg_reg_4 = a3;
+
 constexpr Register kReturnRegister0 = v0;
 constexpr Register kReturnRegister1 = v1;
 constexpr Register kReturnRegister2 = a0;
diff --git a/src/3rdparty/chromium/v8/src/codegen/ppc/register-ppc.h b/src/3rdparty/chromium/v8/src/codegen/ppc/register-ppc.h
index eded962..352b951 100644
--- a/src/3rdparty/chromium/v8/src/codegen/ppc/register-ppc.h
+++ b/src/3rdparty/chromium/v8/src/codegen/ppc/register-ppc.h
@@ -209,6 +209,12 @@
 constexpr Register kRootRegister = r29;          // Roots array pointer.
 constexpr Register cp = r30;                     // JavaScript context pointer.
 
+// PPC64 calling convention
+constexpr Register arg_reg_1 = r3;
+constexpr Register arg_reg_2 = r4;
+constexpr Register arg_reg_3 = r5;
+constexpr Register arg_reg_4 = r6;
+
 constexpr bool kPadArguments = false;
 constexpr bool kSimpleFPAliasing = true;
 constexpr bool kSimdMaskRegisters = false;
diff --git a/src/3rdparty/chromium/v8/src/codegen/s390/register-s390.h b/src/3rdparty/chromium/v8/src/codegen/s390/register-s390.h
index 009248a..6904802 100644
--- a/src/3rdparty/chromium/v8/src/codegen/s390/register-s390.h
+++ b/src/3rdparty/chromium/v8/src/codegen/s390/register-s390.h
@@ -167,6 +167,12 @@
 constexpr Register kRootRegister = r10;  // Roots array pointer.
 constexpr Register cp = r13;             // JavaScript context pointer.
 
+// s390x calling convention
+constexpr Register arg_reg_1 = r2;
+constexpr Register arg_reg_2 = r3;
+constexpr Register arg_reg_3 = r4;
+constexpr Register arg_reg_4 = r5;
+
 constexpr bool kPadArguments = false;
 constexpr bool kSimpleFPAliasing = true;
 constexpr bool kSimdMaskRegisters = false;
diff --git a/src/3rdparty/chromium/v8/src/regexp/arm/regexp-macro-assembler-arm.cc b/src/3rdparty/chromium/v8/src/regexp/arm/regexp-macro-assembler-arm.cc
index 099fc62..5580b24 100644
--- a/src/3rdparty/chromium/v8/src/regexp/arm/regexp-macro-assembler-arm.cc
+++ b/src/3rdparty/chromium/v8/src/regexp/arm/regexp-macro-assembler-arm.cc
@@ -1059,9 +1059,9 @@
   // Extra space for variables to consider in stack check.
   __ mov(arg_reg_4, extra_space);
   // RegExp code frame pointer.
-  __ mov(arg_reg3, frame_pointer());
+  __ mov(arg_reg_3, frame_pointer());
   // Code of self.
-  __ mov(arg_reg2, Operand(masm_->CodeObject()));
+  __ mov(arg_reg_2, Operand(masm_->CodeObject()));
 
   // We need to make room for the return address on the stack.
   int stack_alignment = base::OS::ActivationFrameAlignment();

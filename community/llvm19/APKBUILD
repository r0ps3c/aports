# Contributor: Ariadne Conill <ariadne@dereferenced.org>
# Contributor: Patrick Gansterer <paroga@paroga.com>
# Contributor: Jakub Jirutka <jakub@jirutka.cz>
# Contributor: Martell Malone <martell@marinelayer.io>
# Contributor: Eric Molitor <eric@molitor.org>
# Contributor: Rasmus Thomsen <oss@cogitri.dev>
# Contributor: Travis Tilley <ttilley@gmail.com>
# Contributor: Mitch Tishmack <mitch.tishmack@gmail.com>
# Contributor: omni <omni+alpine@hack.org>
# Maintainer: Celeste <cielesti@protonmail.com>
maintainer="Celeste <cielesti@protonmail.com>"
_pkgname=llvm
pkgver=19.1.7
pkgrel=7
_sover=${pkgver%.*}
_majorver=${pkgver%%.*}
_prevmajorver=$((_majorver - 1))
pkgname=$_pkgname$_majorver
pkgdesc="Low Level Virtual Machine compiler system, version $_majorver"
_clangdesc="C language family front-end for LLVM"
_llddesc="The LLVM Linker"
url="https://llvm.org/"
arch="all"
license="Apache-2.0 WITH LLVM-exception"
depends_dev="
	$pkgname=$pkgver-r$pkgrel
	curl-dev
	libffi-dev
	zlib-dev
	zstd-dev
	"
# See https://gitlab.alpinelinux.org/alpine/aports/-/commit/51d2fba931fb2ef0046dea19405a9290c8735051#note_234651
[ -z "$BOOTSTRAP" ] && depends_dev="
	$depends_dev
	$pkgname-test-utils=$pkgver-r$pkgrel
	"
makedepends_host="
	$depends_dev
	binutils-dev
	curl-static
	libxml2-dev
	"
makedepends_build="
	chrpath
	cmake
	python3
	py3-setuptools
	samurai
	"
# diffutils for diff: unrecognized option: strip-trailing-cr
# coreutils for 'od' binary
checkdepends="bash coreutils diffutils"
subpackages="
	$pkgname-gtest:_gtest
	$pkgname-static:llvmstatic
	$pkgname-libs:llvmlibs
	$pkgname-linker-tools:linktools
	$pkgname-dev:llvmdev
	$pkgname-lit-pyc
	$pkgname-lit:_llvm_lit:noarch
	$pkgname-test-utils:_test_utils
	lld$_majorver:_lld
	lld$_majorver-libs:lldlibs
	lld$_majorver-dev:llddev
	clang$_majorver-extra-tools:extra
	clang$_majorver:_clang
	clang$_majorver-static:clangstatic
	clang$_majorver-headers::noarch
	clang$_majorver-libclang
	clang$_majorver-libs:clanglibs
	clang$_majorver-dev:clangdev
	clang$_majorver-ccache:_ccache:noarch
	"
source="https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver/llvm-project-$pkgver.src.tar.xz

	0001-Disable-dynamic-lib-tests-for-musl-s-dlclose-is-noop.patch
	fix-hexagon-tests.patch
	fix-macho-invalid-test.patch
	fix-memory-mf_exec-on-aarch64.patch
	install-prefix.patch
	llvm-stack-size.patch
	skip-roundeven-tests.patch

	10-add-musl-triples.patch
	30-Enable-stack-protector-by-default-for-Alpine-Linux.patch
	clang-001-fortify-include.patch
	clang-002-fortify-enable.patch
	clang-003-as-needed.patch

	LLD-add-build-shared-libs-option.patch
	"
builddir="$srcdir/$_pkgname-project-$pkgver.src"

# NOTE: It seems that there's no (sane) way how to change includedir, sharedir
# etc. separately, just the CMAKE_INSTALL_PREFIX. Standard CMake variables and
# even  LLVM-specific variables, that are related to these paths, actually
# don't work (in llvm 3.7).
#
# When building a software that depends on LLVM, utility llvm-config should be
# used to discover where is LLVM installed. It provides options to print
# path of bindir, includedir, and libdir separately, but in its source, all
# these paths are actually hard-coded against INSTALL_PREFIX. We can patch it
# and move paths manually, but I'm really not sure what it may break...
#
# Also note that we should *not* add version suffix to files in llvm bindir!
# It breaks build system of some software that depends on LLVM, because they
# don't expect these files to have a sufix.
#
# So, we install all the LLVM files into /usr/lib/llvm$_majorver.
# BTW, Fedora and Debian do the same thing.
#
_prefix="usr/lib/llvm$_majorver"

# gcc is for libgcc-dev which we don't have split
_depends_clang="
	fortify-headers>=1.1-r2
	gcc
	libstdc++-dev
	musl-dev
	"

# llvm-config and llvm-tblgen are needed for cross-compiling, otherwise
# CMake tries to build them, even when LLVM_NATIVE_TOOL_DIR is set
# llvm-dev provides llvm-config; clang provides clang-tblgen
if [ "$CBUILD" != "$CHOST" ]; then
	makedepends_host="
		$makedepends_host
		$_depends_clang
		"
	makedepends_build="
		$makedepends_build
		$pkgname-dev
		cmd:llvm$_majorver-tblgen
		clang$_majorver
		lld$_majorver
		"
	_cmake_cross_options="
		-DCMAKE_SYSTEM_NAME=Linux
		-DCMAKE_SYSTEM_PROCESSOR=$CARCH
		-DCMAKE_SYSROOT=$CBUILDROOT
		-DCMAKE_AR=/usr/bin/llvm$_majorver-ar
		-DCMAKE_NM=/usr/bin/llvm$_majorver-nm
		-DCMAKE_RANLIB=/usr/bin/llvm$_majorver-ranlib
		-DCMAKE_ASM_COMPILER=clang-$_majorver
		-DCMAKE_ASM_COMPILER_TARGET=$CHOST
		-DCMAKE_C_COMPILER=clang-$_majorver
		-DCMAKE_C_COMPILER_TARGET=$CHOST
		-DCMAKE_CXX_COMPILER=clang++-$_majorver
		-DCMAKE_CXX_COMPILER_TARGET=$CHOST
		-DCMAKE_LINKER_TYPE=LLD
		-DLLVM_ENABLE_LLD=ON
		-DLLVM_NATIVE_TOOL_DIR=/$_prefix/bin
		-DLLVM_TABLEGEN=/usr/bin/llvm$_majorver-tblgen
		-DCLANG_TABLEGEN=/usr/bin/clang$_majorver-tblgen
		"
	# support stripping by placing abuild's expected stripcmd in $tmpdir/bin
	export PATH="$PATH:$tmpdir/bin"
	# we don't need build-base-$CTARGET_ARCH, LLVM/Clang has what is needed
	export BOOTSTRAP=nobase
	export CC=clang-$_majorver CXX=clang++-$_majorver
	# --sysroot is handled by CMAKE_SYSROOT in $_cmake_cross_options
	export CFLAGS="$BUILDCFLAGS" CXXFLAGS="$BUILDCXXFLAGS"
	export CPPFLAGS="$BUILDCPPFLAGS" LDFLAGS="$BUILDLDFLAGS"
fi

# Internal binutils bfd plugin, so should not be linked to by other programs.
# Only available under /usr/lib/bfd-plugins/LLVMgold-$_majorver.so and
# $_prefix/lib/LLVMgold.so, so should not conflict with other versions.
somask="LLVMgold.so"

_llvm_targets="-DLLVM_TARGETS_TO_BUILD=AMDGPU;BPF;WebAssembly"
case "$CARCH" in
arm*)	_llvm_targets="$_llvm_targets;ARM" ;;
ppc*)	_llvm_targets="$_llvm_targets;PowerPC" ;;
*)	_llvm_targets="" ;;
esac

prepare() {
	default_prepare

	if [ "$CBUILD" != "$CHOST" ]; then
		mkdir -p "$tmpdir"/bin

		ln -sv /usr/bin/llvm$_majorver-strip "$tmpdir"/bin/$CHOST-strip
	fi

	cd llvm

	# Known broken test on musl
	rm -v test/CodeGen/AArch64/wineh4.mir

	# Archs that do not build the X86 target above need to
	# have llvm-debuginfo-analyzer tests disabled due to:
	# https://github.com/llvm/llvm-project/issues/106876
	if [ -n "$_llvm_targets" ]; then
		rm -v test/tools/llvm-debuginfo-analyzer/WebAssembly/01-wasm-compare-logical-elements.test \
			test/tools/llvm-debuginfo-analyzer/WebAssembly/01-wasm-select-logical-elements.test \
			test/tools/llvm-debuginfo-analyzer/WebAssembly/03-wasm-incorrect-lexical-scope-typedef.test \
			test/tools/llvm-debuginfo-analyzer/WebAssembly/04-wasm-missing-nested-enumerators.test \
			test/tools/llvm-debuginfo-analyzer/WebAssembly/05-wasm-incorrect-lexical-scope-variable.test
	fi

	case "$CARCH" in
	armv7|x86)
		rm -v test/tools/llvm-size/radix.test
		;;
	armhf)
		rm -v test/tools/llvm-size/radix.test \
			test/ExecutionEngine/frem.ll
		;;
	esac
}

build() {
	# Auto-detect it by guessing either.
	local ffi_include_dir="$(pkg-config --cflags-only-I libffi | sed 's|^-I||g')"

	# Interferes with detection of compiler flags when building with Clang.
	# (For example, -fPIC won't be detected, which causes failures later on.)
	# This is due to an arch-specific -Wunused-command-line-argument warning,
	# but the archs affected may change in future versions of Clang.
	if $CC --version | grep -qi clang; then
		export CFLAGS="${CFLAGS//-fstack-clash-protection}"
	fi
	if $CXX --version | grep -qi clang; then
		export CXXFLAGS="${CXXFLAGS//-fstack-clash-protection}"
	fi

	# NOTE: DO NOT change CMAKE_BUILD_TYPE! Buildmodes like None will enable
	# debug assertions for LLVM!
	cmake -S llvm -B build -G Ninja -Wno-dev \
		-DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_INSTALL_PREFIX=/$_prefix \
		-DCMAKE_INSTALL_RPATH=/$_prefix/lib \
		-DFFI_INCLUDE_DIR="$ffi_include_dir" \
		\
		-DLLVM_HOST_TRIPLE="$CHOST" \
		-DLLVM_APPEND_VC_REV=OFF \
		-DLLVM_BINUTILS_INCDIR=/usr/include \
		-DLLVM_BUILD_DOCS=OFF \
		-DLLVM_BUILD_EXAMPLES=OFF \
		-DLLVM_BUILD_LLVM_DYLIB=ON \
		-DLLVM_BUILD_TESTS="$(want_check && echo ON || echo OFF)" \
		-DLLVM_ENABLE_ASSERTIONS=OFF \
		-DLLVM_ENABLE_CURL=FORCE_ON \
		-DLLVM_ENABLE_DUMP=ON \
		-DLLVM_ENABLE_EH=ON \
		-DLLVM_ENABLE_FFI=FORCE_ON \
		-DLLVM_ENABLE_LIBCXX=OFF \
		-DLLVM_ENABLE_LIBEDIT=OFF \
		-DLLVM_ENABLE_PIC=ON \
		-DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld" \
		-DLLVM_ENABLE_RTTI=ON \
		-DLLVM_ENABLE_SPHINX=OFF \
		-DLLVM_ENABLE_ZLIB=FORCE_ON \
		-DLLVM_ENABLE_ZSTD=FORCE_ON \
		-DLLVM_INCLUDE_BENCHMARKS=OFF \
		-DLLVM_INCLUDE_EXAMPLES=OFF \
		-DLLVM_INSTALL_GTEST=ON \
		-DLLVM_INSTALL_UTILS=ON \
		-DLLVM_LINK_LLVM_DYLIB=ON \
		-DLLVM_USE_PERF=ON \
		\
		-DCLANG_CONFIG_FILE_SYSTEM_DIR=/etc/clang$_majorver \
		-DCLANG_DEFAULT_PIE_ON_LINUX=ON \
		-DCLANG_ENABLE_ARCMT=OFF \
		-DCLANG_ENABLE_STATIC_ANALYZER=OFF \
		-DCLANG_INCLUDE_TESTS=OFF \
		-DCLANG_LINK_CLANG_DYLIB=ON \
		-DCLANG_PLUGIN_SUPPORT=ON \
		-DCLANG_SYSTEMZ_DEFAULT_ARCH=z196 \
		-DCLANG_VENDOR=Alpine \
		-DENABLE_LINKER_BUILD_ID=ON \
		-DLIBCLANG_BUILD_STATIC=ON \
		-DLLD_BUILD_SHARED_LIBS=ON \
		\
		$_cmake_cross_options \
		$_llvm_targets

	cmake --build build

	python3 llvm/utils/lit/setup.py build
}

check() {
	ninja -C build check-llvm
}

package() {
	depends="$pkgname-linker-tools=$pkgver-r$pkgrel"

	DESTDIR="$pkgdir" cmake --install build
	python3 llvm/utils/lit/setup.py install --root="$pkgdir"

	# setuptools installs lit to /usr/bin, move it to $_prefix
	mv -v "$pkgdir"/usr/bin/lit "$pkgdir"/$_prefix/bin/lit
	ln -sv lit "$pkgdir"/$_prefix/bin/llvm-lit

	# Symlink files from /usr/lib/llvm*/bin to /usr/bin.
	mkdir -p "$pkgdir"/usr/bin
	(cd "$pkgdir"/$_prefix
	local name newname path; for path in bin/*; do
		name=${path##*/}
		# Add version infix/suffix to the executable name.
		case "$name" in
			*-$_majorver) newname=$name ;;
			clang++) newname="$name-$_majorver" ;;
			clang-tblgen) newname="clang$_majorver-${name#clang-}" ;;
			count|llc|lli|not|opt) newname="$name$_majorver" ;;
			llvm-*) newname="llvm$_majorver-${name#llvm-}" ;;
			*) continue ;;
		esac
		ln -sv ../lib/llvm$_majorver/bin/$name "$pkgdir"/usr/bin/$newname
	done)

	mkdir -p "$pkgdir"/usr/include "$pkgdir"/usr/lib/cmake

	# symlink include to /usr/include/llvm$_llvmver
	ln -sv ../lib/llvm$_majorver/include "$pkgdir"/usr/include/llvm$_majorver

	# symlink cmake dirs to system cmake location, so find_package works
	local f; for f in clang lld llvm; do
		ln -sv ../llvm$_majorver/lib/cmake/$f "$pkgdir"/usr/lib/cmake/$f$_majorver
	done

	local libllvm_soname="libLLVM.so.$_sover"
	local libllvm_soname2="libLLVM-$_majorver.so"

	# libLLVM should be in /usr/lib. This is needed for binaries that are
	# dynamically linked with libLLVM, so they can find it on default path.
	mv -v "$pkgdir"/$_prefix/lib/$libllvm_soname "$pkgdir"/usr/lib/
	ln -sv $libllvm_soname "$pkgdir"/usr/lib/$libllvm_soname2

	# And also symlink it back to the LLVM prefix.
	ln -sv ../../$libllvm_soname "$pkgdir"/$_prefix/lib/$libllvm_soname
	ln -sfv ../../$libllvm_soname "$pkgdir"/$_prefix/lib/$libllvm_soname2

	# for bfd to work with clang -flto, you need to put the linker plugin in the bfd dir too,
	# not just usr/lib.
	mkdir -p "$pkgdir"/usr/lib/bfd-plugins
	ln -sv ../llvm$_majorver/lib/LLVMgold.so "$pkgdir"/usr/lib/bfd-plugins/LLVMgold-$_majorver.so

	# also add a suffix-version variant of llvm-config, as that's what things normally check for
	ln -sv ../lib/llvm$_majorver/bin/llvm-config "$pkgdir"/usr/bin/llvm-config-$_majorver

	# create system clang config
	# clang doesn't really have a way to set default -march abi options, so use the system config dir
	# see the clang UsersManual for how this config directory is parsed / fallback order.
	# this is set based on our gcc baseline. see the --with arguments in main/gcc.
	mkdir -p "$pkgdir"/etc/clang$_majorver
	# silent the unused-command-line-argument warning for -fstack-clash-protection,
	# which is in abuild's default.conf but unimplemented for some architectures.
	# (reference: https://maskray.me/blog/2023-08-25-clang-wunused-command-line-argument)
	cat > clang.cfg <<-EOF
	-fstack-clash-protection
	EOF
	cat > clang++.cfg <<-EOF
	@clang.cfg
	EOF

	local arm32_enabled x86_enabled
	if [ -z "$_llvm_targets" ]; then
		arm32_enabled=true
		x86_enabled=true
	else
		case "$_llvm_targets" in
		*X86*)	x86_enabled=true ;;
		*)	x86_enabled=false ;;
		esac
		case "$_llvm_targets" in
		*ARM*)	arm32_enabled=true ;;
		*)	arm32_enabled=false ;;
		esac
	fi
	# clang defaults to pentium4 on i*86- triples.
	# see https://github.com/llvm/llvm-project/issues/61347
	$x86_enabled && cat > "$(arch_to_hostspec x86).cfg" <<-EOF
	-march=pentium-m -mfpmath=sse
	EOF
	# clang defaults to 'armv6' for armhf, i.e. no -zk.
	# -zk is also a deprecated name for -kz.
	$arm32_enabled && cat > "$(arch_to_hostspec armhf).cfg" <<-EOF
	-march=armv6kz
	-mfpu=vfp
	-mtune=arm1176jzf-s
	EOF
	# it's possible to do CHOST-clang.cfg and similar to make it per-tool
	# which is given priority over the separate target and driver configs
	mv -v ./*-linux-musl*.cfg "$pkgdir"/etc/clang$_majorver/ || :
	mv -v ./clang*.cfg "$pkgdir"/etc/clang$_majorver/

	# delete things we don't want non-latest of
	rm -v "$pkgdir"/$_prefix/share/clang/bash-autocomplete.sh
	rm -v "$pkgdir"/$_prefix/share/clang/clang-*.el
	rm -v "$pkgdir"/$_prefix/share/clang/clang-format-bbedit.applescript

	local clang_libs="
		libclang-cpp.so
		libclang-cpp.so.$_sover
		libclang.so
		libclang.so.$_sover
		libclang.so.$pkgver
		"
	for f in $clang_libs; do
		ln -sv ../lib/llvm$_majorver/lib/$f "$pkgdir"/usr/lib/$f
	done

	(cd "$pkgdir"/$_prefix/lib
	for f in liblld*.so*; do
		ln -sv ../lib/llvm$_majorver/lib/$f "$pkgdir"/usr/lib/$f
	done)

	mkdir -p "$pkgdir"/usr/lib/clang "$pkgdir"/usr/lib/ccache/bin

	# compat symlink back to fix clang with -no-canonical-prefixes
	ln -sv ../llvm$_majorver/lib/clang/$_majorver "$pkgdir"/usr/lib/clang/$_majorver

	# create ccache symlinks, for clang$_majorver-ccache subpackage
	ln -sv ../../../bin/ccache "$pkgdir"/usr/lib/ccache/bin/clang-$_majorver
	ln -sv ../../../bin/ccache "$pkgdir"/usr/lib/ccache/bin/clang++-$_majorver
}

_gtest() {
	pkgdesc="LLVM $_majorver gtest static libraries"
	depends=""

	amove \
		$_prefix/lib/libLLVMTesting*.a \
		$_prefix/lib/libllvm_gtest*.a \
		$_prefix/include/llvm-gmock \
		$_prefix/include/llvm-gtest
}

llvmstatic() {
	pkgdesc="LLVM $_majorver static libraries"
	depends=""

	amove $_prefix/lib/libLLVM*.a
}

llvmlibs() {
	pkgdesc="LLVM $_majorver runtime library"
	depends=""

	amove \
		usr/lib/libLLVM.so.$_sover \
		$_prefix/lib/libLLVM.so.$_sover
}

linktools() {
	pkgdesc="$pkgdesc (linker plugins)"

	amove \
		usr/lib/bfd-plugins/ \
		$_prefix/lib/LLVMgold* \
		$_prefix/lib/libLTO.so*
}

llvmdev() {
	pkgdesc="$pkgdesc (development files)"
	depends="$depends_dev"

	amove \
		usr/bin/llvm*config* \
		usr/include/llvm* \
		usr/lib/cmake/llvm* \
		usr/lib/libLLVM*.so \
		$_prefix/bin/llvm-config \
		$_prefix/include/llvm*/ \
		$_prefix/lib/cmake/llvm/ \
		$_prefix/lib/libLLVM*.so \
		$_prefix/lib/libRemarks*
}

_llvm_lit() {
	pkgdesc="LLVM $_majorver utilities for executing LLVM and Clang style test suites (llvm-lit)"
	depends="$pkgname-test-utils=$pkgver-r$pkgrel"

	amove \
		usr/bin/llvm$_majorver-lit \
		usr/lib/python3*/site-packages/lit*/ \
		$_prefix/bin/lit \
		$_prefix/bin/llvm-lit
}

_test_utils() {
	pkgdesc="LLVM $_majorver utilities for executing LLVM and Clang style test suites (binaries)"
	depends=""

	amove \
		usr/bin/count$_majorver \
		usr/bin/not$_majorver \
		$_prefix/bin/FileCheck \
		$_prefix/bin/count \
		$_prefix/bin/not
}

_lld() {
	pkgdesc="$_llddesc"

	amove \
		$_prefix/bin/*lld* \
		$_prefix/bin/wasm-ld
}

lldlibs() {
	pkgdesc="$_llddesc (libraries)"

	amove \
		usr/lib/liblld*.so.* \
		$_prefix/lib/liblld*.so.*
}

llddev() {
	pkgdesc="$_llddesc (development files)"
	depends="lld$_majorver=$pkgver-r$pkgrel"

	amove \
		usr/lib/cmake/lld$_majorver \
		usr/lib/liblld*.so \
		$_prefix/include/lld \
		$_prefix/lib/cmake/lld \
		$_prefix/lib/liblld*.so
}

extra() {
	pkgdesc="Extra tools built using Clang's tooling APIs"

	amove \
		$_prefix/bin/clang-apply-replacements* \
		$_prefix/bin/clang-change-namespace* \
		$_prefix/bin/clang-doc* \
		$_prefix/bin/clang-format* \
		$_prefix/bin/clang-include-cleaner* \
		$_prefix/bin/clang-include-fixer* \
		$_prefix/bin/clang-move* \
		$_prefix/bin/clang-offload-bundler* \
		$_prefix/bin/clang-pseudo* \
		$_prefix/bin/clang-query* \
		$_prefix/bin/clang-refactor* \
		$_prefix/bin/clang-rename* \
		$_prefix/bin/clang-reorder-fields* \
		$_prefix/bin/clang-repl* \
		$_prefix/bin/clang-scan-deps* \
		$_prefix/bin/clang-tidy* \
		$_prefix/bin/clangd* \
		$_prefix/bin/c-index-test* \
		$_prefix/bin/diagtool* \
		$_prefix/bin/find-all-symbols* \
		$_prefix/bin/git-clang-format* \
		$_prefix/bin/hmaptool* \
		$_prefix/bin/modularize* \
		$_prefix/bin/pp-trace* \
		$_prefix/bin/run-clang-tidy* \
		$_prefix/share/clang/clang-*.py \
		$_prefix/share/clang/run-find-all-symbols.py \
		$_prefix/share/clang-doc
}

_clang() {
	pkgdesc="$_clangdesc"
	# the libraries should always exactly match, not just by soname
	depends="
		$pkgname-linker-tools=$pkgver-r$pkgrel
		$subpkgname-headers=$pkgver-r$pkgrel
		$subpkgname-libs=$pkgver-r$pkgrel
		$_depends_clang
		"

	amove \
		etc/clang* \
		usr/bin/clang* \
		usr/lib/clang \
		$_prefix/bin/*-arch \
		$_prefix/bin/clang*
}

clangdev() {
	pkgdesc="$_clangdesc (development files)"
	depends="clang$_majorver=$pkgver-r$pkgrel"

	# move cmake to -dev
	amove \
		usr/lib/cmake/clang$_majorver \
		usr/lib/libclang*.so \
		$_prefix/include/clang*/ \
		$_prefix/lib/cmake/clang \
		$_prefix/lib/libclang*.so
}

clangstatic() {
	pkgdesc="$_clangdesc (static library)"

	amove \
		$_prefix/lib/libclang*.a \
		$_prefix/lib/libfindAllSymbols.a
}

clanglibs() {
	pkgdesc="$_clangdesc (C++ interface)"

	# this can fail depending on the symlinks and is already moved
	amove \
		usr/lib/libclang-cpp.so.* \
		$_prefix/lib/libclang-cpp.so.*
}

libclang() {
	pkgdesc="$_clangdesc (C interface)"
	depends="clang$_majorver-headers=$pkgver-r$pkgrel"

	# we add an extra subpackage for this so things that link to libclang don't
	# have to pull libclang-cpp too (separate)
	amove \
		usr/lib/libclang.so.* \
		$_prefix/lib/libclang.so.*
}

headers() {
	pkgdesc="$_clangdesc (header files)"

	amove $_prefix/lib/clang/$_majorver/include
}

_ccache() {
	pkgdesc="$_clangdesc (ccache symlinks)"
	install_if="clang$_majorver=$pkgver-r$pkgrel ccache"

	amove usr/lib/ccache/bin
}

sha512sums="
c7d63286d662707a9cd54758c9e3aaf52794a91900c484c4a6efa62d90bc719d5e7a345e4192feeb0c9fd11c82570d64677c781e5be1d645556b6aa018e47ec8  llvm-project-19.1.7.src.tar.xz
8ea1d7ed115c71fef5e8ad34b164ed82f4d7349e2cb4ef6d0421e57fd425f173bea3e339484ec3b85eb5a817f404f37e41c775cf3a6957a24c8798f2c0144250  0001-Disable-dynamic-lib-tests-for-musl-s-dlclose-is-noop.patch
bd51d487c46472963a350cd90f7d7a5d8a4494467716f4e4e3d21ba6be5f65c0e84f173a5bb8468fb68325e75401f08110f8886320d5caa9acd339d795b254bc  fix-hexagon-tests.patch
5e67befcc470c605aa61ff2e0c63057e121633def720e5c67fb4ecdc4a5852bee6ca93fe9953531389dc43f79e1828a411f5a40eb70a686d47ab127153be0ade  fix-macho-invalid-test.patch
1826a6877d0c9e93c2d6ce0b4f83fe1118b9449f82f1919b37be5fc6d7c11ae22e0c02a7d3e6e23ce41bbb07df2ff08124aa9172e254ef2b12ecbc80d9a674a9  fix-memory-mf_exec-on-aarch64.patch
510833875b190101a2bc466a7d3e17e820d4806345f350385c2e8e5112713fd864467f245e85f9b192b2c9b00c3fa33c5de773f98a38dfbb4ae80e158af19738  install-prefix.patch
2123f01d8075a15cf8c2d8091fc8c92cb99807b1d654af13b436690ddb55f3e893a494593b3c92aeab26e50db4e0500ac688129ab6bc11e4765c0308b90db101  llvm-stack-size.patch
a45f078c4ddd5e1bece2e2e6795d4760a88dd3bb0921786d2f0650979268554e87e9190b42be1efa7e76e8d14a5a6db453dc367711576397e00fe647c9261791  skip-roundeven-tests.patch
9d5f51ca6ff7a2eca3d2ffc04d0336ae9c2911305947c60319df4ce82aaced4e5a0a10ffc7a5cbda8af82f926693f911906e0868e90cbfacef00331e30a31ae5  10-add-musl-triples.patch
1387277a263a5b37bd9255ddfdfad2a61b752f0a992494334b9ae42551d85d59c372986cdded0c4cbb24b07f660a28ebd799258cd8dab3180efc4f82eec8f1be  30-Enable-stack-protector-by-default-for-Alpine-Linux.patch
4864189aab65ef48e9f44986bfdd55aac906bb4e91fd7d35bc1d41e4ba4940e06651618cfb6e88b34934631df5186eda976e77793fbf510df0eb594bb1802f25  clang-001-fortify-include.patch
fbfac7cd1425d6774ce9cb2d6b8e72cbb156b3f2aa178d96e5ee83ff8a9280b5b971b97a3f44cef5fa30d76796324e779b4da1904f9314d4028d10636f5bfbcd  clang-002-fortify-enable.patch
9d013c593ae323b007a5b09f5ac67cab827c95441c4f70cae592f3e39400532e1d7b94b8fb36878dcfad82e210d7abee801316fc8392516ec045b6a08a4a2628  clang-003-as-needed.patch
73d6be123ab157816e8511358cf436efcdd5bb7d330c79b6a04af622d0a79934400b35a5abf359073ed510c1b77f7b3fdf5ea69c1fa7ae348694c95308e42900  LLD-add-build-shared-libs-option.patch
"

From ff9d55551a5ec381ccfc04a773b82d98b5b95028 Mon Sep 17 00:00:00 2001
From: Fabio Porcedda <fabio.porcedda@gmail.com>
Date: Tue, 12 Dec 2023 10:09:47 +0100
Subject: [PATCH 1/5] qmi-common: turn qmi_helpers_str_hex into
 qmi_common_str_hex

Rename qmi_helpers_str_hex() to qmi_common_str_hex() and move it to
the new library libqmi-common that will be shared between libqmi-glib
and qmicli.
---
 build-aux/qmi-codegen/Message.py      |  2 +-
 build-aux/qmi-codegen/utils.py        |  1 +
 src/common/meson.build                | 15 +++++++++
 src/common/qmi-common.c               | 45 +++++++++++++++++++++++++++
 src/common/qmi-common.h               | 16 ++++++++++
 src/libqmi-glib/generated/meson.build |  5 ++-
 src/libqmi-glib/meson.build           |  1 +
 src/libqmi-glib/qmi-compat.c          |  5 +--
 src/libqmi-glib/qmi-device.c          |  5 +--
 src/libqmi-glib/qmi-endpoint.c        |  4 +--
 src/libqmi-glib/qmi-helpers.c         | 36 ---------------------
 src/libqmi-glib/qmi-helpers.h         |  4 ---
 src/libqmi-glib/qmi-message.c         |  3 +-
 src/meson.build                       |  1 +
 14 files changed, 94 insertions(+), 49 deletions(-)
 create mode 100644 src/common/meson.build
 create mode 100644 src/common/qmi-common.c
 create mode 100644 src/common/qmi-common.h

diff --git a/build-aux/qmi-codegen/Message.py b/build-aux/qmi-codegen/Message.py
index b522fd4d..eb56358f 100644
--- a/build-aux/qmi-codegen/Message.py
+++ b/build-aux/qmi-codegen/Message.py
@@ -381,7 +381,7 @@ class Message:
                 '        g_autofree gchar *value_hex = NULL;\n'
                 '\n'
                 '        if (qmi_utils_get_show_personal_info () || !value_has_personal_info)\n'
-                '            value_hex = qmi_helpers_str_hex (value, length, \':\');\n'
+                '            value_hex = qmi_common_str_hex (value, length, \':\');\n'
                 '        else\n'
                 '            value_hex = g_strdup ("###...");\n'
                 '\n'
diff --git a/build-aux/qmi-codegen/utils.py b/build-aux/qmi-codegen/utils.py
index b4313a58..00d98c33 100644
--- a/build-aux/qmi-codegen/utils.py
+++ b/build-aux/qmi-codegen/utils.py
@@ -114,6 +114,7 @@ def add_source_start(f, output_name):
         "#include <string.h>\n"
         "\n"
         "#include \"${name}.h\"\n"
+        "#include \"qmi-common.h\"\n"
         "#include \"qmi-enum-types.h\"\n"
         "#include \"qmi-flag-types.h\"\n"
         "#include \"qmi-enum-types-private.h\"\n"
diff --git a/src/common/meson.build b/src/common/meson.build
new file mode 100644
index 00000000..06fcdc31
--- /dev/null
+++ b/src/common/meson.build
@@ -0,0 +1,15 @@
+# SPDX-License-Identifier: LGPL-2.1-or-later
+# Copyright (C) 2023 Fabio Porcedda <fabio.porcedda@gmail.com>
+
+libqmi_common = static_library(
+  'qmi-common',
+  sources: 'qmi-common.c',
+  include_directories: top_inc,
+  dependencies: glib_dep,
+)
+
+libqmi_common_dep = declare_dependency(
+  include_directories: '.',
+  dependencies: glib_dep,
+  link_with: libqmi_common,
+)
diff --git a/src/common/qmi-common.c b/src/common/qmi-common.c
new file mode 100644
index 00000000..a65e346b
--- /dev/null
+++ b/src/common/qmi-common.c
@@ -0,0 +1,45 @@
+/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/* SPDX-License-Identifier: LGPL-2.1-or-later */
+/*
+ * Copyright (C) 2023 Fabio Porcedda <fabio.porcedda@gmail.com>
+ */
+
+#include "qmi-common.h"
+
+#include <stdio.h>
+
+/*****************************************************************************/
+
+gchar *
+qmi_common_str_hex (gconstpointer mem,
+                    gsize         size,
+                    gchar         delimiter)
+{
+    const guint8 *data = mem;
+    gsize         i;
+    gsize         j;
+    gsize         new_str_length;
+    gchar        *new_str;
+
+    /* Get new string length. If input string has N bytes, we need:
+     * - 1 byte for last NUL char
+     * - 2N bytes for hexadecimal char representation of each byte...
+     * - N-1 bytes for the separator ':'
+     * So... a total of (1+2N+N-1) = 3N bytes are needed... */
+    new_str_length =  3 * size;
+
+    /* Allocate memory for new array and initialize contents to NUL */
+    new_str = g_malloc0 (new_str_length);
+
+    /* Print hexadecimal representation of each byte... */
+    for (i = 0, j = 0; i < size; i++, j += 3) {
+        /* Print character in output string... */
+        snprintf (&new_str[j], 3, "%02X", data[i]);
+        /* And if needed, add separator */
+        if (i != (size - 1) )
+            new_str[j + 2] = delimiter;
+    }
+
+    /* Set output string */
+    return new_str;
+}
diff --git a/src/common/qmi-common.h b/src/common/qmi-common.h
new file mode 100644
index 00000000..d59e5e7b
--- /dev/null
+++ b/src/common/qmi-common.h
@@ -0,0 +1,16 @@
+/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright (C) 2023 Fabio Porcedda <fabio.porcedda@gmail.com>
+ */
+
+#ifndef _COMMON_QMI_COMMON_H_
+#define _COMMON_QMI_COMMON_H_
+
+#include <glib.h>
+
+gchar *qmi_common_str_hex (gconstpointer mem,
+                           gsize         size,
+                           gchar         delimiter);
+
+#endif /* _COMMON_QMI_COMMON_H_ */
diff --git a/src/libqmi-glib/generated/meson.build b/src/libqmi-glib/generated/meson.build
index 19eeeb69..9c07c881 100644
--- a/src/libqmi-glib/generated/meson.build
+++ b/src/libqmi-glib/generated/meson.build
@@ -305,7 +305,10 @@ c_flags = [
   '-Wno-unused-function',
 ]
 
-deps = [glib_deps]
+deps = [
+  glib_deps,
+  libqmi_common_dep,
+]
 
 if enable_qrtr
   deps += qrtr_glib_dep
diff --git a/src/libqmi-glib/meson.build b/src/libqmi-glib/meson.build
index f3113747..854234ff 100644
--- a/src/libqmi-glib/meson.build
+++ b/src/libqmi-glib/meson.build
@@ -99,6 +99,7 @@ sources = files(
 deps = [
   generated_dep,
   gio_unix_dep,
+  libqmi_common_dep,
 ]
 
 if enable_mbim_qmux
diff --git a/src/libqmi-glib/qmi-compat.c b/src/libqmi-glib/qmi-compat.c
index 636a9631..d65d2e75 100644
--- a/src/libqmi-glib/qmi-compat.c
+++ b/src/libqmi-glib/qmi-compat.c
@@ -21,6 +21,7 @@
 
 #include <string.h>
 
+#include "qmi-common.h"
 #include "qmi-compat.h"
 #include "qmi-helpers.h"
 #include "qmi-enum-types.h"
@@ -40,8 +41,8 @@ print_read_bytes_trace (const gchar *type,
     gchar *str1;
     gchar *str2;
 
-    str1 = qmi_helpers_str_hex (buffer, n_bytes, ':');
-    str2 = qmi_helpers_str_hex (out, n_bytes, ':');
+    str1 = qmi_common_str_hex (buffer, n_bytes, ':');
+    str2 = qmi_common_str_hex (out, n_bytes, ':');
 
     g_debug ("Read %s (%s) --> (%s)", type, str1, str2);
     g_warn_if_fail (g_str_equal (str1, str2));
diff --git a/src/libqmi-glib/qmi-device.c b/src/libqmi-glib/qmi-device.c
index 55ec075a..b901a62a 100644
--- a/src/libqmi-glib/qmi-device.c
+++ b/src/libqmi-glib/qmi-device.c
@@ -31,6 +31,7 @@
 #include <termios.h>
 #include <unistd.h>
 
+#include "qmi-common.h"
 #include "qmi-device.h"
 #include "qmi-message.h"
 #include "qmi-file.h"
@@ -1744,13 +1745,13 @@ trace_message (QmiDevice         *self,
     }
 
     if (qmi_utils_get_show_personal_info () || (((GByteArray *)message)->len < MAX_PRINTED_BYTES)) {
-        printable = qmi_helpers_str_hex (((GByteArray *)message)->data,
+        printable = qmi_common_str_hex (((GByteArray *)message)->data,
                                          ((GByteArray *)message)->len,
                                          ':');
     } else {
         g_autofree gchar *tmp = NULL;
 
-        tmp = qmi_helpers_str_hex (((GByteArray *)message)->data, MAX_PRINTED_BYTES, ':');
+        tmp = qmi_common_str_hex (((GByteArray *)message)->data, MAX_PRINTED_BYTES, ':');
         printable = g_strdup_printf ("%s...", tmp);
     }
 
diff --git a/src/libqmi-glib/qmi-endpoint.c b/src/libqmi-glib/qmi-endpoint.c
index 362311cc..f5c5aae1 100644
--- a/src/libqmi-glib/qmi-endpoint.c
+++ b/src/libqmi-glib/qmi-endpoint.c
@@ -24,7 +24,7 @@
 
 #include "qmi-endpoint.h"
 
-#include "qmi-helpers.h"
+#include "qmi-common.h"
 #include "qmi-error-types.h"
 #include "qmi-errors.h"
 
@@ -93,7 +93,7 @@ qmi_endpoint_parse_buffer (QmiEndpoint        *self,
                 gchar *printable;
                 guint len = MIN (self->priv->buffer->len, 2048);
 
-                printable = qmi_helpers_str_hex (self->priv->buffer->data, len, ':');
+                printable = qmi_common_str_hex (self->priv->buffer->data, len, ':');
                 g_debug ("<<<<<< RAW INVALID MESSAGE:\n"
                          "<<<<<<   length = %u\n"
                          "<<<<<<   data   = %s\n",
diff --git a/src/libqmi-glib/qmi-helpers.c b/src/libqmi-glib/qmi-helpers.c
index 2cd433fb..d5626105 100644
--- a/src/libqmi-glib/qmi-helpers.c
+++ b/src/libqmi-glib/qmi-helpers.c
@@ -37,42 +37,6 @@
 
 /*****************************************************************************/
 
-gchar *
-qmi_helpers_str_hex (gconstpointer mem,
-                     gsize         size,
-                     gchar         delimiter)
-{
-    const guint8 *data = mem;
-    gsize         i;
-    gsize         j;
-    gsize         new_str_length;
-    gchar        *new_str;
-
-    /* Get new string length. If input string has N bytes, we need:
-     * - 1 byte for last NUL char
-     * - 2N bytes for hexadecimal char representation of each byte...
-     * - N-1 bytes for the separator ':'
-     * So... a total of (1+2N+N-1) = 3N bytes are needed... */
-    new_str_length =  3 * size;
-
-    /* Allocate memory for new array and initialize contents to NUL */
-    new_str = g_malloc0 (new_str_length);
-
-    /* Print hexadecimal representation of each byte... */
-    for (i = 0, j = 0; i < size; i++, j += 3) {
-        /* Print character in output string... */
-        snprintf (&new_str[j], 3, "%02X", data[i]);
-        /* And if needed, add separator */
-        if (i != (size - 1) )
-            new_str[j + 2] = delimiter;
-    }
-
-    /* Set output string */
-    return new_str;
-}
-
-/*****************************************************************************/
-
 gboolean
 qmi_helpers_check_user_allowed (uid_t    uid,
                                 GError **error)
diff --git a/src/libqmi-glib/qmi-helpers.h b/src/libqmi-glib/qmi-helpers.h
index 48b9f6df..5be5c09a 100644
--- a/src/libqmi-glib/qmi-helpers.h
+++ b/src/libqmi-glib/qmi-helpers.h
@@ -34,10 +34,6 @@
 
 G_BEGIN_DECLS
 
-G_GNUC_INTERNAL
-gchar *qmi_helpers_str_hex (gconstpointer mem,
-                            gsize         size,
-                            gchar         delimiter);
 G_GNUC_INTERNAL
 gboolean qmi_helpers_check_user_allowed  (uid_t    uid,
                                           GError **error);
diff --git a/src/libqmi-glib/qmi-message.c b/src/libqmi-glib/qmi-message.c
index 3e31b4b4..ab928a15 100644
--- a/src/libqmi-glib/qmi-message.c
+++ b/src/libqmi-glib/qmi-message.c
@@ -34,6 +34,7 @@
 #include <string.h>
 #include <endian.h>
 
+#include "qmi-common.h"
 #include "qmi-message.h"
 #include "qmi-helpers.h"
 #include "qmi-enums-private.h"
@@ -1623,7 +1624,7 @@ qmi_message_get_tlv_printable (QmiMessage *self,
     g_return_val_if_fail (line_prefix != NULL, NULL);
     g_return_val_if_fail (raw != NULL, NULL);
 
-    value_hex = qmi_helpers_str_hex (raw, raw_length, ':');
+    value_hex = qmi_common_str_hex (raw, raw_length, ':');
     printable = g_strdup_printf ("%sTLV:\n"
                                  "%s  type   = 0x%02x\n"
                                  "%s  length = %" G_GSIZE_FORMAT "\n"
diff --git a/src/meson.build b/src/meson.build
index 10550ab7..33f642f6 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -1,6 +1,7 @@
 # SPDX-License-Identifier: GPL-2.0-or-later
 # Copyright (C) 2019 - 2021 Iñigo Martinez <inigomartinez@gmail.com>
 
+subdir('common')
 subdir('libqmi-glib')
 subdir('qmicli')
 subdir('qmi-proxy')
-- 
2.45.1


From 606268c1e5dc896bf54c4fb7110f5a2b6c35989c Mon Sep 17 00:00:00 2001
From: Otto Liljalaakso <otto.liljalaakso@iki.fi>
Date: Thu, 17 Oct 2024 21:51:00 +0300
Subject: [PATCH] Fix platform specific parameters for ppc64le

Previously, build script assumed that for little-endian PowerPC, Meson
would report `ppc64le` as `cpu_family`. Actually, Meson returns just
`ppc64` and endianness needs to be checked separately. Fix the Meson
build script to do that.

Without this change, compiling on `ppc64le`  included 32-bit PowerPC
code from `risc_ppc.h`, causing many error about invalid casts from
pointer to 32-bit integer types.
---
 src/cpu/meson.build | 38 ++++++++++++++++++++------------------
 1 file changed, 20 insertions(+), 18 deletions(-)

diff --git a/src/cpu/meson.build b/src/cpu/meson.build
index 155085cab25..dd045d53abe 100644
--- a/src/cpu/meson.build
+++ b/src/cpu/meson.build
@@ -14,32 +14,34 @@ conf_data.set10('C_PER_PAGE_W_OR_X', per_page_w_or_x_pref.auto() or per_page_w_o
 
 # Platform-specific
 core_selection = [
-    # cpu_family                  selected_core        dynrec_define    target     unaligned  per-page
-    #                                                                              mem        W^X
-    [ ['x86_64'],                 ['auto', 'dyn-x86'], 'C_DYNAMIC_X86', 'X86_64',  1,         1 ],
-    [ ['x86'],                    ['auto', 'dyn-x86'], 'C_DYNAMIC_X86', 'X86',     1,         1 ],
-    [ ['x86_64'],                 ['dynrec'],          'C_DYNREC',      'X86_64',  1,         1 ],
-    [ ['x86'],                    ['dynrec'],          'C_DYNREC',      'X86',     1,         1 ],
-    [ ['aarch64'],                ['auto', 'dynrec'],  'C_DYNREC',      'ARMV8LE', 1,         1 ], # ARMv8+ (64-bit)
-    [ ['arm'],                    ['auto', 'dynrec'],  'C_DYNREC',      'ARMV7LE', 1,         1 ], # ARMv7+
-    [ ['armv6'],                  ['auto', 'dynrec'],  'C_DYNREC',      'ARMV4LE', 0,         0 ], # ARMv6 or older
-    [ ['ppc64',   'powerpc64'],   ['auto', 'dynrec'],  'C_DYNREC',      'POWERPC', 1,         1 ], # 64 bit PPC processors (big-endian), running 32-bit big-endian code
-    [ ['ppc64le', 'powerpc64le'], ['auto', 'dynrec'],  'C_DYNREC',      'PPC64LE', 1,         1 ], # 64 bit PPC processors (little-endian)
-    [ ['ppc',     'powerpc'],     ['auto', 'dynrec'],  'C_DYNREC',      'POWERPC', 1,         0 ], # 32 bit PPC processors (big-endian)
-    [ ['mips'],                   ['auto', 'dynrec'],  'C_DYNREC',      'MIPSEL',  0,         0 ], # 32 bit MIPS processor
+    # cpu_family              endian      selected_core        dynrec_define    target     unaligned  per-page
+    #                                                                                      mem        W^X
+    [ ['x86_64'],             ['little'], ['auto', 'dyn-x86'], 'C_DYNAMIC_X86', 'X86_64',  1,         1 ],
+    [ ['x86'],                ['little'], ['auto', 'dyn-x86'], 'C_DYNAMIC_X86', 'X86',     1,         1 ],
+    [ ['x86_64'],             ['little'], ['dynrec'],          'C_DYNREC',      'X86_64',  1,         1 ],
+    [ ['x86'],                ['little'], ['dynrec'],          'C_DYNREC',      'X86',     1,         1 ],
+    [ ['aarch64'],            ['little'], ['auto', 'dynrec'],  'C_DYNREC',      'ARMV8LE', 1,         1 ], # ARMv8+ (64-bit)
+    [ ['arm'],                ['little'], ['auto', 'dynrec'],  'C_DYNREC',      'ARMV7LE', 1,         1 ], # ARMv7+
+    [ ['armv6'],              ['little'], ['auto', 'dynrec'],  'C_DYNREC',      'ARMV4LE', 0,         0 ], # ARMv6 or older
+    [ ['ppc64', 'powerpc64'], ['big'],    ['auto', 'dynrec'],  'C_DYNREC',      'POWERPC', 1,         1 ], # 64 bit PPC processors (big-endian), running 32-bit big-endian code
+    [ ['ppc64', 'powerpc64'], ['little'], ['auto', 'dynrec'],  'C_DYNREC',      'PPC64LE', 1,         1 ], # 64 bit PPC processors (little-endian)
+    [ ['ppc',   'powerpc'],   ['big'],    ['auto', 'dynrec'],  'C_DYNREC',      'POWERPC', 1,         0 ], # 32 bit PPC processors (big-endian)
+    [ ['mips'],               ['little'], ['auto', 'dynrec'],  'C_DYNREC',      'MIPSEL',  0,         0 ], # 32 bit MIPS processor
 ]
 
 selected_core = get_option('dynamic_core')
 
 foreach line : core_selection
     cpu_family = line[0]
-    opts_for_arch = line[1]
-    dynrec_define = line[2]
-    target_cpu = line[3]
-    unaligned_mem = line[4]
-    per_page_w_or_x = line[5]
+    endian = line[1]
+    opts_for_arch = line[2]
+    dynrec_define = line[3]
+    target_cpu = line[4]
+    unaligned_mem = line[5]
+    per_page_w_or_x = line[6]
     if (
         cpu_family.contains(host_machine.cpu_family())
+        and endian.contains(host_machine.endian())
         and opts_for_arch.contains(selected_core)
     )
         conf_data.set('C_TARGETCPU', target_cpu)

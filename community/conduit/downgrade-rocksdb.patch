diff --git a/Cargo.lock b/Cargo.lock
index 615a760..a6d393d 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -313,16 +313,17 @@ checksum = "8c3c1a368f70d6cf7302d78f8f7093da241fb8e8807c05cc9e51a125895a6d5b"
 
 [[package]]
 name = "bindgen"
-version = "0.69.4"
+version = "0.65.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a00dc851838a2120612785d195287475a3ac45514741da670b735818822129a0"
+checksum = "cfdf7b466f9a4903edc73f95d6d2bcd5baf8ae620638762244d3f60143643cc5"
 dependencies = [
- "bitflags 2.5.0",
+ "bitflags 1.3.2",
  "cexpr",
  "clang-sys",
- "itertools",
  "lazy_static",
  "lazycell",
+ "peeking_take_while",
+ "prettyplease",
  "proc-macro2",
  "quote",
  "regex",
@@ -424,12 +425,6 @@ version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
 
-[[package]]
-name = "cfg_aliases"
-version = "0.1.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e"
-
 [[package]]
 name = "clang-sys"
 version = "1.8.1"
@@ -519,10 +514,10 @@ dependencies = [
  "regex",
  "reqwest",
  "ring",
+ "rocksdb",
  "ruma",
  "rusqlite",
  "rust-argon2",
- "rust-rocksdb",
  "sd-notify",
  "serde",
  "serde_html_form",
@@ -1503,6 +1498,22 @@ dependencies = [
  "libc",
 ]
 
+[[package]]
+name = "librocksdb-sys"
+version = "0.11.0+8.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d3386f101bcb4bd252d8e9d2fb41ec3b0862a15a62b478c355b2982efa469e3e"
+dependencies = [
+ "bindgen",
+ "bzip2-sys",
+ "cc",
+ "glob",
+ "libc",
+ "libz-sys",
+ "lz4-sys",
+ "zstd-sys",
+]
+
 [[package]]
 name = "libsqlite3-sys"
 version = "0.28.0"
@@ -1633,13 +1644,12 @@ dependencies = [
 
 [[package]]
 name = "nix"
-version = "0.28.0"
+version = "0.27.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ab2156c4fce2f8df6c499cc1c763e4394b7482525bf2a9701c9d79d215f519e4"
+checksum = "2eb04e9c688eff1c89d72b407f168cf79bb9e867a9d3323ed6c01519eb9cc053"
 dependencies = [
  "bitflags 2.5.0",
  "cfg-if",
- "cfg_aliases",
  "libc",
 ]
 
@@ -1878,6 +1888,12 @@ dependencies = [
  "syn",
 ]
 
+[[package]]
+name = "peeking_take_while"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099"
+
 [[package]]
 name = "pem"
 version = "3.0.4"
@@ -1989,6 +2005,16 @@ version = "0.2.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de"
 
+[[package]]
+name = "prettyplease"
+version = "0.2.20"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5f12335488a2f3b0a83b14edad48dca9879ce89b2edd10e80237e4e852dd645e"
+dependencies = [
+ "proc-macro2",
+ "syn",
+]
+
 [[package]]
 name = "proc-macro-crate"
 version = "3.1.0"
@@ -2219,6 +2245,16 @@ dependencies = [
  "windows-sys 0.52.0",
 ]
 
+[[package]]
+name = "rocksdb"
+version = "0.21.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bb6f170a4041d50a0ce04b0d2e14916d6ca863ea2e422689a5b694395d299ffe"
+dependencies = [
+ "libc",
+ "librocksdb-sys",
+]
+
 [[package]]
 name = "ruma"
 version = "0.10.1"
@@ -2452,32 +2488,6 @@ dependencies = [
  "constant_time_eq",
 ]
 
-[[package]]
-name = "rust-librocksdb-sys"
-version = "0.21.0+9.1.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "75cb7b9cd5ce3b3ce0757ceab2240f7471826780b8700845c0cfd418cb7e398d"
-dependencies = [
- "bindgen",
- "bzip2-sys",
- "cc",
- "glob",
- "libc",
- "libz-sys",
- "lz4-sys",
- "zstd-sys",
-]
-
-[[package]]
-name = "rust-rocksdb"
-version = "0.25.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2bcfb31b5bf2e3274686ebfdf9a946e9a327a3bc54adc7e5cda9f4fdcc4b55f1"
-dependencies = [
- "libc",
- "rust-librocksdb-sys",
-]
-
 [[package]]
 name = "rustc-demangle"
 version = "0.1.24"
diff --git a/Cargo.toml b/Cargo.toml
index 1a7ca78..7a84ac0 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -120,6 +120,8 @@ threadpool = "1.8.1"
 # Used for ruma wrapper
 serde_html_form = "0.2.0"
 
+rocksdb = { version = "0.21.0", default-features = true, features = ["multi-threaded-cf", "zstd", "lz4"], optional = true }
+
 thread_local = "1.1.7"
 # used for TURN server authentication
 hmac = "0.12.1"
@@ -166,14 +168,8 @@ features = [
 ]
 git = "https://github.com/ruma/ruma"
 
-[dependencies.rocksdb]
-features = ["lz4", "multi-threaded-cf", "zstd"]
-optional = true
-package = "rust-rocksdb"
-version = "0.25"
-
 [target.'cfg(unix)'.dependencies]
-nix = { version = "0.28", features = ["resource"] }
+nix = { version = "0.27", features = ["resource"] }
 
 [features]
 default = ["backend_rocksdb", "backend_sqlite", "conduit_bin", "systemd"]
diff --git a/flake.nix b/flake.nix
index 9132544..5ebcf95 100644
--- a/flake.nix
+++ b/flake.nix
@@ -34,20 +34,6 @@
 
         book = self.callPackage ./nix/pkgs/book {};
 
-        rocksdb =
-        let
-          version = "9.1.1";
-        in
-        pkgs.rocksdb.overrideAttrs (old: {
-          inherit version;
-          src = pkgs.fetchFromGitHub {
-            owner = "facebook";
-            repo = "rocksdb";
-            rev = "v${version}";
-            hash = "sha256-/Xf0bzNJPclH9IP80QNaABfhj4IAR5LycYET18VFCXc=";
-          };
-        });
-
         shell = self.callPackage ./nix/shell.nix {};
 
         # The Rust toolchain to use
diff --git a/src/database/abstraction/rocksdb.rs b/src/database/abstraction/rocksdb.rs
index cf77e3d..124413e 100644
--- a/src/database/abstraction/rocksdb.rs
+++ b/src/database/abstraction/rocksdb.rs
@@ -23,23 +23,29 @@ pub struct RocksDbEngineTree<'a> {
 fn db_options(max_open_files: i32, rocksdb_cache: &rocksdb::Cache) -> rocksdb::Options {
     let mut block_based_options = rocksdb::BlockBasedOptions::default();
     block_based_options.set_block_cache(rocksdb_cache);
-    block_based_options.set_bloom_filter(10.0, false);
+
+    // "Difference of spinning disk"
+    // https://zhangyuchi.gitbooks.io/rocksdbbook/content/RocksDB-Tuning-Guide.html
     block_based_options.set_block_size(4 * 1024);
     block_based_options.set_cache_index_and_filter_blocks(true);
-    block_based_options.set_pin_l0_filter_and_index_blocks_in_cache(true);
-    block_based_options.set_optimize_filters_for_memory(true);
 
     let mut db_opts = rocksdb::Options::default();
     db_opts.set_block_based_table_factory(&block_based_options);
+    db_opts.set_optimize_filters_for_hits(true);
+    db_opts.set_skip_stats_update_on_db_open(true);
+    db_opts.set_level_compaction_dynamic_level_bytes(true);
+    db_opts.set_target_file_size_base(256 * 1024 * 1024);
+    //db_opts.set_compaction_readahead_size(2 * 1024 * 1024);
+    //db_opts.set_use_direct_reads(true);
+    //db_opts.set_use_direct_io_for_flush_and_compaction(true);
     db_opts.create_if_missing(true);
     db_opts.increase_parallelism(num_cpus::get() as i32);
     db_opts.set_max_open_files(max_open_files);
-    db_opts.set_compression_type(rocksdb::DBCompressionType::Lz4);
-    db_opts.set_bottommost_compression_type(rocksdb::DBCompressionType::Zstd);
+    db_opts.set_compression_type(rocksdb::DBCompressionType::Zstd);
     db_opts.set_compaction_style(rocksdb::DBCompactionStyle::Level);
+    db_opts.optimize_level_style_compaction(10 * 1024 * 1024);
 
     // https://github.com/facebook/rocksdb/wiki/Setup-Options-and-Basic-Tuning
-    db_opts.set_level_compaction_dynamic_level_bytes(true);
     db_opts.set_max_background_jobs(6);
     db_opts.set_bytes_per_sync(1048576);
 
@@ -53,6 +59,9 @@ fn db_options(max_open_files: i32, rocksdb_cache: &rocksdb::Cache) -> rocksdb::O
     // restored via federation.
     db_opts.set_wal_recovery_mode(rocksdb::DBRecoveryMode::TolerateCorruptedTailRecords);
 
+    let prefix_extractor = rocksdb::SliceTransform::create_fixed_prefix(1);
+    db_opts.set_prefix_extractor(prefix_extractor);
+
     db_opts
 }
 
@@ -136,17 +145,12 @@ impl RocksDbEngineTree<'_> {
 
 impl KvTree for RocksDbEngineTree<'_> {
     fn get(&self, key: &[u8]) -> Result<Option<Vec<u8>>> {
-        let readoptions = rocksdb::ReadOptions::default();
-
-        Ok(self.db.rocks.get_cf_opt(&self.cf(), key, &readoptions)?)
+        Ok(self.db.rocks.get_cf(&self.cf(), key)?)
     }
 
     fn insert(&self, key: &[u8], value: &[u8]) -> Result<()> {
-        let writeoptions = rocksdb::WriteOptions::default();
         let lock = self.write_lock.read().unwrap();
-        self.db
-            .rocks
-            .put_cf_opt(&self.cf(), key, value, &writeoptions)?;
+        self.db.rocks.put_cf(&self.cf(), key, value)?;
         drop(lock);
 
         self.watchers.wake(key);
@@ -155,31 +159,22 @@ impl KvTree for RocksDbEngineTree<'_> {
     }
 
     fn insert_batch<'a>(&self, iter: &mut dyn Iterator<Item = (Vec<u8>, Vec<u8>)>) -> Result<()> {
-        let writeoptions = rocksdb::WriteOptions::default();
         for (key, value) in iter {
-            self.db
-                .rocks
-                .put_cf_opt(&self.cf(), key, value, &writeoptions)?;
+            self.db.rocks.put_cf(&self.cf(), key, value)?;
         }
 
         Ok(())
     }
 
     fn remove(&self, key: &[u8]) -> Result<()> {
-        let writeoptions = rocksdb::WriteOptions::default();
-        Ok(self
-            .db
-            .rocks
-            .delete_cf_opt(&self.cf(), key, &writeoptions)?)
+        Ok(self.db.rocks.delete_cf(&self.cf(), key)?)
     }
 
     fn iter<'a>(&'a self) -> Box<dyn Iterator<Item = (Vec<u8>, Vec<u8>)> + 'a> {
-        let readoptions = rocksdb::ReadOptions::default();
-
         Box::new(
             self.db
                 .rocks
-                .iterator_cf_opt(&self.cf(), readoptions, rocksdb::IteratorMode::Start)
+                .iterator_cf(&self.cf(), rocksdb::IteratorMode::Start)
                 .map(|r| r.unwrap())
                 .map(|(k, v)| (Vec::from(k), Vec::from(v))),
         )
@@ -190,14 +185,11 @@ impl KvTree for RocksDbEngineTree<'_> {
         from: &[u8],
         backwards: bool,
     ) -> Box<dyn Iterator<Item = (Vec<u8>, Vec<u8>)> + 'a> {
-        let readoptions = rocksdb::ReadOptions::default();
-
         Box::new(
             self.db
                 .rocks
-                .iterator_cf_opt(
+                .iterator_cf(
                     &self.cf(),
-                    readoptions,
                     rocksdb::IteratorMode::From(
                         from,
                         if backwards {
@@ -213,33 +205,23 @@ impl KvTree for RocksDbEngineTree<'_> {
     }
 
     fn increment(&self, key: &[u8]) -> Result<Vec<u8>> {
-        let readoptions = rocksdb::ReadOptions::default();
-        let writeoptions = rocksdb::WriteOptions::default();
-
         let lock = self.write_lock.write().unwrap();
 
-        let old = self.db.rocks.get_cf_opt(&self.cf(), key, &readoptions)?;
+        let old = self.db.rocks.get_cf(&self.cf(), key)?;
         let new = utils::increment(old.as_deref()).unwrap();
-        self.db
-            .rocks
-            .put_cf_opt(&self.cf(), key, &new, &writeoptions)?;
+        self.db.rocks.put_cf(&self.cf(), key, &new)?;
 
         drop(lock);
         Ok(new)
     }
 
     fn increment_batch<'a>(&self, iter: &mut dyn Iterator<Item = Vec<u8>>) -> Result<()> {
-        let readoptions = rocksdb::ReadOptions::default();
-        let writeoptions = rocksdb::WriteOptions::default();
-
         let lock = self.write_lock.write().unwrap();
 
         for key in iter {
-            let old = self.db.rocks.get_cf_opt(&self.cf(), &key, &readoptions)?;
+            let old = self.db.rocks.get_cf(&self.cf(), &key)?;
             let new = utils::increment(old.as_deref()).unwrap();
-            self.db
-                .rocks
-                .put_cf_opt(&self.cf(), key, new, &writeoptions)?;
+            self.db.rocks.put_cf(&self.cf(), key, new)?;
         }
 
         drop(lock);
@@ -251,14 +233,11 @@ impl KvTree for RocksDbEngineTree<'_> {
         &'a self,
         prefix: Vec<u8>,
     ) -> Box<dyn Iterator<Item = (Vec<u8>, Vec<u8>)> + 'a> {
-        let readoptions = rocksdb::ReadOptions::default();
-
         Box::new(
             self.db
                 .rocks
-                .iterator_cf_opt(
+                .iterator_cf(
                     &self.cf(),
-                    readoptions,
                     rocksdb::IteratorMode::From(&prefix, rocksdb::Direction::Forward),
                 )
                 .map(|r| r.unwrap())

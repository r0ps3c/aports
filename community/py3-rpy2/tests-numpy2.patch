diff --git a/rpy2/tests/robjects/test_pandas_conversions.py.orig b/rpy2/tests/robjects/test_pandas_conversions.py
index 98112feccaa..bf6e7f9ce92 100644
--- a/rpy2/tests/robjects/test_pandas_conversions.py.orig
+++ b/rpy2/tests/robjects/test_pandas_conversions.py
@@ -145,7 +145,7 @@ class TestPandasConversions(object):
                              (pandas.Int32Dtype() if has_pandas else None,
                               pandas.Int64Dtype() if has_pandas else None))
     def test_dataframe_int_nan(self, dtype):
-        a = pandas.DataFrame([(numpy.NaN,)], dtype=dtype, columns=['z'])
+        a = pandas.DataFrame([(numpy.nan,)], dtype=dtype, columns=['z'])
         with localconverter(default_converter + rpyp.converter) as cv:
             b = robjects.conversion.get_conversion().py2rpy(a)
         assert b[0][0] is rinterface.na_values.NA_Integer
@@ -155,7 +155,7 @@ class TestPandasConversions(object):
     @pytest.mark.parametrize('dtype', (pandas.Int32Dtype() if has_pandas else None,
                                        pandas.Int64Dtype() if has_pandas else None))
     def test_series_int_nan(self, dtype):
-        a = pandas.Series((numpy.NaN,), dtype=dtype, index=['z'])
+        a = pandas.Series((numpy.nan,), dtype=dtype, index=['z'])
         with localconverter(default_converter + rpyp.converter) as _:
             b = robjects.conversion.converter_ctx.get().py2rpy(a)
         assert b[0] is rinterface.na_values.NA_Integer
diff --git a/rpy2/tests/robjects/test_conversion_numpy.py.orig b/rpy2/tests/robjects/test_conversion_numpy.py
index a347b731a2d..48cd19883fb 100644
--- a/rpy2/tests/robjects/test_conversion_numpy.py.orig
+++ b/rpy2/tests/robjects/test_conversion_numpy.py
@@ -71,7 +71,7 @@ class TestNumpyConversions(object):
         
     def test_vector_complex(self):
         l = [1j, 2j, 3j]
-        c = numpy.array(l, dtype=numpy.complex_)
+        c = numpy.array(l, dtype=numpy.complex128)
         c_r = self.check_homogeneous(c, "complex", "complex")
         for orig, conv in zip(l, c_r):
             assert abs(orig.real-conv.real) < 0.000001

Fix type conversion on 32 bit targets

Ref https://github.com/mumble-voip/mumble/issues/6377

--- a/src/MumbleProtocol.cpp
+++ b/src/MumbleProtocol.cpp
@@ -781,7 +781,7 @@ namespace Protocol {
 		}
 
 
-		m_audioData.payload = gsl::span< byte >(payloadBegin, payloadSize);
+		m_audioData.payload = gsl::span< byte >(payloadBegin, static_cast< size_t >(payloadSize));
 
 		if (stream.left() == 3 * sizeof(float)) {
 			// If there are further bytes after the audio payload, this means that there is positional data attached to
--- a/src/mumble/Audio.cpp
+++ b/src/mumble/Audio.cpp
@@ -43,7 +43,7 @@ void LoopUser::addFrame(const Mumble::Protocol::AudioData &audioData) {
 		QMutexLocker l(&qmLock);
 		bool restart = (qetLastFetch.elapsed() > 100);
 
-		long time = qetTicker.elapsed();
+		qint64 time = qetTicker.elapsed();
 
 		float r;
 		if (restart)
--- a/src/mumble/AudioOutput.cpp
+++ b/src/mumble/AudioOutput.cpp
@@ -617,11 +617,11 @@ bool AudioOutput::mix(void *outbuff, unsigned int frameCount) {
 						// Mix down stereo to mono. TODO: stereo record support
 						// frame: for a stereo stream, the [LR] pair inside ...[LR]LRLRLR.... is a frame
 						for (unsigned int i = 0; i < frameCount; ++i) {
-							recbuff[i] += (pfBuffer[2 * i] / 2.0f + pfBuffer[2 * i + 1] / 2.0f) * volumeAdjustment;
+							recbuff[static_cast< int >(i)] += (pfBuffer[2 * i] / 2.0f + pfBuffer[2 * i + 1] / 2.0f) * volumeAdjustment;
 						}
 					} else {
 						for (unsigned int i = 0; i < frameCount; ++i) {
-							recbuff[i] += pfBuffer[i] * volumeAdjustment;
+							recbuff[static_cast< int >(i)] += pfBuffer[i] * volumeAdjustment;
 						}
 					}
 
--- a/src/murmur/Server.cpp
+++ b/src/murmur/Server.cpp
@@ -1041,7 +1041,7 @@ void Server::sendMessage(ServerUser &u, const unsigned char *data, int len, QByt
 			((reinterpret_cast< quint64 >(ebuffer.data()) + 8) & static_cast< quint64 >(~7)) + 4);
 #else
 		std::vector< char > bufVec;
-		bufVec.resize(len + 4);
+		bufVec.resize(static_cast< std::size_t >(len + 4));
 		char *buffer    = bufVec.data();
 #endif
 		{
--- a/src/murmur/ServerUser.h
+++ b/src/murmur/ServerUser.h
@@ -86,7 +86,7 @@ private:
 	unsigned int m_maxTokens;
 	/// The amount of tokens currently stored
 	/// (The amount of whater currently in the bucket)
-	long m_currentTokens;
+	qint64 m_currentTokens;
 	/// A timer that is used to measure time intervals. It is essential
 	/// that this timer uses a monotonic clock (which is why QElapsedTimer is
 	/// used instead of QTime or QDateTime).

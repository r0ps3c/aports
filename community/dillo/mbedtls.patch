Adapted from https://github.com/dillo-browser/dillo/commit/7357e0ee1e8ae1ee9259a3181e400db0d570362b


--- a/src/IO/tls.c
+++ b/src/IO/tls.c
@@ -49,7 +49,11 @@
 #include <mbedtls/error.h>
 #include <mbedtls/oid.h>
 #include <mbedtls/x509.h>
+#if MBEDTLS_VERSION_NUMBER < 0x03000000
 #include <mbedtls/net.h>    /* net_send, net_recv */
+#else
+#include <mbedtls/net_sockets.h>    /* net_send, net_recv */
+#endif
 
 #define CERT_STATUS_NONE 0
 #define CERT_STATUS_RECEIVING 1
@@ -98,6 +102,9 @@
 
 static void Tls_handshake_cb(int fd, void *vconnkey);
 
+/* Moved to ssl_ciphersuites_internal.h in mbedtls 3.6.0 */
+int mbedtls_ssl_ciphersuite_uses_psk(const mbedtls_ssl_ciphersuite_t *info);
+
 /*
  * Compare by FD.
  */
@@ -383,6 +390,15 @@
                                MBEDTLS_SSL_PRESET_DEFAULT);
    mbedtls_ssl_conf_cert_profile(&ssl_conf, &prof);
 
+/* 
+ * TLSv1.3 brings some changes, among them, having to call
+ * psa_crypto_init(), and a new way of resuming sessions,
+ * which is not currently supported by the code here.
+ */
+#if defined(MBEDTLS_SSL_PROTO_TLS1_3)
+   mbedtls_ssl_conf_max_tls_version(&ssl_conf, MBEDTLS_SSL_VERSION_TLS1_2);
+#endif
+
    /*
     * There are security concerns surrounding session tickets --
     * wrecking forward security, for instance.
@@ -618,15 +634,23 @@
  */
 static void Tls_cert_bad_hash(const mbedtls_x509_crt *cert, Dstr *ds)
 {
-   const char *hash = (cert->sig_md == MBEDTLS_MD_MD5) ? "MD5" :
-                      (cert->sig_md == MBEDTLS_MD_MD4) ? "MD4" :
-                      (cert->sig_md == MBEDTLS_MD_MD2) ? "MD2" :
-                      (cert->sig_md == MBEDTLS_MD_SHA1) ? "SHA1" :
-                      (cert->sig_md == MBEDTLS_MD_SHA224) ? "SHA224" :
-                      (cert->sig_md == MBEDTLS_MD_RIPEMD160) ? "RIPEMD160" :
-                      (cert->sig_md == MBEDTLS_MD_SHA256) ? "SHA256" :
-                      (cert->sig_md == MBEDTLS_MD_SHA384) ? "SHA384" :
-                      (cert->sig_md == MBEDTLS_MD_SHA512) ? "SHA512" :
+#if MBEDTLS_VERSION_NUMBER < 0x03000000
+   mbedtls_md_type_t md = cert->sig_md;
+#else
+   mbedtls_md_type_t md = cert->MBEDTLS_PRIVATE(sig_md);
+#endif
+   const char *hash = (md == MBEDTLS_MD_MD5) ? "MD5" :
+                      (md == MBEDTLS_MD_SHA1) ? "SHA1" :
+                      (md == MBEDTLS_MD_SHA224) ? "SHA224" :
+                      (md == MBEDTLS_MD_RIPEMD160) ? "RIPEMD160" :
+                      (md == MBEDTLS_MD_SHA256) ? "SHA256" :
+                      (md == MBEDTLS_MD_SHA384) ? "SHA384" :
+                      (md == MBEDTLS_MD_SHA512) ? "SHA512" :
+#if MBEDTLS_VERSION_NUMBER < 0x03000000
+/* In version 3, these are removed: */
+                      (md == MBEDTLS_MD_MD4) ? "MD4" :
+                      (md == MBEDTLS_MD_MD2) ? "MD2" :
+#endif
                       "Unrecognized";
 
    dStr_sprintfa(ds, "This certificate's hash algorithm is not accepted "
@@ -934,7 +958,12 @@
       return;
    }
 
-   if (conn->ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER) {
+#if MBEDTLS_VERSION_NUMBER < 0x03000000
+   int ssl_state = conn->ssl->state;
+#else
+   int ssl_state = conn->ssl->MBEDTLS_PRIVATE(state);
+#endif
+   if (ssl_state != MBEDTLS_SSL_HANDSHAKE_OVER) {
       ret = mbedtls_ssl_handshake(conn->ssl);
 
       if (ret == MBEDTLS_ERR_SSL_WANT_READ ||
@@ -977,16 +1006,22 @@
           * soon, unless there are radical changes". It seems to be the best of
           * the alternatives.
           */
+#if MBEDTLS_VERSION_NUMBER < 0x03000000
          Tls_fatal_error_msg(conn->ssl->in_msg[1]);
+#else
+         Tls_fatal_error_msg(conn->ssl->MBEDTLS_PRIVATE(in_msg[1]));
+#endif
       } else if (ret == MBEDTLS_ERR_SSL_INVALID_RECORD) {
          MSG("mbedtls_ssl_handshake() failed upon receiving 'an invalid "
              "record'.\n");
       } else if (ret == MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE) {
          MSG("mbedtls_ssl_handshake() failed: 'The requested feature is not "
              "available.'\n");
+#if MBEDTLS_VERSION_NUMBER < 0x03000000
       } else if (ret == MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE) {
          MSG("mbedtls_ssl_handshake() failed: 'Processing of the "
              "ServerKeyExchange handshake message failed.'\n");
+#endif
       } else if (ret == MBEDTLS_ERR_SSL_CONN_EOF) {
          MSG("mbedtls_ssl_handshake() failed: Read EOF. Connection closed by "
              "server.\n");

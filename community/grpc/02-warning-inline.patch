diff --git a/src/core/lib/promise/detail/promise_factory.h b/src/core/lib/promise/detail/promise_factory.h
index 53b75cb..7541719 100644
--- a/src/core/lib/promise/detail/promise_factory.h
+++ b/src/core/lib/promise/detail/promise_factory.h
@@ -125,7 +125,7 @@ struct OnceToken {};
 // Promote a callable(A) -> T | Poll<T> to a PromiseFactory(A) -> Promise<T> by
 // capturing A.
 template <typename Token, typename A, typename F>
-GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION
+GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION inline
     absl::enable_if_t<!IsVoidCallable<ResultOf<F(A)>>::value,
                       PromiseLike<Curried<RemoveCVRef<F>, A>>>
     PromiseFactoryImpl(Token, F&& f, A&& arg) {
@@ -195,7 +195,7 @@ PromiseFactoryImpl(Token, F& f, A&& arg) {
 // Given a callable() -> Promise<T>, promote it to a
 // PromiseFactory(A) -> Promise<T> by dropping the first argument.
 template <typename Token, typename A, typename F>
-GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION
+GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION inline
     absl::enable_if_t<IsVoidCallable<ResultOf<F()>>::value,
                       PromiseLike<decltype(std::declval<F>()())>>
     PromiseFactoryImpl(Token, F&& f, A&&) {
@@ -204,7 +204,7 @@ GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION
 
 // Given a callable() -> Promise<T>, name it a PromiseFactory and use it.
 template <typename Token, typename F>
-GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION
+GPR_ATTRIBUTE_ALWAYS_INLINE_FUNCTION inline
     absl::enable_if_t<IsVoidCallable<ResultOf<F()>>::value,
                       PromiseLike<decltype(std::declval<F>()())>>
     PromiseFactoryImpl(Token, F&& f) {

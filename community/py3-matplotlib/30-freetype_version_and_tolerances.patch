From d2ce17b7096e9f83f9ba4ac37052fe5d2e07f223 Mon Sep 17 00:00:00 2001
From: Elliott Sales de Andrade <quantum.analyst@gmail.com>
Date: Fri, 14 Feb 2020 06:05:42 -0500
Subject: [PATCH 3/4] Set FreeType version to 2.13.1 and update tolerances

Signed-off-by: Elliott Sales de Andrade <quantum.analyst@gmail.com>
---
 extern/meson.build                             |  2 +-
 lib/matplotlib/__init__.py                     |  2 +-
 lib/matplotlib/tests/test_axes.py              |  4 ++--
 lib/matplotlib/tests/test_backend_pgf.py       |  2 +-
 lib/matplotlib/tests/test_constrainedlayout.py | 10 +++++-----
 lib/matplotlib/tests/test_legend.py            |  4 ++--
 lib/matplotlib/tests/test_polar.py             |  2 +-
 lib/matplotlib/tests/test_tightlayout.py       | 10 +++++-----
 8 files changed, 18 insertions(+), 18 deletions(-)

diff --git a/extern/meson.build b/extern/meson.build
index 662feb7872..df42b908af 100644
--- a/extern/meson.build
+++ b/extern/meson.build
@@ -14,7 +14,7 @@ else
   # must match the value in `lib/matplotlib.__init__.py`. Also update the docs
   # in `docs/devel/dependencies.rst`. Bump the cache key in
   # `.circleci/config.yml` when changing requirements.
-  LOCAL_FREETYPE_VERSION = '2.6.1'
+  LOCAL_FREETYPE_VERSION = '2.13.1'

   freetype_proj = subproject(
     f'freetype-@LOCAL_FREETYPE_VERSION@',
diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py
index 346e3d3454..ebf5818417 100644
--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -1313,7 +1313,7 @@ def _val_or_rc(val, rc_name):
 def _init_tests():
     # The version of FreeType to install locally for running the tests. This must match
     # the value in `meson.build`.
-    LOCAL_FREETYPE_VERSION = '2.6.1'
+    LOCAL_FREETYPE_VERSION = '2.13.1'

     from matplotlib import ft2font
     if (ft2font.__freetype_version__ != LOCAL_FREETYPE_VERSION or
diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py
index 0ed5a11c13..ee220f1854 100644
--- a/lib/matplotlib/tests/test_axes.py
+++ b/lib/matplotlib/tests/test_axes.py
@@ -7714,7 +7714,7 @@ def test_normal_axes():
     ]
     for nn, b in enumerate(bbaxis):
         targetbb = mtransforms.Bbox.from_bounds(*target[nn])
-        assert_array_almost_equal(b.bounds, targetbb.bounds, decimal=2)
+        assert_array_almost_equal(b.bounds, targetbb.bounds, decimal=0)

     target = [
         [150.0, 119.999, 930.0, 11.111],
@@ -7732,7 +7732,7 @@ def test_normal_axes():

     target = [85.5138, 75.88888, 1021.11, 1017.11]
     targetbb = mtransforms.Bbox.from_bounds(*target)
-    assert_array_almost_equal(bbtb.bounds, targetbb.bounds, decimal=2)
+    assert_array_almost_equal(bbtb.bounds, targetbb.bounds, decimal=0)

     # test that get_position roundtrips to get_window_extent
     axbb = ax.get_position().transformed(fig.transFigure).bounds
diff --git a/lib/matplotlib/tests/test_backend_pgf.py b/lib/matplotlib/tests/test_backend_pgf.py
index 8a83515f16..26bc9d6c48 100644
--- a/lib/matplotlib/tests/test_backend_pgf.py
+++ b/lib/matplotlib/tests/test_backend_pgf.py
@@ -165,7 +165,7 @@ def test_pathclip():
 # test mixed mode rendering
 @needs_pgf_xelatex
 @pytest.mark.backend('pgf')
-@image_comparison(['pgf_mixedmode.pdf'], style='default')
+@image_comparison(['pgf_mixedmode.pdf'], style='default', tol=0.87)
 def test_mixedmode():
     mpl.rcParams.update({'font.family': 'serif', 'pgf.rcfonts': False})
     Y, X = np.ogrid[-1:1:40j, -1:1:40j]
diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py
index 4dc4d9501e..47a4e80bb5 100644
--- a/lib/matplotlib/tests/test_constrainedlayout.py
+++ b/lib/matplotlib/tests/test_constrainedlayout.py
@@ -435,7 +435,7 @@ def test_hidden_axes():
     extents1 = np.copy(axs[0, 0].get_position().extents)

     np.testing.assert_allclose(
-        extents1, [0.045552, 0.543288, 0.47819, 0.982638], rtol=1e-5)
+        extents1, [0.045552, 0.543288, 0.47819, 0.982638], rtol=1e-2)


 def test_colorbar_align():
@@ -641,9 +641,9 @@ def test_compressed1():
     fig.draw_without_rendering()

     pos = axs[0, 0].get_position()
-    np.testing.assert_allclose(pos.x0, 0.2344, atol=1e-3)
+    np.testing.assert_allclose(pos.x0, 0.2344, atol=1e-2)
     pos = axs[0, 1].get_position()
-    np.testing.assert_allclose(pos.x1, 0.7024, atol=1e-3)
+    np.testing.assert_allclose(pos.x1, 0.7024, atol=1e-2)

     # wider than tall
     fig, axs = plt.subplots(2, 3, layout='compressed',
@@ -656,10 +656,10 @@ def test_compressed1():

     pos = axs[0, 0].get_position()
     np.testing.assert_allclose(pos.x0, 0.06195, atol=1e-3)
-    np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)
+    np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-2)
     pos = axs[1, 2].get_position()
     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)
-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)
+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-2)


 @pytest.mark.parametrize('arg, state', [
diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py
index 0353f1408b..f5b341daaa 100644
--- a/lib/matplotlib/tests/test_legend.py
+++ b/lib/matplotlib/tests/test_legend.py
@@ -520,9 +520,9 @@ def test_figure_legend_outside():
         fig.draw_without_rendering()

         assert_allclose(axs.get_window_extent().extents,
-                        axbb[nn])
+                        axbb[nn], rtol=1)
         assert_allclose(leg.get_window_extent().extents,
-                        legbb[nn])
+                        legbb[nn], rtol=1)


 @image_comparison(['legend_stackplot.png'],
diff --git a/lib/matplotlib/tests/test_polar.py b/lib/matplotlib/tests/test_polar.py
index 6b3c08d2eb..5160112e37 100644
--- a/lib/matplotlib/tests/test_polar.py
+++ b/lib/matplotlib/tests/test_polar.py
@@ -321,7 +321,7 @@ def test_get_tightbbox_polar():
     fig.canvas.draw()
     bb = ax.get_tightbbox(fig.canvas.get_renderer())
     assert_allclose(
-        bb.extents, [107.7778,  29.2778, 539.7847, 450.7222], rtol=1e-03)
+        bb.extents, [107.7778,  29.2778, 539.7847, 450.7222], rtol=1)


 @check_figures_equal(extensions=["png"])
diff --git a/lib/matplotlib/tests/test_tightlayout.py b/lib/matplotlib/tests/test_tightlayout.py
index 9c654f4d1f..9678e34a80 100644
--- a/lib/matplotlib/tests/test_tightlayout.py
+++ b/lib/matplotlib/tests/test_tightlayout.py
@@ -174,13 +174,13 @@ def test_outward_ticks():
     # These values were obtained after visual checking that they correspond
     # to a tight layouting that did take the ticks into account.
     expected = [
-        [[0.091, 0.607], [0.433, 0.933]],
-        [[0.579, 0.607], [0.922, 0.933]],
-        [[0.091, 0.140], [0.433, 0.466]],
-        [[0.579, 0.140], [0.922, 0.466]],
+        [[0.09, 0.61], [0.43, 0.93]],
+        [[0.58, 0.61], [0.92, 0.93]],
+        [[0.09, 0.14], [0.43, 0.47]],
+        [[0.58, 0.14], [0.92, 0.47]],
     ]
     for nn, ax in enumerate(fig.axes):
-        assert_array_equal(np.round(ax.get_position().get_points(), 3),
+        assert_array_equal(np.round(ax.get_position().get_points(), 2),
                            expected[nn])


--
2.44.0


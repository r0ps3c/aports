diff --git a/usr/bs_rdwr.c b/usr/bs_rdwr.c
index ee5f085..acacc3a 100644
--- a/usr/bs_rdwr.c
+++ b/usr/bs_rdwr.c
@@ -78,7 +78,7 @@ static void bs_rdwr_request(struct scsi_cmd *cmd)
 			break;
 		}
 
-		ret = pread64(fd, tmpbuf, length, offset);
+		ret = pread(fd, tmpbuf, length, offset);
 
 		if (ret != length) {
 			set_medium_error(cmd);
@@ -113,7 +113,7 @@ static void bs_rdwr_request(struct scsi_cmd *cmd)
 			break;
 		}
 
-		ret = pread64(fd, tmpbuf, length, offset);
+		ret = pread(fd, tmpbuf, length, offset);
 
 		if (ret != length) {
 			set_medium_error(cmd);
@@ -175,7 +175,7 @@ static void bs_rdwr_request(struct scsi_cmd *cmd)
 		length = scsi_get_out_length(cmd);
 		write_buf = scsi_get_out_buffer(cmd);
 write:
-		ret = pwrite64(fd, write_buf, length,
+		ret = pwrite(fd, write_buf, length,
 			       offset);
 		if (ret == length) {
 			struct mode_pg *pg;
@@ -233,7 +233,7 @@ write:
 				break;
 			}
 
-			ret = pwrite64(fd, tmpbuf, blocksize, offset);
+			ret = pwrite(fd, tmpbuf, blocksize, offset);
 			if (ret != blocksize)
 				set_medium_error(cmd);
 
@@ -246,7 +246,7 @@ write:
 	case READ_12:
 	case READ_16:
 		length = scsi_get_in_length(cmd);
-		ret = pread64(fd, scsi_get_in_buffer(cmd), length,
+		ret = pread(fd, scsi_get_in_buffer(cmd), length,
 			      offset);
 
 		if (ret != length)
@@ -278,7 +278,7 @@ verify:
 			break;
 		}
 
-		ret = pread64(fd, tmpbuf, length, offset);
+		ret = pread(fd, tmpbuf, length, offset);
 
 		if (ret != length)
 			set_medium_error(cmd);
diff --git a/usr/bs_ssc.c b/usr/bs_ssc.c
index 5119163..711541f 100644
--- a/usr/bs_ssc.c
+++ b/usr/bs_ssc.c
@@ -179,7 +179,7 @@ static int append_blk(struct scsi_cmd *cmd, uint8_t *data,
 
 	/* Write any data */
 	if (size) {
-		ret = pwrite64(fd, data, size,
+		ret = pwrite(fd, data, size,
 			       curr->curr + SSC_BLK_HDR_SIZE);
 		if (ret != size) {
 			eprintf("Write of data failed: %m\n");
@@ -349,7 +349,7 @@ static int resp_var_read(struct scsi_cmd *cmd, uint8_t *buf, uint32_t length,
 		}
 	}
 
-	ret = pread64(cmd->dev->fd, buf, length, h->curr + SSC_BLK_HDR_SIZE);
+	ret = pread(cmd->dev->fd, buf, length, h->curr + SSC_BLK_HDR_SIZE);
 	if (ret != length) {
 		sense_data_build(cmd, MEDIUM_ERROR, ASC_READ_ERROR);
 		result = SAM_STAT_CHECK_CONDITION;
@@ -404,7 +404,7 @@ static int resp_fixed_read(struct scsi_cmd *cmd, uint8_t *buf, uint32_t length,
 			goto out;
 		}
 
-		residue = pread64(fd, buf, block_length,
+		residue = pread(fd, buf, block_length,
 				  h->curr + SSC_BLK_HDR_SIZE);
 		if (block_length != residue) {
 			eprintf("Could only read %d bytes, not %d\n",
diff --git a/usr/libssc.c b/usr/libssc.c
index a31968b..7057892 100644
--- a/usr/libssc.c
+++ b/usr/libssc.c
@@ -57,7 +57,7 @@ int ssc_read_mam_info(int fd, struct MAM_info *i)
 	if (ret != sizeof(struct MAM))
 		return 1;
 
-	if (lseek64(fd, SSC_1ST_HDR_OFFSET, SEEK_SET) != SSC_1ST_HDR_OFFSET)
+	if (lseek(fd, SSC_1ST_HDR_OFFSET, SEEK_SET) != SSC_1ST_HDR_OFFSET)
 		return 1;
 
 	SSC_GET_MAM_INFO_VAL(tape_fmt_version, 32);
@@ -176,7 +176,7 @@ int ssc_write_mam_info(int fd, struct MAM_info *i)
 	if (ret != sizeof(struct MAM))
 		return 1;
 
-	if (lseek64(fd, SSC_1ST_HDR_OFFSET, SEEK_SET) != SSC_1ST_HDR_OFFSET)
+	if (lseek(fd, SSC_1ST_HDR_OFFSET, SEEK_SET) != SSC_1ST_HDR_OFFSET)
 		return 1;
 
 	return  0;
@@ -188,7 +188,7 @@ int ssc_read_blkhdr(int fd, struct blk_header_info *i, loff_t offset)
 	struct blk_header h, *m = &h;
 	uint32_t crc = ~0;
 
-	count = pread64(fd, m, SSC_BLK_HDR_SIZE, offset);
+	count = pread(fd, m, SSC_BLK_HDR_SIZE, offset);
 	if (count != SSC_BLK_HDR_SIZE)
 		return 1;
 
@@ -225,7 +225,7 @@ int ssc_write_blkhdr(int fd, struct blk_header_info *i, loff_t offset)
 	crc = crc32c(crc, &m->ondisk_sz, SSC_BLK_HDR_SIZE - sizeof(m->h_csum));
 	*(uint32_t *)m->h_csum = ~crc;
 
-	count = pwrite64(fd, m, SSC_BLK_HDR_SIZE, offset);
+	count = pwrite(fd, m, SSC_BLK_HDR_SIZE, offset);
 	if (count != SSC_BLK_HDR_SIZE)
 		return 1;
 
diff --git a/usr/sbc.c b/usr/sbc.c
index 779dacd..f21369f 100644
--- a/usr/sbc.c
+++ b/usr/sbc.c
@@ -52,7 +52,7 @@ static unsigned int blk_shift = DEFAULT_BLK_SHIFT;
 static off_t find_next_data(struct scsi_lu *dev, off_t offset)
 {
 #ifdef SEEK_DATA
-	return lseek64(dev->fd, offset, SEEK_DATA);
+	return lseek(dev->fd, offset, SEEK_DATA);
 #else
 	return offset;
 #endif
@@ -60,7 +60,7 @@ static off_t find_next_data(struct scsi_lu *dev, off_t offset)
 static off_t find_next_hole(struct scsi_lu *dev, off_t offset)
 {
 #ifdef SEEK_HOLE
-	return lseek64(dev->fd, offset, SEEK_HOLE);
+	return lseek(dev->fd, offset, SEEK_HOLE);
 #else
 	return dev->size;
 #endif
diff --git a/usr/tgtimg.c b/usr/tgtimg.c
index 99f9111..11d51c1 100644
--- a/usr/tgtimg.c
+++ b/usr/tgtimg.c
@@ -327,7 +327,7 @@ static int ssc_new(int op, char *path, char *barcode, char *capacity,
 	h->blk_type = BLK_EOD;
 	h->blk_num = 1;
 	h->prev = 0;
-	h->next = lseek64(fd, 0, SEEK_CUR);
+	h->next = lseek(fd, 0, SEEK_CUR);
 	h->curr = h->next;
 
 	ret = ssc_write_blkhdr(fd, h, h->next);
diff --git a/usr/util.c b/usr/util.c
index 1500dec..66d2e75 100644
--- a/usr/util.c
+++ b/usr/util.c
@@ -85,7 +85,7 @@ int chrdev_open(char *modname, char *devpath, uint8_t minor, int *fd)
 int backed_file_open(char *path, int oflag, uint64_t *size, uint32_t *blksize)
 {
 	int fd, err;
-	struct stat64 st;
+	struct stat st;
 
 	fd = open(path, oflag);
 	if (fd < 0) {
@@ -93,7 +93,7 @@ int backed_file_open(char *path, int oflag, uint64_t *size, uint32_t *blksize)
 		return fd;
 	}
 
-	err = fstat64(fd, &st);
+	err = fstat(fd, &st);
 	if (err < 0) {
 		eprintf("Cannot get stat %d, %m\n", fd);
 		goto close_fd;

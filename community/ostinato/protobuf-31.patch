diff --git a/common/pythonfileformat.cpp b/common/pythonfileformat.cpp
index b11efc8..a87c8ac 100644
--- a/common/pythonfileformat.cpp
+++ b/common/pythonfileformat.cpp
@@ -90,24 +90,24 @@ bool PythonFileFormat::save(const OstProto::StreamConfigList streams,
                          fields.at(k)->message_type()->file()->name()) {
                     imports.insert(
                             QString("%1 import %2").arg(
-                                QString(fields.at(k)->message_type()
-                                        ->file()->name().c_str())
+                                QString::fromStdString(std::string(fields.at(k)->message_type()
+                                        ->file()->name()))
                                     .replace(".proto", "_pb2"),
-                                fields.at(k)->message_type()->name().c_str()));
+                                QString::fromStdString(std::string(fields.at(k)->message_type()->name()))));
                     imports.insert(
                             QString("%1 import %2").arg(
-                                QString(fields.at(k)
-                                        ->file()->name().c_str())
+                                QString::fromStdString(std::string(fields.at(k)
+                                        ->file()->name()))
                                     .replace(".proto", "_pb2"),
-                                fields.at(k)->name().c_str()));
+                                QString::fromStdString(std::string(fields.at(k)->name()))));
                 }
                 else {
                     imports.insert(
                             QString("%1 import %2, %3").arg(
-                                QString(fields.at(k)->file()->name().c_str())
+                                QString::fromStdString(std::string(fields.at(k)->file()->name()))
                                 .replace(".proto", "_pb2"),
-                                fields.at(k)->message_type()->name().c_str(),
-                                fields.at(k)->name().c_str()));
+                                QString::fromStdString(std::string(fields.at(k)->message_type()->name())),
+                                QString::fromStdString(std::string(fields.at(k)->name()))));
                 }
             }
         }
@@ -166,7 +166,7 @@ bool PythonFileFormat::save(const OstProto::StreamConfigList streams,
         refl->ListFields(stream.core(), &fields);
         for (uint j = 0; j < fields.size(); j++) {
             writeFieldAssignment(out, QString("    s.core.")
-                                        .append(fields.at(j)->name().c_str()),
+                                        .append(QString::fromStdString(std::string(fields.at(j)->name()))),
                     stream.core(), refl, fields.at(j));
         }
          
@@ -175,7 +175,7 @@ bool PythonFileFormat::save(const OstProto::StreamConfigList streams,
         refl->ListFields(stream.control(), &fields);
         for (uint j = 0; j < fields.size(); j++) {
             writeFieldAssignment(out, QString("    s.control.")
-                                        .append(fields.at(j)->name().c_str()),
+                                        .append(QString::fromStdString(std::string(fields.at(j)->name()))),
                     stream.control(), refl, fields.at(j));
         }
 
@@ -186,9 +186,9 @@ bool PythonFileFormat::save(const OstProto::StreamConfigList streams,
             out << "\n"
                 << "    p = s.protocol.add()\n"
                 << "    p.protocol_id.id = "
-                << QString(OstProto::Protocol_k_descriptor()
+                << QString::fromStdString(std::string(OstProto::Protocol_k_descriptor()
                             ->FindValueByNumber(protocol.protocol_id().id())
-                                ->full_name().c_str())
+                                ->full_name()))
                         .replace("OstProto", "ost_pb");
             out << "\n";
             refl = protocol.GetReflection();
@@ -201,7 +201,7 @@ bool PythonFileFormat::save(const OstProto::StreamConfigList streams,
                     continue;
                 QString pfx("    p.Extensions[X]");
                 pfx.replace(fields.at(k)->is_extension()? "X": "Extensions[X]",
-                        fields.at(k)->name().c_str());
+                        QString::fromStdString(std::string(fields.at(k)->name())));
                 writeFieldAssignment(out, pfx, protocol,
                         refl, fields.at(k));
             }
@@ -352,7 +352,7 @@ void PythonFileFormat::writeFieldAssignment(
     //     if index >= 0 => we are writing a repeated element 
     if (fieldDesc->is_repeated() && (index < 0)) {
         int n = refl->FieldSize(msg, fieldDesc);
-        QString var = singularize(fieldDesc->name().c_str());
+        QString var = singularize(QString::fromStdString(std::string(fieldDesc->name())));
         for (int i = 0; i < n; i++) {
             out << "    " << var << " = " << fieldName.trimmed() << ".add()\n";
             writeFieldAssignment(out, QString("    ").append(var), 
@@ -470,8 +470,8 @@ void PythonFileFormat::writeFieldAssignment(
             QString module = fieldDesc->file()->name() == "protocol.proto" ? 
                                 "ost_pb." : "";
             std::string val = fieldDesc->is_repeated() ?
-                refl->GetRepeatedEnum(msg, fieldDesc, index)->full_name() :
-                refl->GetEnum(msg, fieldDesc)->full_name();
+                std::string(refl->GetRepeatedEnum(msg, fieldDesc, index)->full_name()) :
+                std::string(refl->GetEnum(msg, fieldDesc)->full_name());
             if (val != fieldDesc->default_value_enum()->full_name())
                 out << fieldName << " = " << QString::fromStdString(val)
                                                  .replace("OstProto.", module)
@@ -499,7 +499,7 @@ void PythonFileFormat::writeFieldAssignment(
             // We attempt a crude hack here to detect such fields and avoid
             // writing assignment statements for them
             for (uint i = 0; i < fields2.size(); i++) {
-                std::string name = fields2.at(i)->name();
+                std::string name = std::string(fields2.at(i)->name());
                 if ((fields2.at(i)->cpp_type() 
                             == FieldDescriptor::CPPTYPE_BOOL)
                         && (name.find("is_override_") == 0)
@@ -511,12 +511,12 @@ void PythonFileFormat::writeFieldAssignment(
 
             for (uint i = 0 ; i < fields2.size(); i++) {
                 // skip auto fields that are not overridden
-                if (autoFields.contains(fields2.at(i)->name()))
+                if (autoFields.contains(std::string(fields2.at(i)->name())))
                     continue;
 
                 writeFieldAssignment(out, 
                         QString("%1.%2").arg(pfxStr, 
-                                             fields2.at(i)->name().c_str()),
+                                             QString::fromStdString(std::string(fields2.at(i)->name()))),
                         msg2, refl2, fields2.at(i));
             }
             break;
diff --git a/rpc/pbrpcchannel.cpp b/rpc/pbrpcchannel.cpp
index 8a87791..54481ae 100644
--- a/rpc/pbrpcchannel.cpp
+++ b/rpc/pbrpcchannel.cpp
@@ -108,7 +108,7 @@ void PbRpcChannel::CallMethod(
         qDebug("RpcChannel: queueing rpc since method %d is pending;<----\n "
                 "queued method = %d:%s\n"
                 "queued message = \n%s\n---->", 
-                pendingMethodId, method->index(), method->name().c_str(),
+                pendingMethodId, method->index(), std::string(method->name()),
                 req->DebugString().c_str());
 
         call.method = method;
@@ -128,7 +128,7 @@ void PbRpcChannel::CallMethod(
     if (!req->IsInitialized())
     {
         qWarning("RpcChannel: missing required fields in request <----");
-        qDebug("req = %s\n%s", method->input_type()->name().c_str(),
+        qDebug("req = %s\n%s", std::string(method->input_type()->name()),
                 req->DebugString().c_str());
         qDebug("error = \n%s\n--->", req->InitializationErrorString().c_str());
 
@@ -156,8 +156,8 @@ void PbRpcChannel::CallMethod(
                 PB_HDR_SIZE + len);
         BUFDUMP(msg, PB_HDR_SIZE);
         qDebug("method = %d:%s\n req = %s\n%s\n---->",
-                method->index(), method->name().c_str(),
-                method->input_type()->name().c_str(),
+                method->index(), std::string(method->name()),
+                std::string(method->input_type()->name()),
                 req->DebugString().c_str());
     }
 
@@ -307,8 +307,8 @@ _top:
             {
                 qDebug("client(%s): Received Msg <---- ", __FUNCTION__);
                 qDebug("method = %d:%s\nresp = %s\n%s\n---->",
-                        methodId, this->method->name().c_str(),
-                        this->method->output_type()->name().c_str(),
+                        methodId, std::string(this->method->name()),
+                        std::string(this->method->output_type()->name()),
                         response->DebugString().c_str());
             }
 
@@ -316,7 +316,7 @@ _top:
             {
                 qWarning("RpcChannel: missing required fields in response <----");
                 qDebug("resp = %s\n%s",
-                        this->method->output_type()->name().c_str(),
+                        std::string(this->method->output_type()->name()),
                         response->DebugString().c_str());
                 qDebug("error = \n%s\n--->", 
                         response->InitializationErrorString().c_str());
@@ -443,8 +443,8 @@ _top:
         qDebug("RpcChannel: executing queued method <----\n"
                "method = %d:%s\n"
                "req = %s\n%s\n---->",
-                call.method->index(), call.method->name().c_str(),
-                call.method->input_type()->name().c_str(),
+                call.method->index(), std::string(call.method->name()),
+                std::string(call.method->input_type()->name()),
                 call.request->DebugString().c_str());
         CallMethod(call.method, call.controller, call.request, call.response,
                 call.done);
diff --git a/rpc/rpcconn.cpp b/rpc/rpcconn.cpp
index 566f096..a1e9c5e 100644
--- a/rpc/rpcconn.cpp
+++ b/rpc/rpcconn.cpp
@@ -181,8 +181,8 @@ void RpcConnection::sendRpcReply(
             __FUNCTION__, len + PB_HDR_SIZE);
         BUFDUMP(msg, 8);
         qDebug("method = %d:%s\nresp = %s\n%s---->",
-            pendingMethodId, method ? method->name().c_str() : "",
-            method ? method->output_type()->name().c_str() : "",
+            pendingMethodId, method ? std::string(method->name()) : "",
+            method ? std::string(method->output_type()->name()) : "",
             response->DebugString().c_str());
     }
 
@@ -332,8 +332,8 @@ void RpcConnection::on_clientSock_dataAvail()
         qDebug("server(%s): rpc pending, try again", __FUNCTION__);
         error = QString("RPC %1() is pending; only one RPC allowed at a time; "
                         "try again!").arg(QString::fromStdString(
-                            service->GetDescriptor()->method(
-                                pendingMethodId)->name()));
+                            std::string(service->GetDescriptor()->method(
+                                pendingMethodId)->name())));
         goto _error_exit;
     }
 
@@ -348,7 +348,7 @@ void RpcConnection::on_clientSock_dataAvail()
         if (!ok)
             qWarning("ParseFromBoundedZeroCopyStream fail "
                      "for method %d:%s and len %d",
-                     method, methodDesc->name().c_str(),len);
+                     method, std::string(methodDesc->name()),len);
     }
 
     if (!req->IsInitialized())
@@ -357,14 +357,14 @@ void RpcConnection::on_clientSock_dataAvail()
         qDebug("method = %d:%s\n"
                "req = %s\n%s"
                "missing = \n%s----->",
-                method, methodDesc->name().c_str(),
-                methodDesc->input_type()->name().c_str(),
+                method, std::string(methodDesc->name()),
+                std::string(methodDesc->input_type()->name()),
                 req->DebugString().c_str(),
                 req->InitializationErrorString().c_str());
         error = QString("RPC %1() missing required fields in request - %2")
                     .arg(QString::fromStdString(
-                                service->GetDescriptor()->method(
-                                    pendingMethodId)->name()),
+                                std::string(service->GetDescriptor()->method(
+                                    pendingMethodId)->name())),
                         QString(req->InitializationErrorString().c_str()));
         delete req;
         delete resp;
@@ -376,8 +376,8 @@ void RpcConnection::on_clientSock_dataAvail()
         qDebug("Server(%s): successfully received/parsed msg <----", __FUNCTION__);
         qDebug("method = %d:%s\n"
                "req = %s\n%s---->",
-                method, methodDesc->name().c_str(),
-                methodDesc->input_type()->name().c_str(),
+                method, std::string(methodDesc->name()),
+                std::string(methodDesc->input_type()->name()),
                 req->DebugString().c_str());
     }
 

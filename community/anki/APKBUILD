# Contributor: Alexander Bocken <alexander@bocken.org>
# Contributor: Frank Oltmanns <alpine@oltmanns.dev>
maintainer="Callum Andrew <contact@candrew.net>"
pkgname=anki
pkgver=25.07.2
pkgrel=0
# Remember to update the following lines when updating the pkgver
# 1. checkout the release tag
# 2. anki -> git rev-parse --short=8 $pkgver^{}
# 3. ftl -> git submodule
_tags_ftl_core="3d04bcbf7fefca0007bc9db307409d88210995d8"
_tags_ftl_desktop="c65a9587b1f18931986bdf145872e8e4c44c5c82"
_anki_commit="3adcf05c"

# This APKBUILD and the patches use the PKGBUILD for Anki 23.10 as
# a basis.
_caches_yarn="yarn-cache"
_caches_cargo="cargo-cache"

# For translations
_core_i18n_repo="anki-core-i18n"
_qtftl_i18n_repo="anki-desktop-ftl"

pkgdesc="Flashcard program using spaced repetition"
url="https://apps.ankiweb.net/"

# py3-pyqt6-webengine is only available for
#  - x86_64
#  - aarch64
#  - x86
# But upstream only supports 64-bit architectures:
arch="x86_64 aarch64"
license="AGPL-3.0-or-later"
options="!check net" # no test suite provided, cargo deps

# The makedepends and depends are copied from the PKGBUILD
# for 23.10 in the Arch User Repository, with the exception
# that libxcrypt-compat has been removed from that list.
makedepends="
	bash
	cargo
	git
	nodejs
	protoc
	py3-installer
	py3-wheel
	rsync
	samurai
	uv
	yarn
	"

depends="
	python3
	py3-beautifulsoup4
	py3-requests
	py3-stringcase
	py3-waitress

	py3-decorator
	py3-distro
	py3-markdown
	py3-orjson
	py3-protobuf
	py3-pysocks

	py3-certifi
	py3-flask-cors
	py3-jsonschema
	py3-pyqt6-webengine
	py3-qt6
	qt6-qtmultimedia
	qt6-qtsvg
	py3-send2trash
	"
subpackages="$pkgname-doc $pkgname-pyc"
source="
	anki-$pkgver.tar.gz::https://github.com/ankitects/anki/archive/refs/tags/$pkgver.tar.gz
	anki-core-i18n-$_tags_ftl_core.tar.gz::https://github.com/ankitects/anki-core-i18n/archive/$_tags_ftl_core.tar.gz
	anki-desktop-ftl-$_tags_ftl_desktop.tar.gz::https://github.com/ankitects/anki-desktop-ftl/archive/$_tags_ftl_desktop.tar.gz
	no-update.patch
	strip-formatter-deps.patch
	strip-python-pip-system-certs.patch
	strip-type-checking-deps.patch
	"

prepare() {
	default_prepare

	# Notes:
	# - The original PKGBUILD changes the optimization level to "3". Instead
	#   the APKBUILD sticks to upstream's optimization settings.
	# - The original PKGBUILD changes the rust toolchain channel to
	#   "stable". Since, the APKBUILD doesn't use rustup, we can skip that.

	# Build process wants .git/HEAD to be present. Workaround to be able to use tarballs.
	mkdir -p out .git
	touch .git/HEAD
	echo "$_anki_commit" > out/buildhash	# manually write the buildhash into out/buildhash to avoid git dependency in build

	# place translations in build dir
	rm -r ftl/core-repo ftl/qt-repo
	mv "$srcdir"/anki-core-i18n-$_tags_ftl_core ftl/core-repo
	mv "$srcdir"/anki-desktop-ftl-$_tags_ftl_desktop ftl/qt-repo

	# fetch rust packages
	export CARGO_HOME="$srcdir/$_caches_cargo"       # do not litter in ~
	cargo fetch --target="$CTARGET" --locked

	# Remove any corepack references to build with normal system yarn
	rm -f yarn.lock
	sed -i 's/"type": "module",/"type": "module"/' package.json
	sed -i '/packageManager/d' package.json
	sed -i 's/"corepack enable yarn"/"true"/' ./build/ninja_gen/src/node.rs

	# fetch node packages already in prepare()
	export YARN_CACHE_FOLDER="$srcdir/$_caches_yarn" # do not litter in ~
	yarn install --modules-folder out/node_modules --ignore-scripts
	ln -sf out/node_modules ./

	# mask pip-sync as we provide dependencies ourselves
	local venv="out/pyenv"
	python3 -m venv --system-site-packages --without-pip "$venv"
	printf '#!/bin/bash\nexit 0' > "$venv/bin/pip-sync"
	chmod +x "$venv/bin/pip-sync"
}

build() {
	export YARN_CACHE_FOLDER="$srcdir/$_caches_yarn" # do not litter in ~

	# Use local binaries instead of downloading them
	export NODE_BINARY=$(which node)
	export PROTOC_BINARY=$(which protoc)
	export PYTHON_BINARY=$(which python3)
	export UV_BINARY=$(which uv)
	export UV_PYTHON=$(which python3)
	export YARN_BINARY=$(which yarn)

	export CARGO_HOME="$srcdir/$_caches_cargo"    # do not litter in ~
	export RELEASE=2        # anki-internal variable for optimization
	                        # set to "1" for faster but less optimized build
	export LDFLAGS="$LDFLAGS -fuse-ld=lld"

	export OFFLINE_BUILD=1 # do not download anything, disables git update check

	./ninja wheels
}

package() {
	for file in out/wheels/*.whl; do
		python3 -m installer -d "$pkgdir" $file
	done

	cd qt/launcher/lin
	install -Dm644 anki.desktop "$pkgdir"/usr/share/applications/anki.desktop
	install -Dm644 anki.png "$pkgdir"/usr/share/pixmaps/anki.png
	install -Dm644 anki.xpm "$pkgdir"/usr/share/pixmaps/anki.xpm
	install -Dm644 anki.1 "$pkgdir"/usr/share/man/man1/anki.1
	install -Dm644 anki.xml "$pkgdir"/usr/share/mime/application/anki.xml
}

sha512sums="
061e872d41ccdd89a40dd08cb49fcaced80b3f3cf23c58e80d54fbc90ca6b5734acc0f946bc0b190f2ae288b089f6a6edfb31809366b634a5299d6fea0b703ca  anki-25.07.2.tar.gz
dbfc9c93b70c39c52748c3a913a88dd08292238c0dcad42eb675671b07c1020858e95556cb64bfaf5e7c9610fcda580e99b5e07b65dbe433842919f1301c528e  anki-core-i18n-3d04bcbf7fefca0007bc9db307409d88210995d8.tar.gz
06343bb975c5a6bfa39b437d4535667d4946e231285ed0f641d2c93c6b80a665f59609c3319207939e615de138a077ebf3c7d7b024df0dd0c55cf9effa09f1f4  anki-desktop-ftl-c65a9587b1f18931986bdf145872e8e4c44c5c82.tar.gz
36c3bddb5de84f0f5eebe46b506b9723ecc80dd69281b3d2ffc9842fa2db181ececd8232ae0b3366bcfd5cb68a4d760abcadd3dada2a7ce2d2da26586a132e09  no-update.patch
25d03a5d22a8e2aa59c1ec5aa863704b01f9598714c3795b8fe84a71291a651adf246b0e3b731ba72a7b8b77523e3946fe1ae2d9547477712e1031892a884c70  strip-formatter-deps.patch
0341faba5f23023d4a1774704daa6e805af4932a79ddff256b436de9071d9a3460d114ef24d4ae0bc53e59a4e1e595eb4d8b9c0ce7e923f1b45797b6177da036  strip-python-pip-system-certs.patch
2c7d1ab46d81e65f22e63cb5af37daef27a78d348f240570f9250730d6b33311670876027fd1c54d4c69922c18a7458e82211cb232e98591e182ac11c49877db  strip-type-checking-deps.patch
"

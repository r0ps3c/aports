From fb364acf76aff0e5e78de523711070fbaf492336 Mon Sep 17 00:00:00 2001
From: Ian Jackson <ijackson@chiark.greenend.org.uk>
Date: Thu, 8 Feb 2024 19:01:58 +0000
Subject: [PATCH] tor-hsservice: replay log test: Plumb output manually

Something libtest is doing hides the child stderr/stdout from the test
log, when --nocapture is not given.

With these changes, I see much more output in failing cases or with
--nocapture.  In the case mentioned in #1264, the message
"we survived raise SIGUSR2" is now printed both with and without --nocapture.
---
 crates/tor-hsservice/src/replay.rs | 15 +++++++++++++--
 1 file changed, 13 insertions(+), 2 deletions(-)

diff --git a/crates/tor-hsservice/src/replay.rs b/crates/tor-hsservice/src/replay.rs
index ec0bb2771..9f0734f88 100644
--- a/crates/tor-hsservice/src/replay.rs
+++ b/crates/tor-hsservice/src/replay.rs
@@ -505,11 +505,22 @@ mod test {
         match env::var(ENV_NAME) {
             Err(env::VarError::NotPresent) => {
                 eprintln!("in test runner process, forking..,");
-                let st = Command::new(env::current_exe().unwrap())
+                let output = Command::new(env::current_exe().unwrap())
                     .args(["--nocapture", "replay::test::test_partial_write"])
                     .env(ENV_NAME, "1")
-                    .status()
+                    .output()
                     .unwrap();
+                let print_output = |prefix, data| match std::str::from_utf8(data) {
+                    Ok(s) => {
+                        for l in s.split("\n") {
+                            eprintln!(" {prefix} {l}");
+                        }
+                    }
+                    Err(e) => eprintln!(" UTF-8 ERROR {prefix} {e}"),
+                };
+                print_output("!", &output.stdout);
+                print_output(">", &output.stderr);
+                let st = output.status;
                 eprintln!("reaped actual test process {st:?} (expecting signal {GOOD_SIGNAL})");
                 assert_eq!(st.signal(), Some(GOOD_SIGNAL));
                 return;
-- 
GitLab


diff --git a/ui/node_modules/babel-loader/lib/cache.js b/ui/node_modules/babel-loader/lib/cache.js
index 34dcc0a..2fef7b1 100644
--- a/ui/node_modules/babel-loader/lib/cache.js
+++ b/ui/node_modules/babel-loader/lib/cache.js
@@ -91,7 +91,7 @@ function () {
 
 
 const filename = function (source, identifier, options) {
-  const hash = crypto.createHash("md4");
+  const hash = crypto.createHash("sha256");
   const contents = JSON.stringify({
     source,
     options,
@@ -219,4 +219,4 @@ function () {
   return function (_x8) {
     return _ref4.apply(this, arguments);
   };
-}();
\ No newline at end of file
+}();
diff --git a/ui/node_modules/loader-utils/lib/getHashDigest.js b/ui/node_modules/loader-utils/lib/getHashDigest.js
index 45e340e..fb49630 100644
--- a/ui/node_modules/loader-utils/lib/getHashDigest.js
+++ b/ui/node_modules/loader-utils/lib/getHashDigest.js
@@ -40,7 +40,7 @@ function encodeBufferToBase(buffer, base) {
 }
 
 function getHashDigest(buffer, hashType, digestType, maxLength) {
-  hashType = hashType || 'md4';
+  hashType = hashType || 'sha256';
   maxLength = maxLength || 9999;
 
   const hash = require('crypto').createHash(hashType);
diff --git a/ui/node_modules/webpack/lib/HashedModuleIdsPlugin.js b/ui/node_modules/webpack/lib/HashedModuleIdsPlugin.js
index 7a860f7..047ae54 100644
--- a/ui/node_modules/webpack/lib/ids/HashedModuleIdsPlugin.js
+++ b/ui/node_modules/webpack/lib/ids/HashedModuleIdsPlugin.js
@@ -23,7 +23,7 @@ class HashedModuleIdsPlugin {
 		this.options = Object.assign(
 			{
 				context: null,
-				hashFunction: "md4",
+				hashFunction: "sha256",
 				hashDigest: "base64",
 				hashDigestLength: 4
 			},
diff --git a/ui/node_modules/webpack/lib/ModuleFilenameHelpers.js b/ui/node_modules/webpack/lib/ModuleFilenameHelpers.js
index bd0742b..3c3eba8 100644
--- a/ui/node_modules/webpack/lib/ModuleFilenameHelpers.js
+++ b/ui/node_modules/webpack/lib/ModuleFilenameHelpers.js
@@ -42,7 +42,7 @@ const getBefore = (str, token) => {
 };
 
 const getHash = str => {
-	const hash = createHash("md4");
+	const hash = createHash("sha256");
 	hash.update(str);
 	const digest = /** @type {string} */ (hash.digest("hex"));
 	return digest.substr(0, 4);
diff --git a/ui/node_modules/webpack/lib/NamedModulesPlugin.js b/ui/node_modules/webpack/lib/NamedModulesPlugin.js
index 2d84aaf..fe35290 100644
--- a/ui/node_modules/webpack/lib/NamedModulesPlugin.js
+++ b/ui/node_modules/webpack/lib/NamedModulesPlugin.js
@@ -8,7 +8,7 @@ const createHash = require("./util/createHash");
 const RequestShortener = require("./RequestShortener");
 
 const getHash = str => {
-	const hash = createHash("md4");
+	const hash = createHash("sha256");
 	hash.update(str);
 	const digest = /** @type {string} */ (hash.digest("hex"));
 	return digest.substr(0, 4);
diff --git a/ui/node_modules/webpack/lib/SourceMapDevToolPlugin.js b/ui/node_modules/webpack/lib/SourceMapDevToolPlugin.js
index 3018eb2..bb37fd6 100644
--- a/ui/node_modules/webpack/lib/SourceMapDevToolPlugin.js
+++ b/ui/node_modules/webpack/lib/SourceMapDevToolPlugin.js
@@ -346,7 +346,7 @@ class SourceMapDevToolPlugin {
 									: filename,
 								query,
 								basename: basename(filename),
-								contentHash: createHash("md4")
+								contentHash: createHash("sha256")
 									.update(sourceMapString)
 									.digest("hex")
 							};
diff --git a/ui/node_modules/webpack/lib/WebpackOptionsDefaulter.js b/ui/node_modules/webpack/lib/WebpackOptionsDefaulter.js
index cb5541e..a2fbf83 100644
--- a/ui/node_modules/webpack/lib/WebpackOptionsDefaulter.js
+++ b/ui/node_modules/webpack/lib/WebpackOptionsDefaulter.js
@@ -159,7 +159,7 @@ class WebpackOptionsDefaulter extends OptionsDefaulter {
 		this.set("output.crossOriginLoading", false);
 		this.set("output.jsonpScriptType", false);
 		this.set("output.chunkLoadTimeout", 120000);
-		this.set("output.hashFunction", "md4");
+		this.set("output.hashFunction", "sha256");
 		this.set("output.hashDigest", "hex");
 		this.set("output.hashDigestLength", 20);
 		this.set("output.devtoolLineToLine", false);
diff --git a/ui/node_modules/webpack/lib/optimize/ConcatenatedModule.js b/ui/node_modules/webpack/lib/optimize/ConcatenatedModule.js
index df4d216..03711c4 100644
--- a/ui/node_modules/webpack/lib/optimize/ConcatenatedModule.js
+++ b/ui/node_modules/webpack/lib/optimize/ConcatenatedModule.js
@@ -560,7 +560,7 @@ class ConcatenatedModule extends Module {
 				orderedConcatenationListIdentifiers += " ";
 			}
 		}
-		const hash = createHash("md4");
+		const hash = createHash("sha256");
 		hash.update(orderedConcatenationListIdentifiers);
 		return this.rootModule.identifier() + " " + hash.digest("hex");
 	}
diff --git a/ui/node_modules/webpack/lib/optimize/SplitChunksPlugin.js b/ui/node_modules/webpack/lib/optimize/SplitChunksPlugin.js
index 439e407..8fab46a 100644
--- a/ui/node_modules/webpack/lib/optimize/SplitChunksPlugin.js
+++ b/ui/node_modules/webpack/lib/optimize/SplitChunksPlugin.js
@@ -22,7 +22,7 @@ const deterministicGroupingForModules = /** @type {function(DeterministicGroupin
 
 const hashFilename = name => {
 	return crypto
-		.createHash("md4")
+		.createHash("sha256")
 		.update(name)
 		.digest("hex")
 		.slice(0, 8);
diff --git a/ui/node_modules/webpack/node_modules/terser-webpack-plugin/dist/index.js b/ui/node_modules/webpack/node_modules/terser-webpack-plugin/dist/index.js
index 6268f6b..51d1ee0 100644
--- a/ui/node_modules/webpack/node_modules/terser-webpack-plugin/dist/index.js
+++ b/ui/node_modules/webpack/node_modules/terser-webpack-plugin/dist/index.js
@@ -214,7 +214,7 @@ class TerserPlugin {
               // eslint-disable-next-line global-require
               'terser-webpack-plugin': require('../package.json').version,
               'terser-webpack-plugin-options': this.options,
-              hash: _crypto.default.createHash('md4').update(input).digest('hex')
+              hash: _crypto.default.createHash('sha256').update(input).digest('hex')
             };
             task.cacheKeys = this.options.cacheKeys(defaultCacheKeys, file);
           }
@@ -353,4 +353,4 @@ class TerserPlugin {
 }
 
 var _default = TerserPlugin;
-exports.default = _default;
\ No newline at end of file
+exports.default = _default;

From: Jakub Jirutka <jakub@jirutka.cz>
Date: Fri, 21 Jul 2023 13:22:58 +0200
Subject: [PATCH] Never download gn, ninja and clang, enable verbose logging

--- a/vendor/v8/build.rs
+++ b/vendor/v8/build.rs
@@ -111,7 +111,7 @@
   }
 
   if need_gn_ninja_download() {
-    download_ninja_gn_binaries();
+    panic!("gn and ninja must be installed");  // XXX-Patched
   }
 
   // On windows, rustc cannot link with a V8 debug build.
@@ -139,6 +139,9 @@
     println!("clang_base_path {}", clang_base_path.display());
     gn_args.push(format!("clang_base_path={:?}", clang_base_path));
     gn_args.push("treat_warnings_as_errors=false".to_string());
+  // XXX-Patched
+  } else if true {
+    panic!("no compatible clang found");
   } else {
     println!("using Chromiums clang");
     let clang_base_path = clang_download();
@@ -243,16 +243,18 @@
   // cross-compilation setup
   if target_arch == "aarch64" {
     gn_args.push(r#"target_cpu="arm64""#.to_string());
-    gn_args.push("use_sysroot=true".to_string());
-    maybe_install_sysroot("arm64");
-    maybe_install_sysroot("amd64");
+    // XXX-Patched
+    //gn_args.push("use_sysroot=true".to_string());
+    //maybe_install_sysroot("arm64");
+    //maybe_install_sysroot("amd64");
   }
   if target_arch == "arm" {
     gn_args.push(r#"target_cpu="arm""#.to_string());
     gn_args.push(r#"v8_target_cpu="arm""#.to_string());
-    gn_args.push("use_sysroot=true".to_string());
-    maybe_install_sysroot("i386");
-    maybe_install_sysroot("arm");
+    // XXX-Patched
+    //gn_args.push("use_sysroot=true".to_string());
+    //maybe_install_sysroot("i386");
+    //maybe_install_sysroot("arm");
   }

   let target_triple = env::var("TARGET").unwrap();

@@ -541,6 +543,8 @@
 }

 fn download_static_lib_binaries() {
+  panic!("Won't download library");  // XXX-Patched
+
   let url = static_lib_url();
   println!("static lib URL: {}", url);


@@ -886,6 +886,7 @@
 fn ninja(gn_out_dir: &Path, maybe_env: Option<NinjaEnv>) -> Command {
   let cmd_string = env::var("NINJA").unwrap_or_else(|_| "ninja".to_owned());
   let mut cmd = Command::new(&cmd_string);
+  cmd.arg("-v");  // XXX-Patched
   cmd.arg("-C");
   cmd.arg(gn_out_dir);
   if !cmd_string.ends_with("autoninja") {
@@ -927,6 +928,7 @@
       .arg(format!("--script-executable={}", python()))
       .arg("gen")
       .arg(&gn_out_dir)
+      .arg("-vv")  // XXX-Patched
       .arg("--ide=json")
       .arg("--args=".to_owned() + &args)
       .stdout(Stdio::inherit())

diff --git a/src/3rdparty/chromium/BUILD.gn b/src/3rdparty/chromium/BUILD.gn
index af58a87..4e1bb23 100644
--- a/src/3rdparty/chromium/BUILD.gn
+++ b/src/3rdparty/chromium/BUILD.gn
@@ -1645,8 +1645,7 @@ if (!is_ios && !is_qtwebengine) {
 
 # TODO(cassew): Add more OS's that don't support x86.
 is_valid_x86_target =
-    target_os != "ios" && target_os != "mac" &&
-    (target_os != "linux" || use_libfuzzer || !build_with_chromium)
+    target_os != "ios" && target_os != "mac"
 
 # Note: v8_target_cpu == arm allows using the V8 arm simulator on x86 for fuzzing.
 assert(
diff --git a/src/3rdparty/chromium/third_party/protobuf/src/google/protobuf/arenastring.cc b/src/3rdparty/chromium/third_party/protobuf/src/google/protobuf/arenastring.cc
index d886dda..5ada1b5 100644
--- a/src/3rdparty/chromium/third_party/protobuf/src/google/protobuf/arenastring.cc
+++ b/src/3rdparty/chromium/third_party/protobuf/src/google/protobuf/arenastring.cc
@@ -64,8 +64,6 @@ constexpr size_t kNewAlign = alignof(std::max_align_t);
 #endif
 constexpr size_t kStringAlign = alignof(std::string);
 
-static_assert((kStringAlign > kNewAlign ? kStringAlign : kNewAlign) >= 8, "");
-static_assert(alignof(ExplicitlyConstructedArenaString) >= 8, "");
 
 }  // namespace

diff --git a/src/3rdparty/chromium/v8/BUILD.gn b/src/3rdparty/chromium/v8/BUILD.gn
index 13fb257..92bacfc 100644
--- a/src/3rdparty/chromium/v8/BUILD.gn
+++ b/src/3rdparty/chromium/v8/BUILD.gn
@@ -641,7 +641,7 @@ config("internal_config") {
     defines += [ "BUILDING_V8_SHARED" ]
   }
 
-  if (v8_current_cpu == "riscv64" || v8_current_cpu == "riscv32") {
+  if (v8_current_cpu == "riscv64" || v8_current_cpu == "riscv32" || v8_current_cpu == "x86") {
     libs = [ "atomic" ]
   }
 }
@@ -713,7 +713,7 @@ config("external_config") {
     defines += [ "USING_V8_SHARED" ]
   }
 
-  if (current_cpu == "riscv64" || current_cpu == "riscv32") {
+  if (current_cpu == "riscv64" || current_cpu == "riscv32" || v8_current_cpu == "x86") {
     libs = [ "atomic" ]
   }
 }
@@ -5217,6 +5217,7 @@ v8_source_set("v8_base_without_compiler") {
   if (v8_current_cpu == "mips64" || v8_current_cpu == "mips64el" ||
       v8_current_cpu == "ppc" || v8_current_cpu == "ppc64" ||
       v8_current_cpu == "s390" || v8_current_cpu == "s390x" ||
+      v8_current_cpu == "x86" ||
       v8_current_cpu == "riscv64" || v8_current_cpu == "riscv32") {
     libs += [ "atomic" ]
   }
@@ -5617,7 +5618,7 @@ v8_component("v8_libbase") {
     sources += [ "src/base/ubsan.cc" ]
   }
 
-  if (v8_current_cpu == "riscv64" || v8_current_cpu == "riscv32") {
+  if (v8_current_cpu == "riscv64" || v8_current_cpu == "riscv32" || v8_current_cpu == "x86") {
     libs += [ "atomic" ]
   }
 
@@ -5706,7 +5707,7 @@ v8_component("v8_libplatform") {
     }
   }
 
-  if (v8_current_cpu == "riscv64" || v8_current_cpu == "riscv32") {
+  if (v8_current_cpu == "riscv64" || v8_current_cpu == "riscv32" || v8_current_cpu == "x86") {
     libs = [ "atomic" ]
   }
 }
@@ -6629,7 +6630,7 @@ if (want_v8_shell) {
 v8_executable("cppgc_hello_world") {
   sources = [ "samples/cppgc/hello-world.cc" ]
 
-  if (v8_current_cpu == "riscv64" || v8_current_cpu == "riscv32") {
+  if (v8_current_cpu == "riscv64" || v8_current_cpu == "riscv32" || v8_current_cpu == "x86") {
     libs = [ "atomic" ]
   }
 
diff --git a/configure.cmake.orig b/configure.cmake.orig
index 8f30b34..a921685 100644
--- a/configure.cmake.orig
+++ b/configure.cmake.orig
@@ -501,13 +501,6 @@ add_check_for_support(
    CONDITION TARGET Nodejs::Nodejs
    MESSAGE "node.js version 14 or later is required."
 )
-add_check_for_support(
-    MODULES QtWebEngine
-    CONDITION NOT (Nodejs_ARCH STREQUAL ia32) AND
-              NOT (Nodejs_ARCH STREQUAL x86) AND
-              NOT (Nodejs_ARCH STREQUAL arm)
-    MESSAGE "32bit version of Nodejs is not supported."
-)
 add_check_for_support(
    MODULES QtWebEngine QtPdf
    CONDITION Python3_EXECUTABLE
diff --git a/configure.cmake b/configure.cmake
index 7ccb67a..4af3f4f 100644
--- a/configure.cmake
+++ b/configure.cmake
@@ -501,13 +501,6 @@ add_check_for_support(
    CONDITION TARGET Nodejs::Nodejs
    MESSAGE "node.js version 14 or later is required."
 )
-add_check_for_support(
-    MODULES QtWebEngine
-    CONDITION NOT (Nodejs_ARCH STREQUAL ia32) AND
-              NOT (Nodejs_ARCH STREQUAL x86) AND
-              NOT (Nodejs_ARCH STREQUAL arm)
-    MESSAGE "32bit version of Nodejs is not supported."
-)
 add_check_for_support(
    MODULES QtWebEngine QtPdf
    CONDITION Python3_EXECUTABLE

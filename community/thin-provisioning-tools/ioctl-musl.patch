ioctl on musl is defined as taking int, following the posix definition
this is not what literally any other system does in 2023, but what can ya do?
--
diff --git a/src/file_utils.rs b/src/file_utils.rs
index 0ca3c0f..8e447b7 100644
--- a/src/file_utils.rs
+++ b/src/file_utils.rs
@@ -56,7 +56,7 @@ fn get_device_size<P: AsRef<Path>>(path: P) -> io::Result<u64> {
     let fd = file.as_raw_fd();
     let mut cap = 0u64;
     unsafe {
-        if libc::ioctl(fd, BLKGETSIZE64 as libc::c_ulong, &mut cap) == 0 {
+        if libc::ioctl(fd, BLKGETSIZE64 as libc::c_int, &mut cap) == 0 {
             Ok(cap)
         } else {
             Err(io::Error::last_os_error())
diff --git a/src/thin/trim.rs b/src/thin/trim.rs
index 3d938ca..91a53dd 100644
--- a/src/thin/trim.rs
+++ b/src/thin/trim.rs
@@ -135,7 +135,7 @@ impl<'a> Iterator for RangeIterator<'a> {
 const BLKDISCARD: u32 = 0x1277;
 fn ioctl_blkdiscard(fd: i32, range: &[u64; 2]) -> std::io::Result<()> {
     unsafe {
-        if libc::ioctl(fd, BLKDISCARD as libc::c_ulong, range) == 0 {
+        if libc::ioctl(fd, BLKDISCARD as libc::c_int, range) == 0 {
             Ok(())
         } else {
             Err(std::io::Error::last_os_error())

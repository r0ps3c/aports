Want to know which package owns a file?
Use `apk info --who-owns PATH` to determine which package owns
the file.
	-- @cas@treehouse.systems
%
Install the "docs" package to automatically install documentation
for installed packages.
	-- @whynothugo@fosstodon.org
%
When writing shell scripts, run man 1p <command> to read a
command's documentation.

When writing C programs, run man 3p <function> to read
standard C library documentation.

The p stands for POSIX, and the P in POSIX stands for portable,
so you should always use 1p and 3p manuals when writing code
portable to the Alpine environment.

On Alpine, the POSIX manual pages are available in the
`man-pages-posix` package.
	-- @flamingradian@sineware.ca
%
You can configure apk to ask for confirmation by creating an
empty file at `/etc/apk/interactive`.

You can also ask apk to ask for confirmation for a specific
apk invocation with the `--interactive` flag.
	-- @sertonix@fosstodon.org
%
Need to run a program which depends on the GNU C library?

Try installing the `gcompat` package which provides a
compatibility environment for running glibc-based applications.
	-- @ariadne@treehouse.systems
%
You can install the `command-not-found` package to provide
package suggestions when commands are not found.
	-- @ariadne@treehouse.systems
%
The `/etc/apk/world` file contains the set of explicitly
configured package selections, and can be edited by hand.

Use `apk fix` to update the system after making modifications
to `/etc/apk/world`.

Also see the apk-world(5) manual page.
	-- @cas@treehouse.systems
%
Alpine packages contain large amounts of semantic metadata,
which you can search for using tools such as `apk search`
and `apk list`.

For example, to find the package which provides the gtk4
pkg-config module, you can do `apk search pc:gtk4`.

Similarly, to find the package which contains a given
command, you can do `apk search cmd:nano`.

You can also add and remove packages based on their
metadata, for example `apk add cmd:nano`.
	-- @ariadne@treehouse.systems
%
Alpine comes with various system installation scripts
which can be discovered by typing `setup-` and pressing
the tab key.
	-- @ska@treehouse.systems
%
Want to temporarily install multiple packages?
Use the `-t $virtual_name` option to install them as
dependencies of a virtual package, for example:

	apk add -t virtual:foo nano

Once you are done with the packages, you can remove
them by deleting the virtual package.
	-- @lanodan@queer.hacktivis.me
%
The lbu utility facilitates backing up modified configuration
files and user-specified directories.
	-- @lanodan@queer.hacktivis.me
%
Need to build software locally?
Install the `build-base` package which will pull in a full
C compiler toolchain.
	-- @ariadne@treehouse.systems

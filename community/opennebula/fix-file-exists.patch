`File.exists?` was removed in Ruby 3.2.

--- a/share/install_gems/install_gems-obsolete
+++ b/share/install_gems/install_gems-obsolete
@@ -403,7 +403,7 @@
         if distro.first == :debian
             # on Debian-like platforms, the augeas gem build might fail
             # due to incompatible libxml include paths
-            unless File.exists?('/usr/include/libxml')
+            unless File.exist?('/usr/include/libxml')
                 require 'fileutils'
 
                 FileUtils.ln_s('/usr/include/libxml2/libxml',
--- a/share/router/vmcontext.rb
+++ b/share/router/vmcontext.rb
@@ -520,7 +520,7 @@
     end
 
     def read_context
-        return nil if !File.exists?(FILES[:context])
+        return nil if !File.exist?(FILES[:context])
 
         context = Hash.new
         context_file = File.read(FILES[:context])
--- a/share/scons/get_xmlrpc_config
+++ b/share/scons/get_xmlrpc_config
@@ -232,7 +232,7 @@
     name=gen_test_file(kind)
     exit_code=compile(name, args)
     #File.delete(name)
-    File.delete(name+".out") if File.exists?(name+".out")
+    File.delete(name+".out") if File.exist?(name+".out")
     
     return nil if !exit_code
     
--- a/src/authm_mad/remotes/ldap/ldap_auth.rb
+++ b/src/authm_mad/remotes/ldap/ldap_auth.rb
@@ -89,7 +89,7 @@
         file=@options[:mapping_file_path]
         generate = false
 
-        if File.exists?(file)
+        if File.exist?(file)
             stat = File.stat(file)
             age = Time.now.to_i - stat.mtime.to_i
             generate = true if age > @options[:mapping_timeout]
@@ -124,7 +124,7 @@
 
         @mapping = {}
 
-        if File.exists?(file)
+        if File.exist?(file)
             @mapping = YAML.load(File.read(file))
         end
 
--- a/src/cli/one_helper.rb
+++ b/src/cli/one_helper.rb
@@ -1144,7 +1144,7 @@
         def self.table_conf(conf_file=self.conf_file)
             path = "#{ENV["HOME"]}/.one/cli/#{conf_file}"
 
-            if File.exists?(path)
+            if File.exist?(path)
                 return path
             else
                 return "#{TABLE_CONF_PATH}/#{conf_file}"
--- a/src/oca/ruby/opennebula/client.rb
+++ b/src/oca/ruby/opennebula/client.rb
@@ -140,9 +140,9 @@
                 @one_endpoint = endpoint
             elsif ENV["ONE_XMLRPC"]
                 @one_endpoint = ENV["ONE_XMLRPC"]
-            elsif ENV['HOME'] and File.exists?(ENV['HOME']+"/.one/one_endpoint")
+            elsif ENV['HOME'] and File.exist?(ENV['HOME']+"/.one/one_endpoint")
                 @one_endpoint = File.read(ENV['HOME']+"/.one/one_endpoint")
-            elsif File.exists?("/var/lib/one/.one/one_endpoint")
+            elsif File.exist?("/var/lib/one/.one/one_endpoint")
                 @one_endpoint = File.read("/var/lib/one/.one/one_endpoint")
             else
                 @one_endpoint = "http://localhost:2633/RPC2"
--- a/src/oca/ruby/opennebula/oneflow_client.rb
+++ b/src/oca/ruby/opennebula/oneflow_client.rb
@@ -339,9 +339,9 @@
                 url = opts[:url]
             elsif ENV['ONEFLOW_URL']
                 url = ENV['ONEFLOW_URL']
-            elsif ENV['HOME'] && File.exists?(ENV['HOME'] + endpoint)
+            elsif ENV['HOME'] && File.exist?(ENV['HOME'] + endpoint)
                 url = File.read(ENV['HOME'] + endpoint).strip
-            elsif File.exists?('/var/lib/one/.one/oneflow_endpoint')
+            elsif File.exist?('/var/lib/one/.one/oneflow_endpoint')
                 url = File.read('/var/lib/one/.one/oneflow_endpoint').strip
             else
                 url = 'http://localhost:2474'
--- a/src/onedb/onedb.rb
+++ b/src/onedb/onedb.rb
@@ -180,7 +180,7 @@
     def backup(bck_file, ops, backend=@backend)
         bck_file = backend.bck_file(ops[:federated]) if bck_file.nil?
 
-        if !ops[:force] && File.exists?(bck_file)
+        if !ops[:force] && File.exist?(bck_file)
             raise "File #{bck_file} exists, backup aborted. Use -f " <<
                   "to overwrite."
         end
@@ -190,7 +190,7 @@
     end
 
     def restore(bck_file, ops, backend=@backend)
-        if !File.exists?(bck_file)
+        if !File.exist?(bck_file)
             raise "File #{bck_file} doesn't exist, backup restoration aborted."
         end
 
@@ -464,7 +464,7 @@
 
         file = "#{RUBY_LIB_LOCATION}/onedb/fsck.rb"
 
-        if File.exists? file
+        if File.exist? file
 
             one_not_running()
 
@@ -525,7 +525,7 @@
             puts ""
         end
 
-        if File.exists? file
+        if File.exist? file
 
             load(file)
             @backend.extend OneDBPatch
@@ -620,7 +620,7 @@
 
         file = "#{RUBY_LIB_LOCATION}/onedb/vcenter_one54.rb"
 
-        if File.exists? file
+        if File.exist? file
             load(file)
             @backend.extend One54Vcenter
 
@@ -725,7 +725,7 @@
     private
 
     def one_not_running()
-        if File.exists?(LOCK_FILE)
+        if File.exist?(LOCK_FILE)
             raise "First stop OpenNebula. Lock file found: #{LOCK_FILE}"
         end
 
--- a/src/onedb/onedb_backend.rb
+++ b/src/onedb/onedb_backend.rb
@@ -564,7 +564,7 @@
 
     def restore(bck_file, force=nil, federated=false)
         if !federated
-            if File.exists?(@sqlite_file) && !force
+            if File.exist?(@sqlite_file) && !force
                 raise "File #{@sqlite_file} exists, use -f to overwrite."
             end
         end
@@ -615,7 +615,7 @@
     private
 
     def connect_db
-        if !File.exists?(@sqlite_file)
+        if !File.exist?(@sqlite_file)
             raise "File #{@sqlite_file} doesn't exist"
         end
 
--- a/src/tm_mad/one_tm.rb
+++ b/src/tm_mad/one_tm.rb
@@ -130,11 +130,11 @@
 
         path = File.join(@local_scripts_path, tm, cmd)
 
-        if !File.exists?(path)
+        if !File.exist?(path)
             md  = cmd.match(/(.*)\.(.*)/)
             if md && md[1]
                 path_shortened = File.join(@local_scripts_path, tm, md[1])
-                if !File.exists?(path_shortened)
+                if !File.exist?(path_shortened)
                     return RESULT[:failure],
                         "Driver path '#{path}' nor '#{path_shortened}' exists"
                 end

From f6ea3e448a31af724e08f918375d3bb266ad796e Mon Sep 17 00:00:00 2001
From: LN Liberda <lauren@selfisekai.rocks>
Date: Sun, 9 Mar 2025 21:17:48 +0100
Subject: [PATCH] Zig 0.14: Rename Mepo.config to Mepo.config_contents

The field name conflicts with the import of config.zig
---
 src/Mepo.zig | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/Mepo.zig b/src/Mepo.zig
index d8c28d6..88c66f1 100644
--- a/src/Mepo.zig
+++ b/src/Mepo.zig
@@ -18,7 +18,7 @@ const FnTable = @import("./api/_FnTable.zig");
 const Self = @This();
 allocator: std.mem.Allocator,
 blit_pinlayer_cache: datastructure.EvictionHashMap(types.XYZ, *sdl.SDL_Texture, evict_texture, &config.MaxTextures),
-config: []const u8,
+config_contents: []const u8,
 debug_message: ?[]const u8 = null,
 drag: ?struct {
     begin_ticks: u32,
@@ -341,8 +341,8 @@ fn jsonapi_execute_parseargs(
     map: std.json.ArrayHashMap(std.json.Value),
 ) anyerror![types.MepoFnNargs]types.MepoArg {
     var args: [types.MepoFnNargs]types.MepoArg = .{
-      .{.Number = 0}, .{.Number = 0}, .{.Number = 0},
-      .{.Number = 0}, .{.Number = 0}, .{.Number = 0},
+        .{ .Number = 0 }, .{ .Number = 0 }, .{ .Number = 0 },
+        .{ .Number = 0 }, .{ .Number = 0 }, .{ .Number = 0 },
     };
     for (fn_spec_args, 0..) |spec_arg, i| {
         if (map.map.get(spec_arg.name)) |arg| {
@@ -493,7 +493,7 @@ pub fn init_video_and_sdl_stdin_loop(mepo: *Self, enable_stdin_jsonapi_repl: boo
 fn mepo_sdl_loop_thread_boot(userdata: ?*anyopaque) callconv(.C) c_int {
     const mepo: *Self = @alignCast(@ptrCast(userdata.?));
     video_init(mepo) catch unreachable;
-    mepo.jsonapi_execute(mepo.config) catch unreachable;
+    mepo.jsonapi_execute(mepo.config_contents) catch unreachable;
     mepo.initialized_video.set();
     sdl_event_loop(mepo) catch unreachable;
     return 0;
@@ -790,7 +790,7 @@ pub fn init(allocator: std.mem.Allocator, tile_cache: *TileCache, use_config: []
             &config.MaxTextures,
         ).init(allocator),
         .shellpipe_async_threads = datastructure.QueueHashMap(i8, sdl.SDL_threadID).init(allocator),
-        .config = use_config,
+        .config_contents = use_config,
         .fonts_normal = try init_create_fonts_array(false),
         .fonts_bold = try init_create_fonts_array(true),
         .fingers = std.ArrayList(sdl.SDL_FingerID).init(allocator),

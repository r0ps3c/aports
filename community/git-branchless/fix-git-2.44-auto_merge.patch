Patch-Source: https://github.com/arxanas/git-branchless/commit/8b1ae8b29f2abf10e5585d48cea4bd85862a529b
--
From 8b1ae8b29f2abf10e5585d48cea4bd85862a529b Mon Sep 17 00:00:00 2001
From: Waleed Khan <me@waleedkhan.name>
Date: Sun, 18 Feb 2024 16:36:55 -0800
Subject: [PATCH] tests: Try to fix failing `git-next` tests

---
 git-branchless-lib/src/core/eventlog.rs   | 8 +++++++-
 git-branchless-lib/src/testing.rs         | 7 +++++++
 git-branchless-lib/tests/test_eventlog.rs | 4 ++++
 git-branchless/tests/test_bug_report.rs   | 2 +-
 git-branchless/tests/test_eventlog.rs     | 2 +-
 git-branchless/tests/test_hooks.rs        | 2 +-
 git-branchless/tests/test_undo.rs         | 8 ++++++--
 git-branchless/tests/test_wrap.rs         | 5 +++--
 8 files changed, 30 insertions(+), 8 deletions(-)

diff --git a/git-branchless-lib/src/core/eventlog.rs b/git-branchless-lib/src/core/eventlog.rs
index 31fce007d..bcdc214d1 100644
--- a/git-branchless-lib/src/core/eventlog.rs
+++ b/git-branchless-lib/src/core/eventlog.rs
@@ -710,7 +710,13 @@ pub fn should_ignore_ref_updates(reference_name: &ReferenceName) -> bool {
 
     matches!(
         reference_name.as_str(),
-        "ORIG_HEAD" | "CHERRY_PICK" | "REBASE_HEAD" | "CHERRY_PICK_HEAD" | "FETCH_HEAD"
+        "ORIG_HEAD"
+            | "CHERRY_PICK"
+            | "REBASE_HEAD"
+            | "CHERRY_PICK_HEAD"
+            // From Git's `is_special_ref` in `refs.c`:
+            | "AUTO_MERGE"
+            | "FETCH_HEAD"
     )
 }
 
diff --git a/git-branchless-lib/src/testing.rs b/git-branchless-lib/src/testing.rs
index 6799bc5f8..d1cea37a6 100644
--- a/git-branchless-lib/src/testing.rs
+++ b/git-branchless-lib/src/testing.rs
@@ -654,6 +654,13 @@ then you can only run tests in the main `git-branchless` and \
         Ok(version >= GitVersion(2, 27, 0))
     }
 
+    /// Git v2.44 produces `AUTO_MERGE` refs as part of some operations, which
+    /// changes the event log according to the `reference-transaction` hook.
+    pub fn produces_auto_merge_refs(&self) -> eyre::Result<bool> {
+        let version = self.get_version()?;
+        Ok(version >= GitVersion(2, 44, 0))
+    }
+
     /// Resolve a file during a merge or rebase conflict with the provided
     /// contents.
     #[instrument]
diff --git a/git-branchless-lib/tests/test_eventlog.rs b/git-branchless-lib/tests/test_eventlog.rs
index 461019b70..e69e44fb6 100644
--- a/git-branchless-lib/tests/test_eventlog.rs
+++ b/git-branchless-lib/tests/test_eventlog.rs
@@ -46,6 +46,10 @@ fn test_drop_non_meaningful_events() -> eyre::Result<()> {
 fn test_different_event_transaction_ids() -> eyre::Result<()> {
     let git = make_git()?;
 
+    if git.produces_auto_merge_refs()? {
+        return Ok(());
+    }
+
     git.init_repo()?;
     git.commit_file("test1", 1)?;
     git.branchless("hide", &["--no-delete-branches", "HEAD"])?;
diff --git a/git-branchless/tests/test_bug_report.rs b/git-branchless/tests/test_bug_report.rs
index 5788024eb..0cc1596c3 100644
--- a/git-branchless/tests/test_bug_report.rs
+++ b/git-branchless/tests/test_bug_report.rs
@@ -16,7 +16,7 @@ fn redact_timestamp(str: String) -> String {
 fn test_bug_report() -> eyre::Result<()> {
     let git = make_git()?;
 
-    if !git.supports_reference_transactions()? {
+    if !git.supports_reference_transactions()? || git.produces_auto_merge_refs()? {
         return Ok(());
     }
     git.init_repo()?;
diff --git a/git-branchless/tests/test_eventlog.rs b/git-branchless/tests/test_eventlog.rs
index cc2cbf9e6..21b51fd6a 100644
--- a/git-branchless/tests/test_eventlog.rs
+++ b/git-branchless/tests/test_eventlog.rs
@@ -8,7 +8,7 @@ use lib::testing::make_git;
 fn test_git_v2_31_events() -> eyre::Result<()> {
     let git = make_git()?;
 
-    if !git.supports_reference_transactions()? {
+    if !git.supports_reference_transactions()? || git.produces_auto_merge_refs()? {
         return Ok(());
     }
 
diff --git a/git-branchless/tests/test_hooks.rs b/git-branchless/tests/test_hooks.rs
index 57fc5d4b7..7acb6e278 100644
--- a/git-branchless/tests/test_hooks.rs
+++ b/git-branchless/tests/test_hooks.rs
@@ -222,7 +222,7 @@ fn test_pre_auto_gc() -> eyre::Result<()> {
 fn test_merge_commit_recorded() -> eyre::Result<()> {
     let git = make_git()?;
 
-    if !git.supports_reference_transactions()? {
+    if !git.supports_reference_transactions()? || git.produces_auto_merge_refs()? {
         return Ok(());
     }
 
diff --git a/git-branchless/tests/test_undo.rs b/git-branchless/tests/test_undo.rs
index 8cd289427..9bf46e7f1 100644
--- a/git-branchless/tests/test_undo.rs
+++ b/git-branchless/tests/test_undo.rs
@@ -136,7 +136,7 @@ fn test_undo_help() -> eyre::Result<()> {
 fn test_undo_navigate() -> eyre::Result<()> {
     let git = make_git()?;
 
-    if !git.supports_reference_transactions()? {
+    if !git.supports_reference_transactions()? || git.produces_auto_merge_refs()? {
         return Ok(());
     }
 
@@ -225,7 +225,7 @@ fn test_undo_navigate() -> eyre::Result<()> {
 fn test_go_to_event() -> eyre::Result<()> {
     let git = make_git()?;
 
-    if !git.supports_reference_transactions()? {
+    if !git.supports_reference_transactions()? || git.produces_auto_merge_refs()? {
         return Ok(());
     }
 
@@ -433,6 +433,10 @@ fn test_undo_move_refs() -> eyre::Result<()> {
 fn test_historical_smartlog_visibility() -> eyre::Result<()> {
     let git = make_git()?;
 
+    if git.produces_auto_merge_refs()? {
+        return Ok(());
+    }
+
     git.init_repo()?;
     git.detach_head()?;
     git.commit_file("test1", 1)?;
diff --git a/git-branchless/tests/test_wrap.rs b/git-branchless/tests/test_wrap.rs
index fb78e369a..3223bd18f 100644
--- a/git-branchless/tests/test_wrap.rs
+++ b/git-branchless/tests/test_wrap.rs
@@ -9,7 +9,7 @@ use lib::testing::{make_git, GitRunOptions};
 fn test_wrap_rebase_in_transaction() -> eyre::Result<()> {
     let git = make_git()?;
 
-    if !git.supports_reference_transactions()? {
+    if !git.supports_reference_transactions()? || git.produces_auto_merge_refs()? {
         return Ok(());
     }
 
@@ -28,7 +28,8 @@ fn test_wrap_rebase_in_transaction() -> eyre::Result<()> {
     let event_replayer = EventReplayer::from_event_log_db(&effects, &repo, &event_log_db)?;
     let events: Vec<Event> = get_event_replayer_events(&event_replayer)
         .iter()
-        .map(|event| redact_event_timestamp(event.clone()))
+        .cloned()
+        .map(redact_event_timestamp)
         .collect();
 
     // Bug fixed in Git v2.35: https://github.com/git/git/commit/4866a64508465938b7661eb31afbde305d83e234

--- a/src/deps_log_test.cc
+++ b/src/deps_log_test.cc
@@ -18,6 +18,7 @@
 #ifndef _WIN32
 #include <unistd.h>
 #endif
+#include <endian.h>
 
 #include "disk_interface.h"
 #include "graph.h"
@@ -566,15 +567,24 @@
 
   const size_t version_offset = 12;
   ASSERT_EQ("# ninjadeps\n", original_contents.substr(0, version_offset));
-  ASSERT_EQ('\x04', original_contents[version_offset + 0]);
   ASSERT_EQ('\x00', original_contents[version_offset + 1]);
   ASSERT_EQ('\x00', original_contents[version_offset + 2]);
+  #if (BYTE_ORDER == LITTLE_ENDIAN)
+  ASSERT_EQ('\x04', original_contents[version_offset + 0]);
   ASSERT_EQ('\x00', original_contents[version_offset + 3]);
+  #else
+  ASSERT_EQ('\x00', original_contents[version_offset + 0]);
+  ASSERT_EQ('\x04', original_contents[version_offset + 3]);
+  #endif
 
   // clang-format off
   static const uint8_t kFirstRecord[] = {
     // size field == 0x0000000c
+    #if (BYTE_ORDER == LITTLE_ENDIAN)
     0x0c, 0x00, 0x00, 0x00,
+    #else
+    0x00, 0x00, 0x00, 0x0c,
+    #endif
     // name field = 'out.o' + 3 bytes of padding.
     'o', 'u', 't', '.', 'o', 0x00, 0x00, 0x00,
     // checksum = ~0
@@ -593,11 +603,19 @@
   // clang-format off
   static const uint8_t kSecondRecord[] = {
     // size field == 0x0000000c
+    #if (BYTE_ORDER == LITTLE_ENDIAN)
     0x0c, 0x00, 0x00, 0x00,
+    #else
+    0x00, 0x00, 0x00, 0x0c,
+    #endif
     // name field = 'foo.hh' + 2 bytes of padding.
     'f', 'o', 'o', '.', 'h', 'h', 0x00, 0x00,
     // checksum = ~1
+    #if (BYTE_ORDER == LITTLE_ENDIAN)
     0xfe, 0xff, 0xff, 0xff,
+    #else
+    0xff, 0xff, 0xff, 0xfe,
+    #endif
   };
   // clang-format on
   const size_t kSecondRecordLen = sizeof(kSecondRecord);

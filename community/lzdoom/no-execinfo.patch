diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8b78623..885d685 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -352,18 +352,18 @@ else()
 	set( ZLIB_LIBRARY z )
 endif()
 
-if( HAVE_VM_JIT AND UNIX )
-	check_symbol_exists( "backtrace" "execinfo.h" HAVE_BACKTRACE )
-	if( NOT HAVE_BACKTRACE )
-		set( CMAKE_REQUIRED_FLAGS "-lexecinfo" )
-		check_symbol_exists( "backtrace" "execinfo.h" HAVE_LIBEXECINFO )
-		if( HAVE_LIBEXECINFO )
-			set( ALL_C_FLAGS "${ALL_C_FLAGS} -lexecinfo" )
-		else( HAVE_LIBEXECINFO )
-			set( HAVE_VM_JIT NO )
-		endif( HAVE_LIBEXECINFO )
-	endif( NOT HAVE_BACKTRACE )
-endif( HAVE_VM_JIT AND UNIX )
+# if( HAVE_VM_JIT AND UNIX )
+# 	check_symbol_exists( "backtrace" "execinfo.h" HAVE_BACKTRACE )
+# 	if( NOT HAVE_BACKTRACE )
+# 		set( CMAKE_REQUIRED_FLAGS "-lexecinfo" )
+# 		check_symbol_exists( "backtrace" "execinfo.h" HAVE_LIBEXECINFO )
+# 		if( HAVE_LIBEXECINFO )
+# 			set( ALL_C_FLAGS "${ALL_C_FLAGS} -lexecinfo" )
+# 		else( HAVE_LIBEXECINFO )
+# 			set( HAVE_VM_JIT NO )
+# 		endif( HAVE_LIBEXECINFO )
+# 	endif( NOT HAVE_BACKTRACE )
+# endif( HAVE_VM_JIT AND UNIX )
 
 if( ${HAVE_VM_JIT} )
 	if( ASMJIT_FOUND AND NOT FORCE_INTERNAL_ASMJIT )
diff --git a/src/scripting/vm/jit_runtime.cpp b/src/scripting/vm/jit_runtime.cpp
index a630261..3386161 100644
--- a/src/scripting/vm/jit_runtime.cpp
+++ b/src/scripting/vm/jit_runtime.cpp
@@ -6,7 +6,6 @@
 #ifdef WIN32
 #include <DbgHelp.h>
 #else
-#include <execinfo.h>
 #include <cxxabi.h>
 #include <cstring>
 #include <cstdlib>
@@ -804,7 +803,7 @@ static int CaptureStackTrace(int max_frames, void **out_frames)
 	// JIT isn't supported here, so just do nothing.
 	return 0;//return RtlCaptureStackBackTrace(0, MIN(max_frames, 32), out_frames, nullptr);
 #else
-	return backtrace(out_frames, max_frames);
+	return 0;
 #endif
 }
 
@@ -853,7 +852,9 @@ class NativeSymbolResolver
 public:
 	FString GetName(void *frame)
 	{
-		FString s;
+		FString s = "no backtrace";
+		return s;
+		#if 0
 		char **strings;
 		void *frames[1] = { frame };
 		strings = backtrace_symbols(frames, 1);
@@ -910,6 +911,7 @@ public:
 
 		free(strings);
 		return s;
+		#endif
 	}
 };
 #endif

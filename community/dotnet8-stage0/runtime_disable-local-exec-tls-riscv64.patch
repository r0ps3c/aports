diff --git a/src/runtime/src/coreclr/vm/riscv64/asmhelpers.S b/src/runtime/src/coreclr/vm/riscv64/asmhelpers.S
index 85ee7c3..3390603 100644
--- a/src/runtime/src/coreclr/vm/riscv64/asmhelpers.S
+++ b/src/runtime/src/coreclr/vm/riscv64/asmhelpers.S
@@ -965,6 +965,6 @@ NESTED_END OnCallCountThresholdReachedStub, _TEXT
 
 // Load offset of native thread local variable `t_ThreadStatics` in TCB and return it in `a0` register.
 LEAF_ENTRY GetThreadStaticsVariableOffset, _TEXT
-    la.tls.ie   a0, t_ThreadStatics
+    la.tls.gd   a0, t_ThreadStatics
     EPILOG_RETURN
 LEAF_END GetThreadStaticsVariableOffset, _TEXT
diff --git a/src/runtime/src/coreclr/jit/helperexpansion.cpp b/src/runtime/src/coreclr/jit/helperexpansion.cpp
index 529bbfd..f3acffd 100644
--- a/src/runtime/src/coreclr/jit/helperexpansion.cpp
+++ b/src/runtime/src/coreclr/jit/helperexpansion.cpp
@@ -491,7 +491,7 @@ bool Compiler::fgExpandThreadLocalAccessForCall(BasicBlock** pBlock, Statement*
     }
     else
     {
-#ifdef TARGET_ARM
+#if defined(TARGET_ARM) || defined(TARGET_RISCV64)
         // On Arm, Thread execution blocks are accessed using co-processor registers and instructions such
         // as MRC and MCR are used to access them. We do not support them and so should never optimize the
         // field access using TLS.
diff --git a/src/runtime/src/coreclr/vm/jitinterface.cpp b/src/runtime/src/coreclr/vm/jitinterface.cpp
index 1cc6c37..cbb7a73 100644
--- a/src/runtime/src/coreclr/vm/jitinterface.cpp
+++ b/src/runtime/src/coreclr/vm/jitinterface.cpp
@@ -1437,7 +1437,7 @@ void CEEInfo::getThreadLocalStaticBlocksInfo (CORINFO_THREAD_STATIC_BLOCKS_INFO*
     pInfo->tlsGetAddrFtnPtr = reinterpret_cast<void*>(&__tls_get_addr);
     pInfo->tlsIndexObject = GetTlsIndexObjectAddress();
 
-#elif defined(TARGET_ARM64) || defined(TARGET_LOONGARCH64) || defined(TARGET_RISCV64)
+#elif defined(TARGET_ARM64) || defined(TARGET_LOONGARCH64)
 
     // For Linux arm64/loongarch64/riscv64, just get the offset of thread static variable, and during execution,
     // this offset, arm64 taken from trpid_elp0 system register gives back the thread variable address.

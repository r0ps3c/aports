diff --git a/test/xml/test_entity_reference.rb b/test/xml/test_entity_reference.rb
index 02878306..110d287b 100644
--- a/test/xml/test_entity_reference.rb
+++ b/test/xml/test_entity_reference.rb
@@ -163,7 +163,9 @@ module Nokogiri
         doc = @parser.parse(xml, path, &:default_xml)
 
         assert_kind_of Nokogiri::XML::EntityReference, doc.xpath("//body").first.children.first
-        if Nokogiri.uses_libxml?
+        if Nokogiri.uses_libxml?(">= 2.13.0") # gnome/libxml2@b717abdd
+          assert_equal ["5:14: WARNING: Entity 'bar' not defined"], doc.errors.map(&:to_s)
+        elsif Nokogiri.uses_libxml?
           assert_equal ["5:14: ERROR: Entity 'bar' not defined"], doc.errors.map(&:to_s)
         end
       end
@@ -184,10 +186,16 @@ module Nokogiri
 
         assert_kind_of Nokogiri::XML::EntityReference, doc.xpath("//body").first.children.first
 
-        expected = if Nokogiri.uses_libxml?(">= 2.13")
+        expected = if Nokogiri.uses_libxml?("~> 2.14")
+          [
+            "2:49: ERROR: failed to load \"http://foo.bar.com/\": Attempt to load network entity",
+            # "attempt to load network entity" removed in gnome/libxml2@1b1e8b3c
+            "4:14: ERROR: Entity 'bar' not defined",
+          ]
+        elsif Nokogiri.uses_libxml?("~> 2.13.0")
           [
             "2:49: WARNING: failed to load \"http://foo.bar.com/\": Attempt to load network entity",
-            "ERROR: Attempt to load network entity http://foo.bar.com/",
+            "ERROR: Attempt to load network entity: http://foo.bar.com/",
             "4:14: ERROR: Entity 'bar' not defined",
           ]
         elsif Nokogiri.uses_libxml?
@@ -218,16 +226,20 @@ module Nokogiri
         xml = File.read(xml_document)
         @parser.parse(xml)
 
-        refute_nil @parser.document.errors
+        actual = if Nokogiri.uses_libxml?(">= 2.13.0") # gnome/libxml2@b717abdd
+          @parser.document.warnings
+        else
+          @parser.document.errors
+        end
 
-        errors = @parser.document.errors.map { |e| e.to_s.strip }
+        actual = actual.map { |e| e.to_s.strip }
         expected = if truffleruby_system_libraries?
           ["error_func: %s"]
         else
           ["Entity 'bar' not defined"]
         end
 
-        assert_equal(expected, errors)
+        assert_equal(expected, actual)
       end
 
       test_relative_and_absolute_path :test_more_sax_entity_reference do
@@ -241,16 +253,23 @@ module Nokogiri
         XML
         @parser.parse(xml)
 
-        refute_nil @parser.document.errors
+        actual = if Nokogiri.uses_libxml?(">= 2.13.0") # gnome/libxml2@b717abdd
+          @parser.document.warnings
+        else
+          @parser.document.errors
+        end
+
+        refute_nil(actual)
+        refute_empty(actual)
 
-        errors = @parser.document.errors.map { |e| e.to_s.strip }
+        actual = actual.map { |e| e.to_s.strip }
         expected = if truffleruby_system_libraries?
           ["error_func: %s"]
         else
           ["Entity 'bar' not defined"]
         end
 
-        assert_equal(expected, errors)
+        assert_equal(expected, actual)
       end
     end
 
diff --git a/test/xml/test_schema.rb b/test/xml/test_schema.rb
index 427a4e8c..32d7b24d 100644
--- a/test/xml/test_schema.rb
+++ b/test/xml/test_schema.rb
@@ -269,17 +269,16 @@ class TestNokogiriXMLSchema < Nokogiri::TestCase
           it "XML::Schema parsing does not attempt to access external DTDs" do
             doc = Nokogiri::XML::Schema.new(schema)
             errors = doc.errors.map(&:to_s)
-            assert_equal(
-              1,
-              errors.grep(/ERROR: Attempt to load network entity/).length,
+            refute_empty(
+              errors.grep(/Attempt to load network entity/),
               "Should see xmlIO.c:xmlNoNetExternalEntityLoader() raising XML_IO_NETWORK_ATTEMPT",
             )
             assert_empty(
-              errors.grep(/WARNING: failed to load HTTP resource/),
+              errors.grep(/failed to load HTTP resource/),
               "Should not see xmlIO.c:xmlCheckHTTPInput() raising 'failed to load HTTP resource'",
             )
             assert_empty(
-              errors.grep(/WARNING: failed to load external entity/),
+              errors.grep(/failed to load external entity/),
               "Should not see xmlIO.c:xmlDefaultExternalEntityLoader() raising 'failed to load external entity'",
             )
           end
@@ -287,17 +286,16 @@ class TestNokogiriXMLSchema < Nokogiri::TestCase
           it "XML::Schema parsing of memory does not attempt to access external DTDs" do
             doc = Nokogiri::XML::Schema.read_memory(schema)
             errors = doc.errors.map(&:to_s)
-            assert_equal(
-              1,
-              errors.grep(/ERROR: Attempt to load network entity/).length,
+            refute_empty(
+              errors.grep(/Attempt to load network entity/),
               "Should see xmlIO.c:xmlNoNetExternalEntityLoader() raising XML_IO_NETWORK_ATTEMPT",
             )
             assert_empty(
-              errors.grep(/WARNING: failed to load HTTP resource/),
+              errors.grep(/failed to load HTTP resource/),
               "Should not see xmlIO.c:xmlCheckHTTPInput() raising 'failed to load HTTP resource'",
             )
             assert_empty(
-              errors.grep(/WARNING: failed to load external entity/),
+              errors.grep(/failed to load external entity/),
               "Should not see xmlIO.c:xmlDefaultExternalEntityLoader() raising 'failed to load external entity'",
             )
           end
@@ -307,25 +305,21 @@ class TestNokogiriXMLSchema < Nokogiri::TestCase
           it "XML::Schema parsing attempts to access external DTDs" do
             doc = Nokogiri::XML::Schema.new(schema, Nokogiri::XML::ParseOptions.new.nononet)
             errors = doc.errors.map(&:to_s)
-            assert_equal(
-              0,
-              errors.grep(/ERROR: Attempt to load network entity/).length,
+            assert_empty(
+              errors.grep(/Attempt to load network entity/),
               "Should not see xmlIO.c:xmlNoNetExternalEntityLoader() raising XML_IO_NETWORK_ATTEMPT",
             )
-            # changed from "WARNING" to "FATAL" in libxml2 2.13
-            assert_equal(1, errors.grep(/(WARNING|FATAL): failed to load/).length)
+            assert_equal(1, errors.grep(%r(failed to load.*http://localhost:8000/making-a-request)).length)
           end
 
           it "XML::Schema parsing of memory attempts to access external DTDs" do
             doc = Nokogiri::XML::Schema.read_memory(schema, Nokogiri::XML::ParseOptions.new.nononet)
             errors = doc.errors.map(&:to_s)
-            assert_equal(
-              0,
-              errors.grep(/ERROR: Attempt to load network entity/).length,
+            assert_empty(
+              errors.grep(/ERROR: Attempt to load network entity/),
               "Should not see xmlIO.c:xmlNoNetExternalEntityLoader() raising XML_IO_NETWORK_ATTEMPT",
             )
-            # changed from "WARNING" to "FATAL" in libxml2 2.13
-            assert_equal(1, errors.grep(/(WARNING|FATAL): failed to load/).length)
+            assert_equal(1, errors.grep(%r(failed to load.*http://localhost:8000/making-a-request)).length)
           end
         end
       end
diff --git a/test/xml/test_unparented_node.rb b/test/xml/test_unparented_node.rb
index 33a44342..2dc656c3 100644
--- a/test/xml/test_unparented_node.rb
+++ b/test/xml/test_unparented_node.rb
@@ -195,39 +195,51 @@ module Nokogiri
       end
 
       def test_add_previous_sibling_merge
-        xml = Nokogiri::XML(<<-eoxml)
-        <root>
-          <a>Hello world</a>
-        </root>
-        eoxml
-
-        assert(a_tag = xml.css("a").first)
-
+        xml = Nokogiri::XML("<root>  <a>Hello world</a>   </root>")
+        a_tag = xml.at_css("a")
         left_space = a_tag.previous
         right_space = a_tag.next
+
+        assert_equal("  ", left_space.content)
         assert_predicate(left_space, :text?)
+        assert_equal("   ", right_space.content)
         assert_predicate(right_space, :text?)
 
         left_space.add_previous_sibling(right_space)
-        assert_equal(left_space, right_space)
+
+        if Nokogiri.uses_libxml?(">= 2.13.0")
+          # after gnome/libxml2@f43197fc text nodes are never merged
+          assert_equal("  ", left_space.content)
+          assert_equal("   ", right_space.content)
+        else
+          # before gnome/libxml2@f43197fc blank text nodes are merged
+          assert_equal("     ", left_space.content)
+          assert_equal("     ", right_space.content)
+        end
       end
 
       def test_add_next_sibling_merge
-        xml = Nokogiri::XML(<<-eoxml)
-        <root>
-          <a>Hello world</a>
-        </root>
-        eoxml
-
-        assert(a_tag = xml.css("a").first)
-
+        xml = Nokogiri::XML("<root>  <a>Hello world</a>   </root>")
+        a_tag = xml.at_css("a")
         left_space = a_tag.previous
         right_space = a_tag.next
+
+        assert_equal("  ", left_space.content)
         assert_predicate(left_space, :text?)
+        assert_equal("   ", right_space.content)
         assert_predicate(right_space, :text?)
 
         right_space.add_next_sibling(left_space)
-        assert_equal(left_space, right_space)
+
+        if Nokogiri.uses_libxml?(">= 2.13.0")
+          # after gnome/libxml2@f43197fc text nodes are never merged
+          assert_equal("  ", left_space.content)
+          assert_equal("   ", right_space.content)
+        else
+          # before gnome/libxml2@f43197fc blank text nodes are merged
+          assert_equal("     ", left_space.content)
+          assert_equal("     ", right_space.content)
+        end
       end
 
       def test_add_next_sibling_to_root_raises_exception

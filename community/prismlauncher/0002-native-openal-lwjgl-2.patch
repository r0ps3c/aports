LWJGL 2 does't have an option to use a native openal version. Replace
the extracted files with a symlink instead.

--- a/launcher/minecraft/launch/ExtractNatives.cpp
+++ b/launcher/minecraft/launch/ExtractNatives.cpp
@@ -13,6 +13,7 @@
  * limitations under the License.
  */
 
+#include "Application.h"
 #include "ExtractNatives.h"
 #include <launch/LaunchTask.h>
 #include <minecraft/MinecraftInstance.h>
@@ -39,7 +40,7 @@ static QString replaceSuffix(QString target, const QString& suffix, const QStrin
     return target + replacement;
 }
 
-static bool unzipNatives(QString source, QString targetFolder, bool applyJnilibHack)
+static bool unzipNatives(QString source, QString targetFolder, bool applyJnilibHack, QString nativeOpenALPath)
 {
     QuaZip zip(source);
     if (!zip.open(QuaZip::mdUnzip)) {
@@ -56,6 +57,10 @@ static bool unzipNatives(QString source, QString targetFolder, bool applyJnilibH
             name = replaceSuffix(name, ".jnilib", ".dylib");
         }
         QString absFilePath = directory.absoluteFilePath(name);
+        if (!nativeOpenALPath.isEmpty() && name.startsWith("libopenal")) {
+            QFile::link(nativeOpenALPath, absFilePath);
+            continue;
+        }
         if (!JlCompress::extractFile(&zip, "", absFilePath)) {
             return false;
         }
@@ -82,8 +87,14 @@ void ExtractNatives::executeTask()
     FS::ensureFolderPathExists(outputPath);
     auto javaVersion = minecraftInstance->getJavaVersion();
     bool jniHackEnabled = javaVersion.major() >= 8;
+    QString nativeOpenALPath = "";
+    if (settings->get("UseNativeOpenAL").toBool()) {
+        nativeOpenALPath = settings->get("CustomOpenALPath").toString();
+        if (nativeOpenALPath.isEmpty())
+            nativeOpenALPath = APPLICATION->m_detectedOpenALPath;
+    }
     for (const auto& source : toExtract) {
-        if (!unzipNatives(source, outputPath, jniHackEnabled)) {
+        if (!unzipNatives(source, outputPath, jniHackEnabled, nativeOpenALPath)) {
             const char* reason = QT_TR_NOOP("Couldn't extract native jar '%1' to destination '%2'");
             emit logLine(QString(reason).arg(source, outputPath), MessageLevel::Fatal);
             emitFailed(tr(reason).arg(source, outputPath));

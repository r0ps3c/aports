Adapted from https://github.com/PrismLauncher/PrismLauncher/commit/023b3e3c3945592845fcae6eec8fc9d90871d2c2

Reference: https://github.com/PrismLauncher/PrismLauncher/issues/1708


--- a/launcher/translations/TranslationsModel.cpp
+++ b/launcher/translations/TranslationsModel.cpp
@@ -242,7 +242,7 @@
         reloadLocalFiles();
 
         auto language = d->m_system_locale;
-        if (!findLanguage(language))
+        if (!findLanguageAsOptional(language).has_value())
         {
             language = d->m_system_language;
         }
@@ -512,22 +512,19 @@
     return 2;
 }
 
-Language * TranslationsModel::findLanguage(const QString& key)
+QVector<Language>::Iterator TranslationsModel::findLanguage(const QString& key)
 {
-    auto found = std::find_if(d->m_languages.begin(), d->m_languages.end(), [&](Language & lang)
-    {
-        return lang.key == key;
-    });
-    if(found == d->m_languages.end())
-    {
-        return nullptr;
-    }
-    else
-    {
-        return found;
-    }
+    return std::find_if(d->m_languages.begin(), d->m_languages.end(), [&](Language& lang) { return lang.key == key; });
 }
 
+std::optional<Language> TranslationsModel::findLanguageAsOptional(const QString& key)
+{
+    auto found = findLanguage(key);
+    if (found != d->m_languages.end())
+        return *found;
+    return {};
+}
+
 void TranslationsModel::setUseSystemLocale(bool useSystemLocale)
 {
     APPLICATION->settings()->set("UseSystemLocale", useSystemLocale);
@@ -537,13 +534,13 @@
 bool TranslationsModel::selectLanguage(QString key)
 {
     QString& langCode = key;
-    auto langPtr = findLanguage(key);
+    auto langPtr = findLanguageAsOptional(key);
 
     if (langCode.isEmpty()) {
         d->no_language_set = true;
     }
 
-    if (!langPtr) {
+    if (!langPtr.has_value()) {
         qWarning() << "Selected invalid language" << key << ", defaulting to" << defaultLangCode;
         langCode = defaultLangCode;
     } else {
@@ -653,10 +650,8 @@
 QModelIndex TranslationsModel::selectedIndex()
 {
     auto found = findLanguage(d->m_selectedLanguage);
-    if(found)
-    {
-        // QVector iterator freely converts to pointer to contained type
-        return index(found - d->m_languages.begin(), 0, QModelIndex());
+    if (found != d->m_languages.end()) {
+        return index(std::distance(d->m_languages.begin(), found), 0, QModelIndex());
     }
     return QModelIndex();
 }
@@ -691,9 +686,8 @@
         qWarning() << "Cannot update builtin language" << key;
         return;
     }
-    auto found = findLanguage(key);
-    if(!found)
-    {
+    auto found = findLanguageAsOptional(key);
+    if (!found.has_value()) {
         qWarning() << "Cannot update invalid language" << key;
         return;
     }
@@ -710,9 +704,8 @@
         d->m_nextDownload = key;
         return;
     }
-    auto lang = findLanguage(key);
-    if(!lang)
-    {
+    auto lang = findLanguageAsOptional(key);
+    if (!lang.has_value()) {
         qWarning() << "Will not download an unknown translation" << key;
         return;
     }
--- a/launcher/translations/TranslationsModel.h
+++ b/launcher/translations/TranslationsModel.h
@@ -17,6 +17,7 @@
 
 #include <QAbstractListModel>
 #include <memory>
+#include <optional>
 
 struct Language;
 
@@ -40,7 +41,8 @@ class TranslationsModel : public QAbstractListModel {
     void setUseSystemLocale(bool useSystemLocale);
 
    private:
-    Language* findLanguage(const QString& key);
+    QVector<Language>::Iterator findLanguage(const QString& key);
+    std::optional<Language> findLanguageAsOptional(const QString& key);
     void reloadLocalFiles();
     void downloadTranslation(QString key);
     void downloadNext();

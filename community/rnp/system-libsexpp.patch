This patch backports relevant parts of

* 8f7b2f27af277b0577ada7ecc54bb2db190eac85
* 3e9831ac3409095db40b7967866b9197eb36ff64
* df4f24bd48b6691692379f1370fde3c12e96e3ab
* f9147e72a369f1e412d2f2385cf23a3e9dd6882d
* 82d9747f1da36db0393c122b451a847cf561bb7c

See-Also: https://github.com/rnpgp/rnp/pull/2103
--
From: Remi Collet <remi@remirepo.net>
Date: Wed, 21 Jun 2023 14:12:26 +0200
Subject: Renamed libsexp to libsexpp; integrated an option to use
  libsexpp provided by the system

--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -58,6 +58,8 @@ option(ENABLE_COVERAGE "Enable code coverage testing.")
 option(ENABLE_SANITIZERS "Enable ASan and other sanitizers.")
 option(ENABLE_FUZZERS "Enable fuzz targets.")
 option(DOWNLOAD_GTEST "Download Googletest" On)
+option(SYSTEM_LIBSEXPP "Use system sexpp library" OFF)
+
 # crypto components
 function(tristate_feature_auto NAME DESCRIPTION)
   set(${NAME} Auto CACHE STRING ${DESCRIPTION})
@@ -176,10 +178,36 @@ if (ENABLE_FUZZERS)
 endif()
 add_subdirectory(src/common)
 
-set(WITH_SEXP_CLI OFF)
-set(WITH_SEXP_TESTS OFF)
-set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME development)
-add_subdirectory(src/libsexp EXCLUDE_FROM_ALL)
+if (SYSTEM_LIBSEXPP)
+  find_package(PkgConfig QUIET)
+  pkg_check_modules(SEXPP sexpp>=0.8.7 REQUIRED)
+  find_library(SEXPP_LIBRARY
+    NAMES
+      "libsexpp"
+      "sexpp"
+    HINTS
+      "${SEXPP_LIBRARY_DIRS}"
+  )
+  add_library(sexpp UNKNOWN IMPORTED)
+  set_target_properties(sexpp
+    PROPERTIES
+      INTERFACE_INCLUDE_DIRECTORIES "${SEXPP_INCLUDE_DIR}"
+      IMPORTED_LINK_INTERFACE_LANGUAGES "CXX"
+      IMPORTED_LOCATION "${SEXPP_LIBRARY}"
+  )
+else (SYSTEM_LIBSEXPP)
+# If we use system libsexpp is not used we build sexpp static library
+# If librnp is shared, libsexpp.a is a transient artifact which is hidden from
+# the end user.
+# If librnp is static we install libsexpp.a aside
+  set(SAVED_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})
+  set(BUILD_SHARED_LIBS OFF)
+  set(WITH_SEXP_CLI OFF)
+  set(WITH_SEXP_TESTS OFF)
+  set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME development)
+  add_subdirectory(src/libsexpp EXCLUDE_FROM_ALL)
+  set(BUILD_SHARED_LIBS ${SAVED_BUILD_SHARED_LIBS})
+endif (SYSTEM_LIBSEXPP)
 
 add_subdirectory(src/lib)
 add_subdirectory(src/rnp)
--- a/src/lib/CMakeLists.txt
+++ b/src/lib/CMakeLists.txt
@@ -320,6 +320,7 @@ target_include_directories(librnp-obj
   PRIVATE
     "${CMAKE_CURRENT_SOURCE_DIR}"
     "${PROJECT_SOURCE_DIR}/src"
+    "${SEXPP_INCLUDE_DIRS}"
 )
 target_link_libraries(librnp-obj PRIVATE JSON-C::JSON-C)
 if (CRYPTO_BACKEND_BOTAN)
@@ -328,7 +329,7 @@ elseif (CRYPTO_BACKEND_OPENSSL)
   target_link_libraries(librnp-obj PRIVATE OpenSSL::Crypto)
 endif()
 
-target_link_libraries(librnp-obj PRIVATE sexp)
+target_link_libraries(librnp-obj PRIVATE sexpp)
 
 set_target_properties(librnp-obj PROPERTIES CXX_VISIBILITY_PRESET hidden)
 if (TARGET BZip2::BZip2)
@@ -384,7 +385,7 @@ foreach (prop LINK_LIBRARIES INTERFACE_LINK_LIBRARIES INCLUDE_DIRECTORIES INTERF
   get_target_property(val librnp-obj ${prop})
   if (BUILD_SHARED_LIBS)
     set_property(TARGET librnp-static PROPERTY ${prop} ${val})
-    list(REMOVE_ITEM val "$<LINK_ONLY:sexp>")
+    list(REMOVE_ITEM val "$<LINK_ONLY:sexpp>")
     set_property(TARGET librnp PROPERTY ${prop} ${val})
   else()
     set_property(TARGET librnp PROPERTY ${prop} ${val})
@@ -433,31 +433,34 @@ install(TARGETS librnp
       COMPONENT development
   )
 
-  install(TARGETS librnp-static sexp
-    EXPORT rnp-targets
-    ARCHIVE
-      DESTINATION  "${CMAKE_INSTALL_LIBDIR}"
-      COMPONENT development
-  )
+# install dll only for windows
+  if (WIN32)
+    install(TARGETS librnp
+      RUNTIME
+        DESTINATION "${CMAKE_INSTALL_BINDIR}"
+        COMPONENT runtime
+    )
+  endif(WIN32)
 else(BUILD_SHARED_LIBS)
-# static libraries only
-install(TARGETS librnp sexp
+# static libraries
+# install libsexpp unless system-installed libsexpp is used
+  if (SYSTEM_LIBSEXPP)
+    install(TARGETS librnp
+      EXPORT rnp-targets
+      ARCHIVE
+        DESTINATION  "${CMAKE_INSTALL_LIBDIR}"
+        COMPONENT development
+    )
+  else (SYSTEM_LIBSEXPP)
+    install(TARGETS librnp sexpp
     EXPORT rnp-targets
     ARCHIVE
       DESTINATION  "${CMAKE_INSTALL_LIBDIR}"
       COMPONENT development
-)
+    )
+  endif (SYSTEM_LIBSEXPP)
 endif(BUILD_SHARED_LIBS)
 
-# install dll only for windows
-if (WIN32)
-  install(TARGETS librnp
-    RUNTIME
-      DESTINATION "${CMAKE_INSTALL_BINDIR}"
-      COMPONENT runtime
-  )
-endif(WIN32)
-
 # install headers
 install(
   FILES
--- a/src/librekey/g23_sexp.hpp
+++ b/src/librekey/g23_sexp.hpp
@@ -27,8 +27,8 @@
 #ifndef RNP_G23_SEXP_HPP
 #define RNP_G23_SEXP_HPP
 
-#include "sexp/sexp.h"
-#include "sexp/ext-key-format.h"
+#include "sexpp/sexp.h"
+#include "sexpp/ext-key-format.h"
 
 #define SXP_MAX_DEPTH 30
 
--- a/src/tests/CMakeLists.txt
+++ b/src/tests/CMakeLists.txt
@@ -171,12 +171,13 @@ target_include_directories(rnp_tests
     "${PROJECT_SOURCE_DIR}/src"
     "${PROJECT_SOURCE_DIR}/src/lib"
     "${BOTAN2_INCLUDE_DIRS}"
+    "${SEXPP_INCLUDE_DIRS}"
 )
 target_link_libraries(rnp_tests
   PRIVATE
     librnp-static
     JSON-C::JSON-C
-    sexp
+    sexpp
     ${GTestMain}
 )
 if (CRYPTO_BACKEND_LOWERCASE STREQUAL "openssl")

From c2b287ea780e4bdb90c97139649bdb1cc6c79d99 Mon Sep 17 00:00:00 2001
From: Anton Bambura <jenneron@protonmail.com>
Date: Thu, 19 Oct 2023 09:47:18 +0300
Subject: [PATCH] Fix building with directfb

Rename DR_OK from Limelight.h which conflicts with DirectFB's
DR_OK in the DirectResult enum.
---
 moonlight-common-c/moonlight-common-c/src/FakeCallbacks.c     | 2 +-
 moonlight-common-c/moonlight-common-c/src/Limelight.h         | 4 ++--
 moonlight-common-c/moonlight-common-c/src/VideoDepacketizer.c | 2 +-
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/moonlight-common-c/moonlight-common-c/src/FakeCallbacks.c b/moonlight-common-c/moonlight-common-c/src/FakeCallbacks.c
index 62260b8..9dd1798 100644
--- a/moonlight-common-c/moonlight-common-c/src/FakeCallbacks.c
+++ b/moonlight-common-c/moonlight-common-c/src/FakeCallbacks.c
@@ -4,7 +4,7 @@ static int fakeDrSetup(int videoFormat, int width, int height, int redrawRate, v
 static void fakeDrStart(void) {}
 static void fakeDrStop(void) {}
 static void fakeDrCleanup(void) {}
-static int fakeDrSubmitDecodeUnit(PDECODE_UNIT decodeUnit) { return DR_OK; }
+static int fakeDrSubmitDecodeUnit(PDECODE_UNIT decodeUnit) { return DR_OK1; }
 
 static DECODER_RENDERER_CALLBACKS fakeDrCallbacks = {
     .setup = fakeDrSetup,
diff --git a/moonlight-common-c/moonlight-common-c/src/Limelight.h b/moonlight-common-c/moonlight-common-c/src/Limelight.h
index bc940e7..0af6f97 100644
--- a/moonlight-common-c/moonlight-common-c/src/Limelight.h
+++ b/moonlight-common-c/moonlight-common-c/src/Limelight.h
@@ -291,7 +291,7 @@ typedef void(*DecoderRendererCleanup)(void);
 // This callback provides Annex B formatted elementary stream data to the
 // decoder. If the decoder is unable to process the submitted data for some reason,
 // it must return DR_NEED_IDR to generate a keyframe.
-#define DR_OK 0
+#define DR_OK1 0
 #define DR_NEED_IDR -1
 typedef int(*DecoderRendererSubmitDecodeUnit)(PDECODE_UNIT decodeUnit);
 
@@ -937,7 +937,7 @@ typedef struct _SS_HDR_METADATA {
 bool LiGetHdrMetadata(PSS_HDR_METADATA metadata);
 
 // This function requests an IDR frame from the host. Typically this is done using DR_NEED_IDR, but clients
-// processing frames asynchronously may need to reset their decoder state even after returning DR_OK for
+// processing frames asynchronously may need to reset their decoder state even after returning DR_OK1 for
 // the prior frame. Rather than wait for a new frame and return DR_NEED_IDR for that one, they can just
 // call this API instead. Note that this function does not guarantee that the *next* frame will be an IDR
 // frame, just that an IDR frame will arrive soon.
diff --git a/moonlight-common-c/moonlight-common-c/src/VideoDepacketizer.c b/moonlight-common-c/moonlight-common-c/src/VideoDepacketizer.c
index 40295e0..bdf62e2 100644
--- a/moonlight-common-c/moonlight-common-c/src/VideoDepacketizer.c
+++ b/moonlight-common-c/moonlight-common-c/src/VideoDepacketizer.c
@@ -291,7 +291,7 @@ void LiCompleteVideoFrame(VIDEO_FRAME_HANDLE handle, int drStatus) {
         Limelog("Requesting IDR frame on behalf of DR\n");
         requestDecoderRefresh();
     }
-    else if (drStatus == DR_OK && qdu->decodeUnit.frameType == FRAME_TYPE_IDR) {
+    else if (drStatus == DR_OK1 && qdu->decodeUnit.frameType == FRAME_TYPE_IDR) {
         // Remember that the IDR frame was processed. We can now use
         // reference frame invalidation.
         idrFrameProcessed = true;
-- 
2.41.0

From a53689a86268bc437fd89dc580ba94f123c3d00e Mon Sep 17 00:00:00 2001
From: Anton Bambura <jenneron@protonmail.com>
Date: Thu, 19 Oct 2023 09:59:47 +0300
Subject: [PATCH] Use DR_OK1 instead of DR_OK in app/*

---
 app/streaming/session.cpp      | 6 +++---
 app/streaming/video/ffmpeg.cpp | 4 ++--
 app/streaming/video/slvid.cpp  | 2 +-
 3 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/app/streaming/session.cpp b/app/streaming/session.cpp
index 53ab2d04..94c4fad5 100644
--- a/app/streaming/session.cpp
+++ b/app/streaming/session.cpp
@@ -345,7 +345,7 @@ int Session::drSubmitDecodeUnit(PDECODE_UNIT du)
     // We need to destroy the decoder on the main thread to satisfy
     // some API constraints (like DXVA2). If we can't acquire it,
     // that means the decoder is about to be destroyed, so we can
-    // safely return DR_OK and wait for the IDR frame request by
+    // safely return DR_OK1 and wait for the IDR frame request by
     // the decoder reinitialization code.
 
     if (SDL_AtomicTryLock(&s_ActiveSession->m_DecoderLock)) {
@@ -357,13 +357,13 @@ int Session::drSubmitDecodeUnit(PDECODE_UNIT du)
         }
         else {
             SDL_AtomicUnlock(&s_ActiveSession->m_DecoderLock);
-            return DR_OK;
+            return DR_OK1;
         }
     }
     else {
         // Decoder is going away. Ignore anything coming in until
         // the lock is released.
-        return DR_OK;
+        return DR_OK1;
     }
 }
 
diff --git a/app/streaming/video/ffmpeg.cpp b/app/streaming/video/ffmpeg.cpp
index 0fac812f..093ee301 100644
--- a/app/streaming/video/ffmpeg.cpp
+++ b/app/streaming/video/ffmpeg.cpp
@@ -1270,7 +1270,7 @@ void FFmpegVideoDecoder::decoderThreadProc()
             AVFrame* frame = av_frame_alloc();
             if (!frame) {
                 // Failed to allocate a frame but we did submit,
-                // so we can return DR_OK
+                // so we can return DR_OK1
                 SDL_LogWarn(SDL_LOG_CATEGORY_APPLICATION,
                             "Failed to allocate frame");
                 continue;
@@ -1478,7 +1478,7 @@ int FFmpegVideoDecoder::submitDecodeUnit(PDECODE_UNIT du)
     m_FrameInfoQueue.enqueue(*du);
 
     m_FramesIn++;
-    return DR_OK;
+    return DR_OK1;
 }
 
 void FFmpegVideoDecoder::renderFrameOnMainThread()
diff --git a/app/streaming/video/slvid.cpp b/app/streaming/video/slvid.cpp
index 5008847e..9568bbe1 100644
--- a/app/streaming/video/slvid.cpp
+++ b/app/streaming/video/slvid.cpp
@@ -166,7 +166,7 @@ SLVideoDecoder::submitDecodeUnit(PDECODE_UNIT du)
         return DR_NEED_IDR;
     }
 
-    return DR_OK;
+    return DR_OK1;
 }
 
 void SLVideoDecoder::notifyOverlayUpdated(Overlay::OverlayType type)
-- 
2.41.0

